ö
KC:\Rodrigo\source\repos\Proyectos DTV\revisaProyectosSCA\Clases\Activity.cs
	namespace 	
revisaProyectosSCA
 
. 
Clases #
{ 
public 

class 
Activity 
{		 
}

 
} Ã
MC:\Rodrigo\source\repos\Proyectos DTV\revisaProyectosSCA\Clases\Aplicacion.cs
	namespace 	
revisaProyectosSCA
 
. 
Clases #
{ 
public 

class 

Aplicacion 
{		 
public

 
string

 
Id

 
{

 
get

 
;

 
set

  #
;

# $
}

% &
public 
string 
Name 
{ 
get  
;  !
set" %
;% &
}' (
} 
} ≤9
QC:\Rodrigo\source\repos\Proyectos DTV\revisaProyectosSCA\Clases\GenericFactory.cs
	namespace 	
revisaProyectosSCA
 
. 
Clases #
{ 
public 

static 
class 
GenericFactory &
{		 
public

 
static

 
GenericActivity

 %!
CreateGenericActivity

& ;
(

; <
XmlNode

< C
nodo

D H
)

H I
{ 	
GenericActivity 
i 
= 
new  #
GenericActivity$ 3
(3 4
)4 5
;5 6
try 
{ 
i 
. 
partnerLink 
= 
nodo  $
.$ %

Attributes% /
[/ 0
$str0 =
]= >
.> ?
	InnerText? H
;H I
} 
catch 
( 
	Exception 
) 
{ 
} 
try 
{ 
i 
. 
portType 
= 
nodo !
.! "

Attributes" ,
[, -
$str- 7
]7 8
.8 9
	InnerText9 B
;B C
} 
catch 
( 
	Exception 
) 
{ 
} 
try 
{ 
i 
. 
	operation 
= 
nodo "
." #

Attributes# -
[- .
$str. 9
]9 :
.: ;
	InnerText; D
;D E
} 
catch   
(   
	Exception   
)   
{!! 
}"" 
try## 
{$$ 
i%% 
.%% 
name%% 
=%% 
nodo%% 
.%% 

Attributes%% (
[%%( )
$str%%) /
]%%/ 0
.%%0 1
	InnerText%%1 :
;%%: ;
}&& 
catch'' 
('' 
	Exception'' 
e'' 
)'' 
{(( 
string)) 
s)) 
=)) 
e)) 
.)) 
Message)) $
;))$ %
}** 
try++ 
{,, 
i-- 
.-- 
	innerName-- 
=-- 
nodo-- "
.--" #
Name--# '
;--' (
}.. 
catch// 
(// 
	Exception// 
e// 
)// 
{00 
string11 
s11 
=11 
e11 
.11 
Message11 $
;11$ %
}22 
try33 
{44 
i55 
.55 
	condition55 
=55 
nodo55 "
.55" #

Attributes55# -
[55- .
$str55. 9
]559 :
.55: ;
	InnerText55; D
;55D E
}66 
catch77 
(77 
	Exception77 
e77 
)77 
{88 
string99 
s99 
=99 
e99 
.99 
Message99 $
;99$ %
}:: 
try;; 
{<< 
i== 
.== 
faultVariable== 
===  !
nodo==" &
.==& '

Attributes==' 1
[==1 2
$str==2 A
]==A B
.==B C
	InnerText==C L
;==L M
}>> 
catch?? 
(?? 
	Exception?? 
e?? 
)?? 
{@@ 
stringAA 
sAA 
=AA 
eAA 
.AA 
MessageAA $
;AA$ %
}BB 
tryDD 
{EE 
iFF 
.FF 
targetFF 
=FF 
nodoFF 
.FF  

AttributesFF  *
[FF* +
$strFF+ 3
]FF3 4
.FF4 5
	InnerTextFF5 >
;FF> ?
}GG 
catchHH 
(HH 
	ExceptionHH 
eHH 
)HH 
{II 
stringJJ 
sJJ 
=JJ 
eJJ 
.JJ 
MessageJJ $
;JJ$ %
}KK 
tryLL 
{MM 
iNN 
.NN 
variableNN 
=NN 
nodoNN !
.NN! "

AttributesNN" ,
[NN, -
$strNN- 7
]NN7 8
.NN8 9
	InnerTextNN9 B
;NNB C
}OO 
catchPP 
(PP 
	ExceptionPP 
ePP 
)PP 
{QQ 
stringRR 
sRR 
=RR 
eRR 
.RR 
MessageRR $
;RR$ %
}SS 
tryTT 
{UU 
iVV 
.VV 

expressionVV 
=VV 
nodoVV #
.VV# $

AttributesVV$ .
[VV. /
$strVV/ ;
]VV; <
.VV< =
	InnerTextVV= F
;VVF G
}WW 
catchXX 
(XX 
	ExceptionXX 
eXX 
)XX 
{YY 
stringZZ 
sZZ 
=ZZ 
eZZ 
.ZZ 
MessageZZ $
;ZZ$ %
}[[ 
try\\ 
{]] 
i^^ 
.^^ %
bpelx_inputHeaderVariable^^ +
=^^, -
nodo^^. 2
.^^2 3

Attributes^^3 =
[^^= >
$str^^> Y
]^^Y Z
.^^Z [
	InnerText^^[ d
;^^d e
}__ 
catch`` 
(`` 
	Exception`` 
e`` 
)`` 
{aa 
stringbb 
sbb 
=bb 
ebb 
.bb 
Messagebb $
;bb$ %
}cc 
trydd 
{ee 
iff 
.ff 
inputVariableff 
=ff  !
nodoff" &
.ff& '

Attributesff' 1
[ff1 2
$strff2 A
]ffA B
.ffB C
	InnerTextffC L
;ffL M
}gg 
catchhh 
(hh 
	Exceptionhh 
ehh 
)hh 
{ii 
stringjj 
sjj 
=jj 
ejj 
.jj 
Messagejj $
;jj$ %
}kk 
tryll 
{mm 
inn 
.nn 
outputVariablenn  
=nn! "
nodonn# '
.nn' (

Attributesnn( 2
[nn2 3
$strnn3 C
]nnC D
.nnD E
	InnerTextnnE N
;nnN O
}oo 
catchpp 
(pp 
	Exceptionpp 
epp 
)pp 
{qq 
stringrr 
srr 
=rr 
err 
.rr 
Messagerr $
;rr$ %
}ss 
trytt 
{uu 
ivv 
.vv 
indexVariablevv 
=vv  !
nodovv" &
.vv& '

Attributesvv' 1
[vv1 2
$strvv2 A
]vvA B
.vvB C
	InnerTextvvC L
;vvL M
}ww 
catchxx 
(xx 
	Exceptionxx 
exx 
)xx 
{yy 
stringzz 
szz 
=zz 
ezz 
.zz 
Messagezz $
;zz$ %
}{{ 
return~~ 
i~~ 
;~~ 
} 	
}
ÄÄ 
}ÅÅ ˝
RC:\Rodrigo\source\repos\Proyectos DTV\revisaProyectosSCA\Clases\GenericActivity.cs
	namespace 	
revisaProyectosSCA
 
. 
Clases #
{ 
public 

class 
GenericActivity  
:! "
Activity# +
{		 
public

 
string

 
partnerLink

 !
{

" #
get

$ '
;

' (
set

) ,
;

, -
}

. /
public 
string 
portType 
{  
get! $
;$ %
set& )
;) *
}+ ,
public 
string 
name 
{ 
get  
;  !
set" %
;% &
}' (
public 
string 
	operation 
{  !
get" %
;% &
set' *
;* +
}, -
public 
string 
	innerName 
{  !
get" %
;% &
set' *
;* +
}, -
public 
string 
	condition 
{  !
get" %
;% &
set' *
;* +
}, -
public 
string 
target 
{ 
get "
;" #
set$ '
;' (
}) *
public 
string 

expression  
{! "
get# &
;& '
set( +
;+ ,
}- .
public 
string 
inputVariable #
{$ %
get& )
;) *
set+ .
;. /
}0 1
public 
string 
outputVariable $
{% &
get' *
;* +
set, /
;/ 0
}1 2
public 
string 
faultVariable #
{$ %
get& )
;) *
set+ .
;. /
}0 1
public 
string 
variable 
{  
get! $
;$ %
set& )
;) *
}+ ,
public 
string %
bpelx_inputHeaderVariable /
{0 1
get2 5
;5 6
set7 :
;: ;
}< =
public 
string 
indexVariable #
{$ %
get& )
;) *
set+ .
;. /
}0 1
} 
} ‹

FC:\Rodrigo\source\repos\Proyectos DTV\revisaProyectosSCA\Clases\JCA.cs
	namespace 	
revisaProyectosSCA
 
. 
Clases #
{ 
public 

class 
JCA 
{		 
public

 
string

 
name

 
{

 
get

  
;

  !
set

" %
;

% &
}

' (
public 
string 
wsdlLocation "
{# $
get% (
;( )
set* -
;- .
}/ 0
public 
string 
config 
{ 
get "
;" #
set$ '
;' (
}) *
public 
string 
cf 
{ 
get 
; 
set  #
;# $
}% &
public 
string 

cdLocation  
{! "
get# &
;& '
set( +
;+ ,
}- .
public 
string 
DestinationName %
{& '
get( +
;+ ,
set- 0
;0 1
}2 3
public 
string 
MessageSelector %
{& '
get( +
;+ ,
set- 0
;0 1
}2 3
} 
} Â
LC:\Rodrigo\source\repos\Proyectos DTV\revisaProyectosSCA\Clases\Operacion.cs
	namespace 	
revisaProyectosSCA
 
. 
Clases #
{ 
public 
class 
	Operacion 
{		 
public

 
string

 
Id

 
{

 
get

 
;

 
set

 !
;

! "
}

# $
public 
string 
Name 
{ 
get 
; 
set  #
;# $
}% &
public 
string 
Version 
{ 
get !
;! "
set# &
;& '
}( )
} 
} µ
KC:\Rodrigo\source\repos\Proyectos DTV\revisaProyectosSCA\Clases\Servicio.cs
	namespace 	
revisaProyectosSCA
 
. 
Clases #
{ 
public 	
class
 
Servicio 
{		 
public

 
string

 
Id

 
{

 
get

 
;

 
set

 "
;

" #
}

$ %
public 
string 
Name 
{ 
get 
;  
set! $
;$ %
}& '
public 
string 
Version 
{ 
get "
;" #
set$ '
;' (
}) *
public 
List 
< 
	Operacion 
> 
Operaciones )
{* +
get, /
;/ 0
set1 4
;4 5
}6 7
} 
} ´
RC:\Rodrigo\source\repos\Proyectos DTV\revisaProyectosSCA\Clases\VariableFactory.cs
	namespace 	
revisaProyectosSCA
 
. 
Clases #
{ 
public 

static 
class 
VariableFactory '
{		 
public

 
static

 
VariableActivity

 &
CreateActivity

' 5
(

5 6
XmlNode

6 =
nodo

> B
)

B C
{ 	
VariableActivity 
i 
=  
new! $
VariableActivity% 5
(5 6
)6 7
;7 8
try 
{ 
i 
. 
type 
= 
nodo 
. 

Attributes (
[( )
$str) /
]/ 0
.0 1
	InnerText1 :
;: ;
} 
catch 
( 
	Exception 
) 
{ 
} 
try 
{ 
i 
. 
messageType 
= 
nodo  $
.$ %

Attributes% /
[/ 0
$str0 =
]= >
.> ?
	InnerText? H
;H I
} 
catch 
( 
	Exception 
) 
{ 
} 
try 
{ 
i 
. 
name 
= 
nodo 
. 

Attributes (
[( )
$str) /
]/ 0
.0 1
	InnerText1 :
;: ;
} 
catch   
(   
	Exception   
e   
)   
{!! 
string"" 
s"" 
="" 
e"" 
."" 
Message"" $
;""$ %
}## 
return%% 
i%% 
;%% 
}&& 	
}'' 
}(( é
IC:\Rodrigo\source\repos\Proyectos DTV\revisaProyectosSCA\Clases\Invoke.cs
	namespace 	
revisaProyectosSCA
 
. 
Clases #
{ 
public 

class 
InvokeActivity 
:  !
Activity" *
{		 
public

 
string

 
partnerLink

 !
{

" #
get

$ '
;

' (
set

) ,
;

, -
}

. /
public 
string 
portType 
{  
get! $
;$ %
set& )
;) *
}+ ,
public 
string 
name 
{ 
get  
;  !
set" %
;% &
}' (
public 
string 
	operation 
{  !
get" %
;% &
set' *
;* +
}, -
public 
string 
	innerName 
{  !
get" %
;% &
set' *
;* +
}, -
public 
string 
	condition 
{  !
get" %
;% &
set' *
;* +
}, -
public 
string 
faultVariable #
{$ %
get& )
;) *
set+ .
;. /
}0 1
} 
} ∞
PC:\Rodrigo\source\repos\Proyectos DTV\revisaProyectosSCA\Clases\InvokeFactory.cs
	namespace 	
revisaProyectosSCA
 
. 
Clases #
{ 
public 

static 
class 
InvokeFactory %
{		 
public

 
static

 
InvokeActivity

 $
CreateInvoke

% 1
(

1 2
XmlNode

2 9
nodo

: >
)

> ?
{ 	
InvokeActivity 
i 
= 
new "
InvokeActivity# 1
(1 2
)2 3
;3 4
try 
{ 
i 
. 
partnerLink 
= 
nodo  $
.$ %

Attributes% /
[/ 0
$str0 =
]= >
.> ?
	InnerText? H
;H I
} 
catch 
( 
	Exception 
) 
{ 
} 
try 
{ 
i 
. 
portType 
= 
nodo !
.! "

Attributes" ,
[, -
$str- 7
]7 8
.8 9
	InnerText9 B
;B C
} 
catch 
( 
	Exception 
) 
{ 
} 
try 
{ 
i 
. 
	operation 
= 
nodo "
." #

Attributes# -
[- .
$str. 9
]9 :
.: ;
	InnerText; D
;D E
} 
catch   
(   
	Exception   
)   
{!! 
}"" 
try## 
{$$ 
i%% 
.%% 
name%% 
=%% 
nodo%% 
.%% 

Attributes%% (
[%%( )
$str%%) /
]%%/ 0
.%%0 1
	InnerText%%1 :
;%%: ;
}&& 
catch'' 
('' 
	Exception'' 
e'' 
)'' 
{(( 
string)) 
s)) 
=)) 
e)) 
.)) 
Message)) $
;))$ %
}** 
try++ 
{,, 
i-- 
.-- 
	innerName-- 
=-- 
nodo-- "
.--" #
Name--# '
;--' (
}.. 
catch// 
(// 
	Exception// 
e// 
)// 
{00 
string11 
s11 
=11 
e11 
.11 
Message11 $
;11$ %
}22 
try33 
{44 
i55 
.55 
	condition55 
=55 
nodo55 "
.55" #

Attributes55# -
[55- .
$str55. 9
]559 :
.55: ;
	InnerText55; D
;55D E
}66 
catch77 
(77 
	Exception77 
e77 
)77 
{88 
string99 
s99 
=99 
e99 
.99 
Message99 $
;99$ %
}:: 
try;; 
{<< 
i== 
.== 
faultVariable== 
===  !
nodo==" &
.==& '

Attributes==' 1
[==1 2
$str==2 A
]==A B
.==B C
	InnerText==C L
;==L M
}>> 
catch?? 
(?? 
	Exception?? 
e?? 
)?? 
{@@ 
stringAA 
sAA 
=AA 
eAA 
.AA 
MessageAA $
;AA$ %
}BB 
returnEE 
iEE 
;EE 
}FF 	
}GG 
}HH û
SC:\Rodrigo\source\repos\Proyectos DTV\revisaProyectosSCA\Clases\VariableActivity.cs
	namespace 	
revisaProyectosSCA
 
. 
Clases #
{ 
public 

class 
VariableActivity !
:" #
Activity$ ,
{		 
public

 
string

 
name

 
{

 
get

  
;

  !
set

" %
;

% &
}

' (
public 
string 
messageType !
{" #
get$ '
;' (
set) ,
;, -
}. /
public 
string 
type 
{ 
get  
;  !
set" %
;% &
}' (
} 
} î
AC:\Rodrigo\source\repos\Proyectos DTV\revisaProyectosSCA\Form2.cs
	namespace

 	
revisaProyectosSCA


 
{ 
public 

partial 
class 
Form2 
:  
Form! %
{ 
List 
< 
TreeNode 
> 

lVariables !
;! "
List 
< 
string 
> 
keywords 
= 
new  #
List$ (
<( )
string) /
>/ 0
{1 2
$str3 9
,9 :
$str; G
,G H
$strI S
,S T
$strU Y
,Y Z
$str[ d
,d e
$strf m
,m n
$stro }
,} ~
$str	 è
,
è ê
$str
ë ô
,
ô ö
$str
õ °
,
° ¢
$str
£ ∞
,
∞ ±
$str
≤ π
,
π ∫
$str
ª ¬
,
¬ √
$str
ƒ –
,
– —
$str
“ ÿ
,
ÿ Ÿ
$str
⁄ ‡
}
· ‚
;
‚ „
int 
level 
= 
$num 
; 
string 
operation_name 
; 
string 
service_name 
; 
StreamWriter 
arch 
; 
public 
Form2 
( 
) 
{ 	
InitializeComponent 
(  
)  !
;! "
} 	
private 
void 

Form1_Load 
(  
object  &
sender' -
,- .
	EventArgs/ 8
e9 :
): ;
{ 	
tbFolder 
. 
Text 
=  
ConfigurationManager 0
.0 1
AppSettings1 <
[< =
$str= I
]I J
;J K
} 	
private   
void   
bOpen_Click    
(    !
object  ! '
sender  ( .
,  . /
	EventArgs  0 9
e  : ;
)  ; <
{!! 	
if"" 
(""  
folderBrowserDialog1"" $
.""$ %
SelectedPath""% 1
.""1 2
Equals""2 8
(""8 9
$str""9 ;
)""; <
)""< = 
folderBrowserDialog1## $
.##$ %
SelectedPath##% 1
=##2 3 
ConfigurationManager##4 H
.##H I
AppSettings##I T
[##T U
$str##U a
]##a b
;##b c
else$$  
folderBrowserDialog1%% $
.%%$ %
SelectedPath%%% 1
=%%2 3
tbFolder%%4 <
.%%< =
Text%%= A
;%%A B 
folderBrowserDialog1''  
.''  !
ShowNewFolderButton''! 4
=''5 6
false''7 <
;''< = 
folderBrowserDialog1((  
.((  !

ShowDialog((! +
(((+ ,
)((, -
;((- .
if)) 
())  
folderBrowserDialog1)) $
.))$ %
SelectedPath))% 1
.))1 2
Length))2 8
>))9 :
$num)); <
)))< =
{** 
tbFolder++ 
.++ 
Text++ 
=++  
folderBrowserDialog1++  4
.++4 5
SelectedPath++5 A
;++A B
var-- 
x-- 
=-- 
new-- 
System-- "
.--" #
IO--# %
.--% &
DirectoryInfo--& 3
(--3 4
tbFolder--4 <
.--< =
Text--= A
)--A B
;--B C
service_name.. 
=.. 
x..  
...  !
Name..! %
;..% &
leeDirectorio00 
(00 
tbFolder00 &
.00& '
Text00' +
)00+ ,
;00, -
}11 
}22 	
private44 
void44 
leeDirectorio44 "
(44" #
string44# )
Path44* .
)44. /
{55 	

lbArtifact66 
.66 
Items66 
.66 
Clear66 "
(66" #
)66# $
;66$ %
ScanDirectory88 
.88 
ScanDirectory88 '
scanDirectory88( 5
=886 7
new888 ;
ScanDirectory88< I
.88I J
ScanDirectory88J W
(88W X
)88X Y
;88Y Z
scanDirectory99 
.99 
	FileEvent99 #
+=99$ &
new99' *
ScanDirectory99+ 8
.998 9
ScanDirectory999 F
.99F G
FileEventHandler99G W
(99W X#
scanDirectory_FileEvent99X o
)99o p
;99p q
scanDirectory:: 
.:: 
SearchPattern:: '
=::( ) 
ConfigurationManager::* >
.::> ?
AppSettings::? J
[::J K
$str::K Z
]::Z [
;::[ \
scanDirectory;; 
.;; 
WalkDirectory;; '
(;;' (
Path;;( ,
);;, -
;;;- .
}<< 	
private>> 
void>> #
scanDirectory_FileEvent>> ,
(>>, -
object>>- 3
sender>>4 :
,>>: ;
FileEventArgs>>< I
e>>J K
)>>K L
{?? 	

lbArtifact@@ 
.@@ 
Items@@ 
.@@ 
Add@@  
(@@  !
e@@! "
.@@" #
Info@@# '
.@@' (
Name@@( ,
)@@, -
;@@- .
}AA 	
privateCC 
voidCC +
lbArtifact_SelectedIndexChangedCC 4
(CC4 5
objectCC5 ;
senderCC< B
,CCB C
	EventArgsCCD M
eCCN O
)CCO P
{DD 	
ifEE 
(EE 

lbArtifactEE 
.EE 
SelectedIndexEE (
>=EE) +
$numEE, -
)EE- .
{FF 
lblArtifactGG 
.GG 
TextGG  
=GG! "
(GG# $
stringGG$ *
)GG* +

lbArtifactGG+ 5
.GG5 6
SelectedItemGG6 B
;GGB C
lblArtifactHH 
.HH 
TagHH 
=HH  !
tbFolderHH" *
.HH* +
TextHH+ /
+HH0 1
$strHH2 6
+HH7 8
lblArtifactHH9 D
.HHD E
TextHHE I
;HHI J
tvPartsII 
.II 
NodesII 
.II 
ClearII #
(II# $
)II$ %
;II% &
}JJ 
}KK 	
privateMM 
voidMM 
bParseAll_ClickMM $
(MM$ %
objectMM% +
senderMM, 2
,MM2 3
	EventArgsMM4 =
eMM> ?
)MM? @
{NN 	
varOO 
nombre_archOO 
=OO 
stringOO $
.OO$ %
FormatOO% +
(OO+ ,
$strOO, 5
,OO5 6
service_nameOO7 C
)OOC D
;OOD E
archPP 
=PP 
newPP 
StreamWriterPP #
(PP# $ 
ConfigurationManagerPP$ 8
.PP8 9
AppSettingsPP9 D
[PPD E
$strPPE K
]PPK L
+PPM N
nombre_archPPO Z
,PPZ [
falsePP\ a
)PPa b
;PPb c
forRR 
(RR 
intRR 
iRR 
=RR 
$numRR 
;RR 
iRR 
<RR 

lbArtifactRR  *
.RR* +
ItemsRR+ 0
.RR0 1
CountRR1 6
;RR6 7
iRR8 9
++RR9 ;
)RR; <
{SS 
operation_nameTT 
=TT  
$strTT! #
;TT# $

lbArtifactUU 
.UU 
SelectedIndexUU (
=UU) *
iUU+ ,
;UU, -
bParse_ClickWW 
(WW 
nullWW !
,WW! "
nullWW# '
)WW' (
;WW( )
}XX 
archZZ 
.ZZ 
CloseZZ 
(ZZ 
)ZZ 
;ZZ 
}[[ 	
private]] 
void]] 
bParse_Click]] !
(]]! "
object]]" (
sender]]) /
,]]/ 0
	EventArgs]]1 :
e]]; <
)]]< =
{^^ 	
progressBar1__ 
.__ 
Visible__  
=__! "
true__# '
;__' (
String`` 
	file_name`` 
=`` 
lblArtifact`` *
.``* +
Tag``+ .
.``. /
ToString``/ 7
(``7 8
)``8 9
;``9 :
varbb 
fiobb 
=bb 
newbb 
Systembb  
.bb  !
IObb! #
.bb# $
FileInfobb$ ,
(bb, -
	file_namebb- 6
)bb6 7
;bb7 8
Consoledd 
.dd 
	WriteLinedd 
(dd 
	file_namedd '
)dd' (
;dd( )
XmlDocumentff 
docff 
=ff 
newff !
XmlDocumentff" -
(ff- .
)ff. /
;ff/ 0
docgg 
.gg 
Loadgg 
(gg 
	file_namegg 
)gg 
;gg  
progressBar1ii 
.ii 
Minimumii  
=ii! "
$numii# $
;ii$ %
progressBar1jj 
.jj 
Valuejj 
=jj  
$numjj! "
;jj" #

lVariablesll 
=ll 
newll 
Listll !
<ll! "
TreeNodell" *
>ll* +
(ll+ ,
)ll, -
;ll- .
levelmm 
=mm 
$nummm 
;mm 
XmlNodeListoo 
	bdProcessoo !
=oo" #
docoo$ '
.oo' ( 
GetElementsByTagNameoo( <
(oo< =
$stroo= F
)ooF G
;ooG H
foreachpp 
(pp 
XmlNodepp 
nodePpp "
inpp# %
	bdProcesspp& /
)pp/ 0
{qq 

XmlElementss 
subsElementss &
=ss' (
(ss) *

XmlElementss* 4
)ss4 5
nodePss5 :
;ss: ;
XmlNodeListtt 
stepsSEtt #
=tt$ %
subsElementtt& 1
.tt1 2

ChildNodestt2 <
;tt< =
progressBar1yy 
.yy 
Maximumyy $
=yy% &
stepsSEyy' .
.yy. /
Countyy/ 4
+yy5 6
$numyy7 8
;yy8 9
foreachzz 
(zz 
XmlNodezz  
nodeStepzz! )
inzz* ,
stepsSEzz- 4
)zz4 5
{{{ 
progressBar1||  
.||  !
Value||! &
+=||' )
$num||* +
;||+ ,
progressBar1}}  
.}}  !
Update}}! '
(}}' (
)}}( )
;}}) *
level 
+= 
$num 
; 

RevisaNodo
ÄÄ 
(
ÄÄ 
nodeStep
ÄÄ '
,
ÄÄ' (
fio
ÄÄ) ,
.
ÄÄ, -
Name
ÄÄ- 1
)
ÄÄ1 2
;
ÄÄ2 3
level
ÅÅ 
-=
ÅÅ 
$num
ÅÅ 
;
ÅÅ 
}
ÇÇ 
}
ÖÖ 
progressBar1
ÜÜ 
.
ÜÜ 
Visible
ÜÜ  
=
ÜÜ! "
false
ÜÜ# (
;
ÜÜ( )
}
áá 	
private
óó 
void
óó 

RevisaNodo
óó 
(
óó  
XmlNode
óó  '
nodo
óó( ,
,
óó, -
string
óó. 4
	file_name
óó5 >
)
óó> ?
{
òò 	
switch
ôô 
(
ôô 
nodo
ôô 
.
ôô 
Name
ôô 
)
ôô 
{
öö 
case
õõ 
$str
õõ 
:
õõ 
case
úú 
$str
úú 
:
úú 
case
ùù 
$str
ùù 
:
ùù  
case
ûû 
$str
ûû 
:
ûû 
case
üü 
$str
üü 
:
üü  
case
†† 
$str
†† !
:
††! "
case
°° 
$str
°° 
:
°° 
case
¢¢ 
$str
¢¢ 
:
¢¢ 
case
££ 
$str
££ #
:
££# $
case
§§ 
$str
§§ %
:
§§% &
case
¶¶ 
$str
¶¶  
:
¶¶  !
case
ßß 
$str
ßß 
:
ßß  
case
®® 
$str
®® "
:
®®" #
case
©© 
$str
©© #
:
©©# $
case
™™ 
$str
™™ 
:
™™ 
case
´´ 
$str
´´ 
:
´´ 
case
¨¨ 
$str
¨¨ 
:
¨¨ 
case
≠≠ 
$str
≠≠  
:
≠≠  !
case
ÆÆ 
$str
ÆÆ 
:
ÆÆ 
case
ØØ 
$str
ØØ 
:
ØØ 
case
∞∞ 
$str
∞∞ 
:
∞∞ 
case
±± 
$str
±± 
:
±± 
case
≤≤ 
$str
≤≤ $
:
≤≤$ %
case
≥≥ 
$str
≥≥ 
:
≥≥ 
case
¥¥ 
$str
¥¥ 
:
¥¥  
case
µµ 
$str
µµ !
:
µµ! "
case
∂∂ 
$str
∂∂ #
:
∂∂# $
case
∑∑ 
$str
∑∑ #
:
∑∑# $
case
∏∏ 
$str
∏∏ "
:
∏∏" #
case
ππ 
$str
ππ 
:
ππ 
case
∫∫ 
$str
∫∫ 
:
∫∫ 
case
ªª 
$str
ªª  
:
ªª  !
if
√√ 
(
√√ 
nodo
√√ 
.
√√ 
Name
√√ !
==
√√" $
$str
√√% .
||
√√/ 1
nodo
√√2 6
.
√√6 7
Name
√√7 ;
==
√√< >
$str
√√? J
)
√√J K
{
ƒƒ 
operation_name
≈≈ &
=
≈≈' (
nodo
≈≈) -
.
≈≈- .

Attributes
≈≈. 8
[
≈≈8 9
$str
≈≈9 D
]
≈≈D E
.
≈≈E F
	InnerText
≈≈F O
;
≈≈O P
}
∆∆ 
if
«« 
(
«« 
nodo
«« 
.
«« 
HasChildNodes
«« *
)
««* +
{
»» 
level
…… 
+=
……  
$num
……! "
;
……" #
foreach
   
(
    !
XmlNode
  ! (
nodoHijo
  ) 1
in
  2 4
nodo
  5 9
.
  9 :

ChildNodes
  : D
)
  D E
{
ÀÀ 

RevisaNodo
ÃÃ &
(
ÃÃ& '
nodoHijo
ÃÃ' /
,
ÃÃ/ 0
	file_name
ÃÃ1 :
)
ÃÃ: ;
;
ÃÃ; <
}
ÕÕ 
level
ŒŒ 
-=
ŒŒ  
$num
ŒŒ! "
;
ŒŒ" #
}
œœ 
if
‘‘ 
(
‘‘ 
nodo
‘‘ 
.
‘‘ 
Name
‘‘ !
==
‘‘" $
$str
‘‘% -
&&
‘‘. 0
operation_name
‘‘1 ?
!=
‘‘@ B
$str
‘‘C E
)
‘‘E F
{
’’ 
var
÷÷ 
operation_invoked
÷÷ -
=
÷÷. /
nodo
÷÷0 4
.
÷÷4 5

Attributes
÷÷5 ?
[
÷÷? @
$str
÷÷@ K
]
÷÷K L
.
÷÷L M
	InnerText
÷÷M V
;
÷÷V W
var
◊◊ 
partner_link
◊◊ (
=
◊◊) *
nodo
◊◊+ /
.
◊◊/ 0

Attributes
◊◊0 :
[
◊◊: ;
$str
◊◊; H
]
◊◊H I
.
◊◊I J
	InnerText
◊◊J S
;
◊◊S T
var
ÿÿ 
	port_type
ÿÿ %
=
ÿÿ& '
nodo
ÿÿ( ,
.
ÿÿ, -

Attributes
ÿÿ- 7
[
ÿÿ7 8
$str
ÿÿ8 B
]
ÿÿB C
.
ÿÿC D
	InnerText
ÿÿD M
;
ÿÿM N
arch
⁄⁄ 
.
⁄⁄ 
	WriteLine
⁄⁄ &
(
⁄⁄& '
$str
⁄⁄' E
,
⁄⁄E F
	file_name
⁄⁄G P
,
⁄⁄P Q
service_name
⁄⁄R ^
,
⁄⁄^ _
operation_name
⁄⁄` n
,
⁄⁄n o 
operation_invoked⁄⁄p Å
,⁄⁄Å Ç
partner_link⁄⁄É è
,⁄⁄è ê
	port_type⁄⁄ë ö
)⁄⁄ö õ
;⁄⁄õ ú
}
€€ 
break
ﬁﬁ 
;
ﬁﬁ 
default
ﬂﬂ 
:
ﬂﬂ 
break
‡‡ 
;
‡‡ 
}
·· 
}
‚‚ 	
}
∆∆ 
}«« äË
AC:\Rodrigo\source\repos\Proyectos DTV\revisaProyectosSCA\Form1.cs
	namespace		 	
revisaProyectosSCA		
 
{

 
public 

partial 
class 
Form1 
:  
Form! %
{ 
List 
< 
TreeNode 
> 

lVariables !
;! "
List 
< 
string 
> 
keywords 
= 
new  #
List$ (
<( )
string) /
>/ 0
{1 2
$str3 9
,9 :
$str; G
,G H
$strI S
,S T
$strU Y
,Y Z
$str[ d
,d e
$strf m
,m n
$stro }
,} ~
$str	 è
,
è ê
$str
ë ô
,
ô ö
$str
õ °
,
° ¢
$str
£ ∞
,
∞ ±
$str
≤ π
,
π ∫
$str
ª ¬
,
¬ √
$str
ƒ –
,
– —
$str
“ ÿ
}
Ÿ ⁄
;
⁄ €
int 
level 
= 
$num 
; 
public 
Form1 
( 
) 
{ 	
InitializeComponent 
(  
)  !
;! "
} 	
private 
void 
bOpen_Click  
(  !
object! '
sender( .
,. /
	EventArgs0 9
e: ;
); <
{ 	
if 
(  
folderBrowserDialog1 $
.$ %
SelectedPath% 1
.1 2
Equals2 8
(8 9
$str9 ;
); <
)< = 
folderBrowserDialog1 $
.$ %
SelectedPath% 1
=2 3 
ConfigurationManager4 H
.H I
AppSettingsI T
[T U
$strU a
]a b
;b c
else  
folderBrowserDialog1 $
.$ %
SelectedPath% 1
=2 3
tbFolder4 <
.< =
Text= A
;A B 
folderBrowserDialog1  
.  !
ShowNewFolderButton! 4
=5 6
false7 <
;< = 
folderBrowserDialog1  
.  !

ShowDialog! +
(+ ,
), -
;- .
if 
(  
folderBrowserDialog1 $
.$ %
SelectedPath% 1
.1 2
Length2 8
>9 :
$num; <
)< =
{   
tbFolder!! 
.!! 
Text!! 
=!!  
folderBrowserDialog1!!  4
.!!4 5
SelectedPath!!5 A
;!!A B
leeDirectorio## 
(## 
tbFolder## &
.##& '
Text##' +
)##+ ,
;##, -
}$$ 
}%% 	
private'' 
void'' 
leeDirectorio'' "
(''" #
string''# )
Path''* .
)''. /
{(( 	

lbArtifact)) 
.)) 
Items)) 
.)) 
Clear)) "
())" #
)))# $
;))$ %
ScanDirectory++ 
.++ 
ScanDirectory++ '
scanDirectory++( 5
=++6 7
new++8 ;
ScanDirectory++< I
.++I J
ScanDirectory++J W
(++W X
)++X Y
;++Y Z
scanDirectory,, 
.,, 
	FileEvent,, #
+=,,$ &
new,,' *
ScanDirectory,,+ 8
.,,8 9
ScanDirectory,,9 F
.,,F G
FileEventHandler,,G W
(,,W X#
scanDirectory_FileEvent,,X o
),,o p
;,,p q
scanDirectory-- 
.-- 
SearchPattern-- '
=--( ) 
ConfigurationManager--* >
.--> ?
AppSettings--? J
[--J K
$str--K Z
]--Z [
;--[ \
scanDirectory.. 
... 
WalkDirectory.. '
(..' (
Path..( ,
).., -
;..- .
}// 	
private11 
void11 #
scanDirectory_FileEvent11 ,
(11, -
object11- 3
sender114 :
,11: ;
FileEventArgs11< I
e11J K
)11K L
{22 	

lbArtifact33 
.33 
Items33 
.33 
Add33  
(33  !
e33! "
.33" #
Info33# '
.33' (
Name33( ,
)33, -
;33- .
}44 	
private66 
void66 +
lbArtifact_SelectedIndexChanged66 4
(664 5
object665 ;
sender66< B
,66B C
	EventArgs66D M
e66N O
)66O P
{77 	
if88 
(88 

lbArtifact88 
.88 
SelectedIndex88 (
>=88) +
$num88, -
)88- .
{99 
lblArtifact:: 
.:: 
Text::  
=::! "
(::# $
string::$ *
)::* +

lbArtifact::+ 5
.::5 6
SelectedItem::6 B
;::B C
lblArtifact;; 
.;; 
Tag;; 
=;;  !
tbFolder;;" *
.;;* +
Text;;+ /
+;;0 1
$str;;2 6
+;;7 8
lblArtifact;;9 D
.;;D E
Text;;E I
;;;I J
tvParts<< 
.<< 
Nodes<< 
.<< 
Clear<< #
(<<# $
)<<$ %
;<<% &
}== 
}>> 	
private@@ 
void@@ 
bParse_Click@@ !
(@@! "
object@@" (
sender@@) /
,@@/ 0
	EventArgs@@1 :
e@@; <
)@@< =
{AA 	
progressBar1BB 
.BB 
VisibleBB  
=BB! "
trueBB# '
;BB' (
StringCC 
	file_nameCC 
=CC 
lblArtifactCC *
.CC* +
TagCC+ .
.CC. /
ToStringCC/ 7
(CC7 8
)CC8 9
;CC9 :
ConsoleEE 
.EE 
	WriteLineEE 
(EE 
	file_nameEE '
)EE' (
;EE( )
XmlDocumentGG 
docGG 
=GG 
newGG !
XmlDocumentGG" -
(GG- .
)GG. /
;GG/ 0
docHH 
.HH 
LoadHH 
(HH 
	file_nameHH 
)HH 
;HH  
progressBar1JJ 
.JJ 
MinimumJJ  
=JJ! "
$numJJ# $
;JJ$ %
progressBar1KK 
.KK 
ValueKK 
=KK  
$numKK! "
;KK" #

lVariablesMM 
=MM 
newMM 
ListMM !
<MM! "
TreeNodeMM" *
>MM* +
(MM+ ,
)MM, -
;MM- .
levelNN 
=NN 
$numNN 
;NN 
XmlNodeListPP 
	bdProcessPP !
=PP" #
docPP$ '
.PP' ( 
GetElementsByTagNamePP( <
(PP< =
$strPP= F
)PPF G
;PPG H
foreachQQ 
(QQ 
XmlNodeQQ 
nodePQQ "
inQQ# %
	bdProcessQQ& /
)QQ/ 0
{RR 

XmlElementTT 
subsElementTT &
=TT' (
(TT) *

XmlElementTT* 4
)TT4 5
nodePTT5 :
;TT: ;
XmlNodeListUU 
stepsSEUU #
=UU$ %
subsElementUU& 1
.UU1 2

ChildNodesUU2 <
;UU< =
TreeNodeWW 
tnWW 
=WW 
tvPartsWW %
.WW% &
NodesWW& +
.WW+ ,
AddWW, /
(WW/ 0
stringWW0 6
.WW6 7
FormatWW7 =
(WW= >
$strWW> I
,WWI J
$strWWK T
,WWT U
nodePWWV [
.WW[ \

AttributesWW\ f
[WWf g
$strWWg m
]WWm n
.WWn o
	InnerTextWWo x
)WWx y
)WWy z
;WWz {
tvPartsXX 
.XX 
SelectedNodeXX $
=XX% &
tnXX' )
;XX) *
progressBar1ZZ 
.ZZ 
MaximumZZ $
=ZZ% &
stepsSEZZ' .
.ZZ. /
CountZZ/ 4
+ZZ5 6
$numZZ7 8
;ZZ8 9
foreach[[ 
([[ 
XmlNode[[  
nodeStep[[! )
in[[* ,
stepsSE[[- 4
)[[4 5
{\\ 
progressBar1]]  
.]]  !
Value]]! &
+=]]' )
$num]]* +
;]]+ ,
progressBar1^^  
.^^  !
Update^^! '
(^^' (
)^^( )
;^^) *
level`` 
+=`` 
$num`` 
;`` 

RevisaNodoaa 
(aa 
nodeStepaa '
)aa' (
;aa( )
levelbb 
-=bb 
$numbb 
;bb 
}cc  
checkUnusedVariablesee $
(ee$ %
)ee% &
;ee& '
}ff 
progressBar1gg 
.gg 
Visiblegg  
=gg! "
falsegg# (
;gg( )
}hh 	
privatejj 
voidjj  
checkUnusedVariablesjj )
(jj) *
)jj* +
{kk 	
foreachll 
(ll 
TreeNodell 
itemll "
inll# %

lVariablesll& 0
)ll0 1
{mm 
foreachnn 
(nn 
TreeNodenn !
item2nn" '
innn( *
itemnn+ /
.nn/ 0
Nodesnn0 5
)nn5 6
{oo 
ifpp 
(pp 
item2pp 
.pp 
Nodespp #
.pp# $
Countpp$ )
==pp* ,
$numpp- .
)pp. /
{qq 
item2rr 
.rr 
	ForeColorrr '
=rr( )
Systemrr* 0
.rr0 1
Drawingrr1 8
.rr8 9
Colorrr9 >
.rr> ?
DarkRedrr? F
;rrF G
}ss 
}tt 
}uu 
}vv 	
privatexx 
voidxx 

RevisaNodoxx 
(xx  
XmlNodexx  '
nodoxx( ,
)xx, -
{yy 	
switchzz 
(zz 
nodozz 
.zz 
Namezz 
)zz 
{{{ 
case|| 
$str|| 
:|| 
case}} 
$str}} 
:}} 
case~~ 
$str~~ 
:~~  
case 
$str 
: 
case
ÄÄ 
$str
ÄÄ 
:
ÄÄ  
case
ÅÅ 
$str
ÅÅ !
:
ÅÅ! "
case
ÇÇ 
$str
ÇÇ 
:
ÇÇ 
case
ÉÉ 
$str
ÉÉ 
:
ÉÉ 
case
ÑÑ 
$str
ÑÑ #
:
ÑÑ# $
case
ÖÖ 
$str
ÖÖ %
:
ÖÖ% &
case
áá 
$str
áá  
:
áá  !
case
àà 
$str
àà 
:
àà  
case
ââ 
$str
ââ "
:
ââ" #
case
ää 
$str
ää #
:
ää# $
case
ãã 
$str
ãã 
:
ãã 
case
åå 
$str
åå 
:
åå 
case
çç 
$str
çç 
:
çç 
case
éé 
$str
éé  
:
éé  !
case
èè 
$str
èè 
:
èè 
case
êê 
$str
êê 
:
êê 
case
ëë 
$str
ëë 
:
ëë 
case
íí 
$str
íí 
:
íí 
case
ìì 
$str
ìì $
:
ìì$ %
case
îî 
$str
îî 
:
îî 
case
ïï 
$str
ïï 
:
ïï  
case
ññ 
$str
ññ !
:
ññ! "
case
óó 
$str
óó #
:
óó# $
case
òò 
$str
òò #
:
òò# $
case
ôô 
$str
ôô "
:
ôô" #
case
öö 
$str
öö 
:
öö 
GenericActivity
úú #
activity
úú$ ,
=
úú- .
GenericFactory
úú/ =
.
úú= >#
CreateGenericActivity
úú> S
(
úúS T
nodo
úúT X
)
úúX Y
;
úúY Z
TreeNode
ùù 
tn
ùù 
=
ùù  !
tvParts
ùù" )
.
ùù) *
SelectedNode
ùù* 6
.
ùù6 7
Nodes
ùù7 <
.
ùù< =
Add
ùù= @
(
ùù@ A

NombreNodo
ùùA K
(
ùùK L
activity
ùùL T
)
ùùT U
)
ùùU V
;
ùùV W
tvParts
ûû 
.
ûû 
SelectedNode
ûû (
=
ûû) *
tn
ûû+ -
;
ûû- .
if
üü 
(
üü 
nodo
üü 
.
üü 
Name
üü !
==
üü" $
$str
üü% 0
)
üü0 1

lVariables
†† "
.
††" #
Add
††# &
(
††& '
tn
††' )
)
††) *
;
††* +
if
¢¢ 
(
¢¢ 
nodo
¢¢ 
.
¢¢ 
HasChildNodes
¢¢ *
)
¢¢* +
{
££ 
level
§§ 
+=
§§  
$num
§§! "
;
§§" #
foreach
•• 
(
••  !
XmlNode
••! (
nodoHijo
••) 1
in
••2 4
nodo
••5 9
.
••9 :

ChildNodes
••: D
)
••D E
{
¶¶ 

RevisaNodo
ßß &
(
ßß& '
nodoHijo
ßß' /
)
ßß/ 0
;
ßß0 1
}
®® 
level
©© 
-=
©©  
$num
©©! "
;
©©" #
}
™™ #
ActividadUsaVariable2
´´ )
(
´´) *
activity
´´* 2
)
´´2 3
;
´´3 4
tn
≠≠ 
=
≠≠ 
tvParts
≠≠  
.
≠≠  !
SelectedNode
≠≠! -
.
≠≠- .
Parent
≠≠. 4
;
≠≠4 5
tvParts
≥≥ 
.
≥≥ 
SelectedNode
≥≥ (
=
≥≥) *
tn
≥≥+ -
;
≥≥- .
break
µµ 
;
µµ 
default
∂∂ 
:
∂∂ 
break
∑∑ 
;
∑∑ 
}
∏∏ 
}
ππ 	
private
ªª 
void
ªª 
RevisaUsoVariable
ªª &
(
ªª& '
XmlNode
ªª' .
nodo
ªª/ 3
,
ªª3 4
string
ªª5 ;
p
ªª< =
,
ªª= >
TreeNode
ªª? G
nodoVar
ªªH O
)
ªªO P
{
ºº 	
switch
ΩΩ 
(
ΩΩ 
nodo
ΩΩ 
.
ΩΩ 
Name
ΩΩ 
)
ΩΩ 
{
ææ 
case
øø 
$str
øø 
:
øø 
case
¿¿ 
$str
¿¿ !
:
¿¿! "
case
¬¬ 
$str
¬¬ 
:
¬¬  
case
√√ 
$str
√√ 
:
√√ 
case
ƒƒ 
$str
ƒƒ 
:
ƒƒ 
case
≈≈ 
$str
≈≈ 
:
≈≈ 
case
∆∆ 
$str
∆∆ #
:
∆∆# $
case
»» 
$str
»» %
:
»»% &
case
   
$str
   
:
   
case
ÃÃ 
$str
ÃÃ 
:
ÃÃ 
case
ŒŒ 
$str
ŒŒ "
:
ŒŒ" #
case
–– 
$str
–– 
:
–– 
case
““ 
$str
““ !
:
““! "
case
⁄⁄ 
$str
⁄⁄ 
:
⁄⁄ 
case
€€ 
$str
€€ 
:
€€  
case
‹‹ 
$str
‹‹ 
:
‹‹ 
case
›› 
$str
›› 
:
›› 
case
ﬁﬁ 
$str
ﬁﬁ 
:
ﬁﬁ 
case
ﬂﬂ 
$str
ﬂﬂ  
:
ﬂﬂ  !
case
‡‡ 
$str
‡‡ $
:
‡‡$ %
case
·· 
$str
·· #
:
··# $
case
‚‚ 
$str
‚‚ #
:
‚‚# $
case
„„ 
$str
„„ 
:
„„ 
case
‰‰ 
$str
‰‰ 
:
‰‰  
case
ÂÂ 
$str
ÂÂ 
:
ÂÂ 
GenericActivity
ÁÁ #
activity
ÁÁ$ ,
=
ÁÁ- .
GenericFactory
ÁÁ/ =
.
ÁÁ= >#
CreateGenericActivity
ÁÁ> S
(
ÁÁS T
nodo
ÁÁT X
)
ÁÁX Y
;
ÁÁY Z
if
ÈÈ 
(
ÈÈ "
ActividadUsaVariable
ÈÈ ,
(
ÈÈ, -
nodo
ÈÈ- 1
.
ÈÈ1 2
Name
ÈÈ2 6
,
ÈÈ6 7
p
ÈÈ8 9
,
ÈÈ9 :
activity
ÈÈ; C
)
ÈÈC D
)
ÈÈD E
{
ÍÍ 
nodoVar
ÎÎ 
.
ÎÎ  
Nodes
ÎÎ  %
.
ÎÎ% &
Add
ÎÎ& )
(
ÎÎ) *

NombreNodo
ÎÎ* 4
(
ÎÎ4 5
activity
ÎÎ5 =
)
ÎÎ= >
)
ÎÎ> ?
;
ÎÎ? @
}
ÏÏ 
if
ÌÌ 
(
ÌÌ 
nodo
ÌÌ 
.
ÌÌ 
HasChildNodes
ÌÌ *
)
ÌÌ* +
{
ÓÓ 
foreach
ÔÔ 
(
ÔÔ  !
XmlNode
ÔÔ! (
nodoHijo
ÔÔ) 1
in
ÔÔ2 4
nodo
ÔÔ5 9
.
ÔÔ9 :

ChildNodes
ÔÔ: D
)
ÔÔD E
{
 
RevisaUsoVariable
ÒÒ -
(
ÒÒ- .
nodoHijo
ÒÒ. 6
,
ÒÒ6 7
p
ÒÒ8 9
,
ÒÒ9 :
nodoVar
ÒÒ; B
)
ÒÒB C
;
ÒÒC D
}
ÚÚ 
}
ÛÛ 
break
ıı 
;
ıı 
default
ˆˆ 
:
ˆˆ 
break
˜˜ 
;
˜˜ 
}
¯¯ 
}
˘˘ 	
private
˚˚ 
bool
˚˚ "
ActividadUsaVariable
˚˚ )
(
˚˚) *
string
˚˚* 0
NombreActividad
˚˚1 @
,
˚˚@ A
string
˚˚B H
	NombreVar
˚˚I R
,
˚˚R S
GenericActivity
˚˚T c
activity
˚˚d l
)
˚˚l m
{
¸¸ 	
bool
˝˝ 
ret
˝˝ 
=
˝˝ 
false
˝˝ 
;
˝˝ 
switch
˛˛ 
(
˛˛ 
NombreActividad
˛˛ #
)
˛˛# $
{
ˇˇ 
case
ÄÄ 
$str
ÄÄ 
:
ÄÄ 
case
ÅÅ 
$str
ÅÅ !
:
ÅÅ! "
if
ÇÇ 
(
ÇÇ 
activity
ÇÇ  
.
ÇÇ  !
variable
ÇÇ! )
!=
ÇÇ* ,
null
ÇÇ- 1
)
ÇÇ1 2
{
ÉÉ 
ret
ÑÑ 
=
ÑÑ 
(
ÑÑ 
activity
ÑÑ '
.
ÑÑ' (
variable
ÑÑ( 0
==
ÑÑ1 3
	NombreVar
ÑÑ4 =
)
ÑÑ= >
;
ÑÑ> ?
}
ÖÖ 
break
ÜÜ 
;
ÜÜ 
case
áá 
$str
áá 
:
áá  
case
àà 
$str
àà 
:
àà 
case
ââ 
$str
ââ 
:
ââ 
case
ää 
$str
ää 
:
ää 
case
ãã 
$str
ãã #
:
ãã# $
ret
åå 
=
åå 
(
åå 
activity
åå #
.
åå# $
variable
åå$ ,
==
åå- /
	NombreVar
åå0 9
)
åå9 :
;
åå: ;
break
éé 
;
éé 
case
èè 
$str
èè %
:
èè% &
break
ëë 
;
ëë 
case
íí 
$str
íí 
:
íí 
ret
îî 
=
îî 
(
îî 
activity
îî #
.
îî# $
inputVariable
îî$ 1
==
îî2 4
	NombreVar
îî5 >
||
îî? A
activity
îîB J
.
îîJ K
outputVariable
îîK Y
==
îîZ \
	NombreVar
îî] f
)
îîf g
;
îîg h
break
ïï 
;
ïï 
case
ññ 
$str
ññ 
:
ññ 
break
òò 
;
òò 
case
ôô 
$str
ôô "
:
ôô" #
ret
öö 
=
öö 
(
öö 
activity
öö #
.
öö# $
indexVariable
öö$ 1
==
öö2 4
	NombreVar
öö5 >
)
öö> ?
;
öö? @
break
õõ 
;
õõ 
case
úú 
$str
úú 
:
úú 
case
ùù 
$str
ùù 
:
ùù 
ret
ûû 
=
ûû 
(
ûû 
activity
ûû #
.
ûû# $
faultVariable
ûû$ 1
==
ûû2 4
	NombreVar
ûû5 >
)
ûû> ?
;
ûû? @
break
üü 
;
üü 
case
†† 
$str
†† !
:
††! "
break
¢¢ 
;
¢¢ 
default
££ 
:
££ 
break
§§ 
;
§§ 
}
•• 
return
¶¶ 
ret
¶¶ 
;
¶¶ 
}
ßß 	
private
©© 
void
©© #
ActividadUsaVariable2
©© *
(
©©* +
GenericActivity
©©+ :
activity
©©; C
)
©©C D
{
™™ 	
if
´´ 
(
´´ 
keywords
´´ 
.
´´ 
Contains
´´ !
(
´´! "
activity
´´" *
.
´´* +
	innerName
´´+ 4
)
´´4 5
)
´´5 6
{
¨¨ 
foreach
≠≠ 
(
≠≠ 
TreeNode
≠≠ !
item
≠≠" &
in
≠≠' )

lVariables
≠≠* 4
)
≠≠4 5
{
ÆÆ 
foreach
ØØ 
(
ØØ 
TreeNode
ØØ %
item2
ØØ& +
in
ØØ, .
item
ØØ/ 3
.
ØØ3 4
Nodes
ØØ4 9
)
ØØ9 :
{
∞∞ 
string
±± 
	NombreVar
±± (
=
±±) *
item2
±±+ 0
.
±±0 1
Text
±±1 5
;
±±5 6
bool
≤≤ 
ret
≤≤  
=
≤≤! "
false
≤≤# (
;
≤≤( )
switch
≥≥ 
(
≥≥  
activity
≥≥  (
.
≥≥( )
	innerName
≥≥) 2
)
≥≥2 3
{
¥¥ 
case
µµ  
$str
µµ! '
:
µµ' (
case
∂∂  
$str
∂∂! -
:
∂∂- .
if
∑∑  "
(
∑∑# $
activity
∑∑$ ,
.
∑∑, -
variable
∑∑- 5
!=
∑∑6 8
null
∑∑9 =
)
∑∑= >
{
∏∏  !
ret
ππ$ '
=
ππ( )
(
ππ* +
activity
ππ+ 3
.
ππ3 4
variable
ππ4 <
==
ππ= ?
	NombreVar
ππ@ I
)
ππI J
;
ππJ K
}
∫∫  !
break
ªª  %
;
ªª% &
case
ºº  
$str
ºº! +
:
ºº+ ,
case
ΩΩ  
$str
ΩΩ! %
:
ΩΩ% &
case
ææ  
$str
ææ! *
:
ææ* +
case
øø  
$str
øø! (
:
øø( )
case
¿¿  
$str
¿¿! /
:
¿¿/ 0
ret
¡¡  #
=
¡¡$ %
(
¡¡& '
activity
¡¡' /
.
¡¡/ 0
variable
¡¡0 8
==
¡¡9 ;
	NombreVar
¡¡< E
)
¡¡E F
;
¡¡F G
break
√√  %
;
√√% &
case
ƒƒ  
$str
ƒƒ! 1
:
ƒƒ1 2
break
∆∆  %
;
∆∆% &
case
««  
$str
««! )
:
««) *
ret
……  #
=
……$ %
(
……& '
activity
……' /
.
……/ 0
inputVariable
……0 =
==
……> @
	NombreVar
……A J
||
……K M
activity
……N V
.
……V W
outputVariable
……W e
==
……f h
	NombreVar
……i r
)
……r s
;
……s t
break
    %
;
  % &
case
ÀÀ  
$str
ÀÀ! '
:
ÀÀ' (
break
ÕÕ  %
;
ÕÕ% &
case
ŒŒ  
$str
ŒŒ! .
:
ŒŒ. /
ret
œœ  #
=
œœ$ %
(
œœ& '
activity
œœ' /
.
œœ/ 0
indexVariable
œœ0 =
==
œœ> @
	NombreVar
œœA J
)
œœJ K
;
œœK L
break
––  %
;
––% &
case
——  
$str
——! (
:
——( )
case
““  
$str
““! (
:
““( )
ret
””  #
=
””$ %
(
””& '
activity
””' /
.
””/ 0
faultVariable
””0 =
==
””> @
	NombreVar
””A J
)
””J K
;
””K L
break
‘‘  %
;
‘‘% &
case
’’  
$str
’’! -
:
’’- .
break
◊◊  %
;
◊◊% &
default
ÿÿ #
:
ÿÿ# $
break
ŸŸ  %
;
ŸŸ% &
}
⁄⁄ 
if
€€ 
(
€€ 
ret
€€ 
)
€€  
{
‹‹ 
item2
›› !
.
››! "
Nodes
››" '
.
››' (
Add
››( +
(
››+ ,

NombreNodo
››, 6
(
››6 7
activity
››7 ?
)
››? @
)
››@ A
;
››A B
}
ﬁﬁ 
}
ﬂﬂ 
}
‡‡ 
}
·· 
}
‚‚ 	
string
‰‰ 

NombreNodo
‰‰ 
(
‰‰ 
GenericActivity
‰‰ )
nodo
‰‰* .
)
‰‰. /
{
ÂÂ 	
string
ÊÊ 
text
ÊÊ 
=
ÊÊ 
$str
ÊÊ 
;
ÊÊ 
switch
ËË 
(
ËË 
nodo
ËË 
.
ËË 
	innerName
ËË "
)
ËË" #
{
ÈÈ 
case
ÍÍ 
$str
ÍÍ !
:
ÍÍ! "
case
ÎÎ 
$str
ÎÎ 
:
ÎÎ 
text
ÏÏ 
=
ÏÏ 
string
ÏÏ !
.
ÏÏ! "
Format
ÏÏ" (
(
ÏÏ( )
$str
ÏÏ) 8
,
ÏÏ8 9
nodo
ÏÏ: >
.
ÏÏ> ?
	innerName
ÏÏ? H
,
ÏÏH I
nodo
ÏÏJ N
.
ÏÏN O
variable
ÏÏO W
,
ÏÏW X
nodo
ÏÏY ]
.
ÏÏ] ^

expression
ÏÏ^ h
)
ÏÏh i
;
ÏÏi j
break
ÌÌ 
;
ÌÌ 
case
ÓÓ 
$str
ÓÓ 
:
ÓÓ  
case
ÔÔ 
$str
ÔÔ 
:
ÔÔ 
text
 
=
 
string
 !
.
! "
Format
" (
(
( )
$str
) 4
,
4 5
nodo
6 :
.
: ;
	innerName
; D
,
D E
nodo
F J
.
J K
variable
K S
)
S T
;
T U
break
ÒÒ 
;
ÒÒ 
case
ÛÛ 
$str
ÛÛ 
:
ÛÛ 
text
ÙÙ 
=
ÙÙ 
string
ÙÙ !
.
ÙÙ! "
Format
ÙÙ" (
(
ÙÙ( )
$str
ÙÙ) 4
,
ÙÙ4 5
nodo
ÙÙ6 :
.
ÙÙ: ;
	innerName
ÙÙ; D
,
ÙÙD E
nodo
ÙÙF J
.
ÙÙJ K
	condition
ÙÙK T
)
ÙÙT U
;
ÙÙU V
break
ıı 
;
ıı 
case
˜˜ 
$str
˜˜ 
:
˜˜  
text
¯¯ 
=
¯¯ 
string
¯¯ !
.
¯¯! "
Format
¯¯" (
(
¯¯( )
$str
¯¯) .
,
¯¯. /
nodo
¯¯0 4
.
¯¯4 5
name
¯¯5 9
)
¯¯9 :
;
¯¯: ;
break
˘˘ 
;
˘˘ 
case
˙˙ 
$str
˙˙ %
:
˙˙% &
case
˚˚ 
$str
˚˚ #
:
˚˚# $
case
¸¸ 
$str
¸¸  
:
¸¸  !
case
˝˝ 
$str
˝˝ 
:
˝˝ 
case
˛˛ 
$str
˛˛ 
:
˛˛ 
case
ˇˇ 
$str
ˇˇ  
:
ˇˇ  !
case
ÄÄ 
$str
ÄÄ 
:
ÄÄ 
case
ÅÅ 
$str
ÅÅ 
:
ÅÅ 
case
ÇÇ 
$str
ÇÇ 
:
ÇÇ 
case
ÉÉ 
$str
ÉÉ "
:
ÉÉ" #
case
ÑÑ 
$str
ÑÑ 
:
ÑÑ 
case
ÖÖ 
$str
ÖÖ 
:
ÖÖ 
case
ÜÜ 
$str
ÜÜ 
:
ÜÜ 
case
áá 
$str
áá $
:
áá$ %
case
àà 
$str
àà 
:
àà 
case
ââ 
$str
ââ !
:
ââ! "
case
ää 
$str
ää #
:
ää# $
case
ãã 
$str
ãã #
:
ãã# $
case
åå 
$str
åå #
:
åå# $
case
çç 
$str
çç "
:
çç" #
case
éé 
$str
éé 
:
éé 
text
èè 
=
èè 
string
èè !
.
èè! "
Format
èè" (
(
èè( )
$str
èè) 4
,
èè4 5
nodo
èè6 :
.
èè: ;
	innerName
èè; D
,
èèD E
nodo
èèF J
.
èèJ K
name
èèK O
)
èèO P
;
èèP Q
break
êê 
;
êê 
case
ëë 
$str
ëë 
:
ëë 
case
íí 
$str
íí 
:
íí  
case
ìì 
$str
ìì 
:
ìì  
text
îî 
=
îî 
string
îî !
.
îî! "
Format
îî" (
(
îî( )
$str
îî) 0
,
îî0 1
nodo
îî2 6
.
îî6 7
	innerName
îî7 @
)
îî@ A
;
îîA B
break
ïï 
;
ïï 
default
ññ 
:
ññ 
text
óó 
=
óó 
string
óó !
.
óó! "
Format
óó" (
(
óó( )
$str
óó) 0
,
óó0 1
nodo
óó2 6
.
óó6 7
	innerName
óó7 @
)
óó@ A
;
óóA B
break
òò 
;
òò 
}
ôô 
return
öö 
text
öö 
;
öö 
}
õõ 	
private
ùù 
void
ùù 

Form1_Load
ùù 
(
ùù  
object
ùù  &
sender
ùù' -
,
ùù- .
	EventArgs
ùù/ 8
e
ùù9 :
)
ùù: ;
{
ûû 	
tbFolder
üü 
.
üü 
Text
üü 
=
üü "
ConfigurationManager
üü 0
.
üü0 1
AppSettings
üü1 <
[
üü< =
$str
üü= I
]
üüI J
;
üüJ K
}
†† 	
}
¢¢ 
}££ ±Ò
AC:\Rodrigo\source\repos\Proyectos DTV\revisaProyectosSCA\Form3.cs
	namespace 	
revisaProyectosSCA
 
{ 
public 

partial 
class 
Form3 
:  
Form! %
{ 
List 
< 
string 
> 
keywords 
= 
new  #
List$ (
<( )
string) /
>/ 0
{1 2
$str3 9
,9 :
$str; G
,G H
$strI S
,S T
$strU Y
,Y Z
$str[ d
,d e
$strf m
,m n
$stro }
,} ~
$str	 è
,
è ê
$str
ë ô
,
ô ö
$str
õ °
,
° ¢
$str
£ ∞
,
∞ ±
$str
≤ π
,
π ∫
$str
ª ¬
,
¬ √
$str
ƒ –
,
– —
$str
“ ÿ
,
ÿ Ÿ
$str
⁄ ‡
}
· ‚
;
‚ „
string 
operation_name 
; 
string 
service_name 
; 
string 
my_port_type 
; 
string 
nombre_archC 
= 
$str  
;  !
long 
operation_id 
; 
StreamWriter 
arch 
; 
StreamReader 
archFolders  
;  !
StreamWriter 
archC 
; 
MySqlConnection 
conn 
; 
List 
< 
String 
> 
bpels 
; 
List   
<   
JCA   
>   
lJca   
;   
List!! 
<!! 
JCA!! 
>!! 
lRefJca!! 
;!! 
enumEjecutar## 
ejecutar## 
;## 
enum%% 
enumEjecutar%% 
{&& 	
No'' 
,'' 
Parte1(( 
,(( 
Parte2)) 
,)) 
Parte3** 
}++ 	
public.. 
Form3.. 
(.. 
).. 
{// 	
InitializeComponent00 
(00  
)00  !
;00! "
ejecutar22 
=22 
enumEjecutar22 #
.22# $
No22$ &
;22& '
}33 	
public44 
Form344 
(44 
string44 
	Parametro44 %
)44% &
{55 	
InitializeComponent66 
(66  
)66  !
;66! "
switch88 
(88 
	Parametro88 
)88 
{99 
case:: 
$str:: 
::: 
ejecutar;; 
=;; 
enumEjecutar;; +
.;;+ ,
Parte1;;, 2
;;;2 3
break<< 
;<< 
case== 
$str== 
:== 
ejecutar>> 
=>> 
enumEjecutar>> +
.>>+ ,
Parte2>>, 2
;>>2 3
break?? 
;?? 
case@@ 
$str@@ 
:@@ 
ejecutarAA 
=AA 
enumEjecutarAA +
.AA+ ,
Parte3AA, 2
;AA2 3
breakBB 
;BB 
defaultCC 
:CC 
ejecutarDD 
=DD 
enumEjecutarDD +
.DD+ ,
NoDD, .
;DD. /
breakEE 
;EE 
}FF 
}HH 	
privateJJ 
voidJJ 

Form3_LoadJJ 
(JJ  
objectJJ  &
senderJJ' -
,JJ- .
	EventArgsJJ/ 8
eJJ9 :
)JJ: ;
{KK 	
varLL 
mysqldbLL 
=LL  
ConfigurationManagerLL .
.LL. /
AppSettingsLL/ :
[LL: ;
$strLL; E
]LLE F
;LLF G
connMM 
=MM 
newMM 
MySqlConnectionMM &
(MM& '
mysqldbMM' .
)MM. /
;MM/ 0
connNN 
.NN 
OpenNN 
(NN 
)NN 
;NN 
}PP 	
privateRR 
voidRR 
Form3_FormClosingRR &
(RR& '
objectRR' -
senderRR. 4
,RR4 5 
FormClosingEventArgsRR6 J
eRRK L
)RRL M
{SS 	
connTT 
.TT 
CloseTT 
(TT 
)TT 
;TT 
}UU 	
privateWW 
voidWW 
Form3_ActivatedWW $
(WW$ %
objectWW% +
senderWW, 2
,WW2 3
	EventArgsWW4 =
eWW> ?
)WW? @
{XX 	
ifYY 
(YY 
ejecutarYY 
==YY 
enumEjecutarYY (
.YY( )
Parte1YY) /
)YY/ 0
{ZZ 
button1_Click[[ 
([[ 
null[[ "
,[[" #
new[[$ '
	EventArgs[[( 1
([[1 2
)[[2 3
)[[3 4
;[[4 5
}\\ 
if]] 
(]] 
ejecutar]] 
==]] 
enumEjecutar]] (
.]]( )
Parte2]]) /
)]]/ 0
{^^ 
button3_Click__ 
(__ 
null__ "
,__" #
new__$ '
	EventArgs__( 1
(__1 2
)__2 3
)__3 4
;__4 5
}`` 
ifaa 
(aa 
ejecutaraa 
==aa 
enumEjecutaraa (
.aa( )
Parte3aa) /
)aa/ 0
{bb 
bGeneraGV_Clickcc 
(cc  
nullcc  $
,cc$ %
newcc& )
	EventArgscc* 3
(cc3 4
)cc4 5
)cc5 6
;cc6 7
}dd 
}ee 	
privateii 
voidii 
button1_Clickii "
(ii" #
objectii# )
senderii* 0
,ii0 1
	EventArgsii2 ;
eii< =
)ii= >
{jj 	
archFolderskk 
=kk 
newkk 
StreamReaderkk *
(kk* + 
ConfigurationManagerkk+ ?
.kk? @
AppSettingskk@ K
[kkK L
$strkkL \
]kk\ ]
)kk] ^
;kk^ _
varmm 
nombre_archmm 
=mm 
stringmm $
.mm$ %
Formatmm% +
(mm+ ,
$strmm, >
,mm> ?
DateTimemm@ H
.mmH I
NowmmI L
.mmL M
ToStringmmM U
(mmU V
$strmmV k
)mmk l
)mml m
;mmm n
archnn 
=nn 
newnn 
StreamWriternn #
(nn# $ 
ConfigurationManagernn$ 8
.nn8 9
AppSettingsnn9 D
[nnD E
$strnnE K
]nnK L
+nnM N
nombre_archnnO Z
,nnZ [
falsenn\ a
)nna b
;nnb c
nombre_archCpp 
=pp 
stringpp !
.pp! "
Formatpp" (
(pp( )
$strpp) E
,ppE F
DateTimeppG O
.ppO P
NowppP S
.ppS T
ToStringppT \
(pp\ ]
$strpp] r
)ppr s
)pps t
;ppt u
borraTodoBDrr 
(rr 
)rr 
;rr 
trytt 
{uu 
whilevv 
(vv 
archFoldersvv "
.vv" #
Peekvv# '
(vv' (
)vv( )
>=vv* ,
$numvv- .
)vv. /
{ww 
service_namexx  
=xx! "
$strxx# %
;xx% &
varzz 
lineazz 
=zz 
archFolderszz  +
.zz+ ,
ReadLinezz, 4
(zz4 5
)zz5 6
.zz6 7
Trimzz7 ;
(zz; <
)zz< =
;zz= >
if|| 
(|| 
linea|| 
.|| 

StartsWith|| (
(||( )
$str||) ,
)||, -
||||. 0
linea||1 6
.||6 7
Equals||7 =
(||= >
$str||> @
)||@ A
)||A B
{}} 
} 
else
ÄÄ 
{
ÅÅ 
bpels
ÇÇ 
=
ÇÇ 
new
ÇÇ  #
List
ÇÇ$ (
<
ÇÇ( )
string
ÇÇ) /
>
ÇÇ/ 0
(
ÇÇ0 1
)
ÇÇ1 2
;
ÇÇ2 3
arch
ÑÑ 
.
ÑÑ 
	WriteLine
ÑÑ &
(
ÑÑ& '
$str
ÑÑ' Q
)
ÑÑQ R
;
ÑÑR S
var
àà 
	port_type
àà %
=
àà& '
$str
àà( *
;
àà* +
lJca
ââ 
=
ââ 
new
ââ "
List
ââ# '
<
ââ' (
JCA
ââ( +
>
ââ+ ,
(
ââ, -
)
ââ- .
;
ââ. /
lRefJca
ää 
=
ää  !
new
ää" %
List
ää& *
<
ää* +
JCA
ää+ .
>
ää. /
(
ää/ 0
)
ää0 1
;
ää1 2
try
ãã 
{
åå 
service_name
çç (
=
çç) *
parseComposite
çç+ 9
(
çç9 :
linea
çç: ?
+
çç@ A
$str
ççB S
,
ççS T
linea
ççU Z
,
ççZ [
out
çç\ _
	port_type
çç` i
)
ççi j
;
ççj k
if
éé 
(
éé  
service_name
éé  ,
!=
éé- /
$str
éé0 2
)
éé2 3
{
èè 
grabarService
êê  -
(
êê- .
service_name
êê. :
,
êê: ;
	port_type
êê< E
,
êêE F
linea
êêG L
)
êêL M
;
êêM N
foreach
ìì  '
(
ìì( )
var
ìì) ,
bpel
ìì- 1
in
ìì2 4
bpels
ìì5 :
)
ìì: ;
{
îî  !
	parseBpel
ïï$ -
(
ïï- .
linea
ïï. 3
+
ïï4 5
$str
ïï6 :
+
ïï; <
bpel
ïï= A
,
ïïA B
linea
ïïC H
)
ïïH I
;
ïïI J
}
ññ  !
}
óó 
}
òò 
catch
ôô 
(
ôô 
	Exception
ôô (
ex
ôô) +
)
ôô+ ,
{
öö 
arch
õõ  
.
õõ  !
	WriteLine
õõ! *
(
õõ* +
$str
õõ+ 8
,
õõ8 9
linea
õõ: ?
,
õõ? @
ex
õõA C
.
õõC D
Message
õõD K
)
õõK L
;
õõL M
}
úú 
}
ùù 
}
ûû 
}
üü 
catch
†† 
(
†† 
	Exception
†† 
ex
†† 
)
††  
{
°° 
throw
¢¢ 
;
¢¢ 
}
££ 
arch
§§ 
.
§§ 
Close
§§ 
(
§§ 
)
§§ 
;
§§ 
archFolders
•• 
.
•• 
Close
•• 
(
•• 
)
•• 
;
••  
if
ßß 
(
ßß 
ejecutar
ßß 
!=
ßß 
enumEjecutar
ßß (
.
ßß( )
No
ßß) +
)
ßß+ ,
{
®® 
this
©© 
.
©© 
Close
©© 
(
©© 
)
©© 
;
©© 
}
™™ 
else
´´ 
{
¨¨ 

MessageBox
≠≠ 
.
≠≠ 
Show
≠≠ 
(
≠≠  
$str
≠≠  ,
)
≠≠, -
;
≠≠- .
}
ÆÆ 
}
ØØ 	
private
±± 
void
±± 
lineaArchivoC
±± "
(
±±" #
string
±±# )
linea
±±* /
)
±±/ 0
{
≤≤ 	
archC
≥≥ 
=
≥≥ 
new
≥≥ 
StreamWriter
≥≥ $
(
≥≥$ %"
ConfigurationManager
≥≥% 9
.
≥≥9 :
AppSettings
≥≥: E
[
≥≥E F
$str
≥≥F L
]
≥≥L M
+
≥≥N O
nombre_archC
≥≥P \
,
≥≥\ ]
true
≥≥^ b
)
≥≥b c
;
≥≥c d
archC
¥¥ 
.
¥¥ 
	WriteLine
¥¥ 
(
¥¥ 
linea
¥¥ !
)
¥¥! "
;
¥¥" #
archC
µµ 
.
µµ 
Close
µµ 
(
µµ 
)
µµ 
;
µµ 
}
∂∂ 	
private
ππ 
string
ππ 
parseComposite
ππ %
(
ππ% &
String
ππ& ,
	file_name
ππ- 6
,
ππ6 7
string
ππ8 >
folder_name
ππ? J
,
ππJ K
out
ππL O
string
ππP V
	port_type
ππW `
)
ππ` a
{
∫∫ 	
var
ªª 
res
ªª 
=
ªª 
$str
ªª 
;
ªª 
	port_type
ºº 
=
ºº 
$str
ºº 
;
ºº 
Console
ΩΩ 
.
ΩΩ 
	WriteLine
ΩΩ 
(
ΩΩ 
	file_name
ΩΩ '
)
ΩΩ' (
;
ΩΩ( )
XmlDocument
øø 
doc
øø 
=
øø 
new
øø !
XmlDocument
øø" -
(
øø- .
)
øø. /
;
øø/ 0
doc
¿¿ 
.
¿¿ 
Load
¿¿ 
(
¿¿ 
	file_name
¿¿ 
)
¿¿ 
;
¿¿  
XmlNodeList
¬¬ 
	bdProcess
¬¬ !
=
¬¬" #
doc
¬¬$ '
.
¬¬' ("
GetElementsByTagName
¬¬( <
(
¬¬< =
$str
¬¬= H
)
¬¬H I
;
¬¬I J
foreach
√√ 
(
√√ 
XmlNode
√√ 
nodeP
√√ "
in
√√# %
	bdProcess
√√& /
)
√√/ 0
{
ƒƒ 

XmlElement
≈≈ 
subsElement
≈≈ &
=
≈≈' (
(
≈≈) *

XmlElement
≈≈* 4
)
≈≈4 5
nodeP
≈≈5 :
;
≈≈: ;
XmlNodeList
∆∆ 
stepsSE
∆∆ #
=
∆∆$ %
subsElement
∆∆& 1
.
∆∆1 2

ChildNodes
∆∆2 <
;
∆∆< =
foreach
»» 
(
»» 
XmlNode
»»  
nodeStep
»»! )
in
»»* ,
stepsSE
»»- 4
)
»»4 5
{
…… 
switch
   
(
   
nodeStep
   $
.
  $ %
Name
  % )
)
  ) *
{
ÀÀ 
case
ÃÃ 
$str
ÃÃ &
:
ÃÃ& '
if
ÕÕ 
(
ÕÕ  
res
ÕÕ  #
.
ÕÕ# $
Equals
ÕÕ$ *
(
ÕÕ* +
$str
ÕÕ+ -
)
ÕÕ- .
)
ÕÕ. /
{
ŒŒ 
res
œœ  #
=
œœ$ %
nodeStep
œœ& .
.
œœ. /

Attributes
œœ/ 9
[
œœ9 :
$str
œœ: @
]
œœ@ A
.
œœA B
	InnerText
œœB K
;
œœK L
var
––  #
wsdl
––$ (
=
––) *
$str
––+ -
;
––- .
try
——  #
{
““  !
wsdl
””$ (
=
””) *
nodeStep
””+ 3
.
””3 4

Attributes
””4 >
[
””> ?
$str
””? P
]
””P Q
.
””Q R
	InnerText
””R [
;
””[ \
}
‘‘  !
catch
’’  %
(
’’& '
	Exception
’’' 0
ex
’’1 3
)
’’3 4
{
÷÷  !
}
◊◊  !
foreach
ŸŸ  '
(
ŸŸ( )
XmlNode
ŸŸ) 0
nodoHijo
ŸŸ1 9
in
ŸŸ: <
nodeStep
ŸŸ= E
.
ŸŸE F

ChildNodes
ŸŸF P
)
ŸŸP Q
{
⁄⁄  !
if
€€$ &
(
€€' (
nodoHijo
€€( 0
.
€€0 1
Name
€€1 5
==
€€6 8
$str
€€9 I
)
€€I J
{
‹‹$ %
var
››( +

_interface
››, 6
=
››7 8
nodoHijo
››9 A
.
››A B

Attributes
››B L
[
››L M
$str
››M X
]
››X Y
.
››Y Z
	InnerText
››Z c
;
››c d
	port_type
ﬁﬁ( 1
=
ﬁﬁ2 3

_interface
ﬁﬁ4 >
.
ﬁﬁ> ?
	Substring
ﬁﬁ? H
(
ﬁﬁH I

_interface
ﬁﬁI S
.
ﬁﬁS T
IndexOf
ﬁﬁT [
(
ﬁﬁ[ \
$char
ﬁﬁ\ _
)
ﬁﬁ_ `
+
ﬁﬁa b
$num
ﬁﬁc d
,
ﬁﬁd e

_interface
ﬁﬁf p
.
ﬁﬁp q
IndexOf
ﬁﬁq x
(
ﬁﬁx y
$char
ﬁﬁy |
)
ﬁﬁ| }
-
ﬁﬁ~ 

_interfaceﬁﬁÄ ä
.ﬁﬁä ã
IndexOfﬁﬁã í
(ﬁﬁí ì
$charﬁﬁì ñ
)ﬁﬁñ ó
-ﬁﬁò ô
$numﬁﬁö õ
)ﬁﬁõ ú
;ﬁﬁú ù
lineaArchivoC
ﬂﬂ( 5
(
ﬂﬂ5 6
string
ﬂﬂ6 <
.
ﬂﬂ< =
Format
ﬂﬂ= C
(
ﬂﬂC D
$str
ﬂﬂD X
,
ﬂﬂX Y
	file_name
ﬂﬂZ c
,
ﬂﬂc d
res
ﬂﬂe h
,
ﬂﬂh i
wsdl
ﬂﬂj n
,
ﬂﬂn o

_interface
ﬂﬂp z
)
ﬂﬂz {
)
ﬂﬂ{ |
;
ﬂﬂ| }
}
‡‡$ %
}
··  !
}
„„ 
var
ÂÂ 
oJca
ÂÂ  $
=
ÂÂ% &
new
ÂÂ' *
JCA
ÂÂ+ .
(
ÂÂ. /
)
ÂÂ/ 0
{
ÂÂ1 2
name
ÂÂ3 7
=
ÂÂ8 9
nodeStep
ÂÂ: B
.
ÂÂB C

Attributes
ÂÂC M
[
ÂÂM N
$str
ÂÂN T
]
ÂÂT U
.
ÂÂU V
	InnerText
ÂÂV _
,
ÂÂ_ `
wsdlLocation
ÂÂa m
=
ÂÂn o
(
ÂÂp q
nodeStep
ÂÂq y
.
ÂÂy z

AttributesÂÂz Ñ
[ÂÂÑ Ö
$strÂÂÖ ñ
]ÂÂñ ó
==ÂÂò ö
nullÂÂõ ü
?ÂÂ† °
$strÂÂ¢ §
:ÂÂ• ¶
nodeStepÂÂß Ø
.ÂÂØ ∞

AttributesÂÂ∞ ∫
[ÂÂ∫ ª
$strÂÂª Ã
]ÂÂÃ Õ
.ÂÂÕ Œ
	InnerTextÂÂŒ ◊
)ÂÂ◊ ÿ
,ÂÂÿ Ÿ
configÂÂ⁄ ‡
=ÂÂ· ‚
$strÂÂ„ Â
}ÂÂÊ Á
;ÂÂÁ Ë
foreach
ÊÊ #
(
ÊÊ$ %
XmlNode
ÊÊ% ,
nodoHijo
ÊÊ- 5
in
ÊÊ6 8
nodeStep
ÊÊ9 A
.
ÊÊA B

ChildNodes
ÊÊB L
)
ÊÊL M
{
ÁÁ 
if
ËË  "
(
ËË# $
nodoHijo
ËË$ ,
.
ËË, -
Name
ËË- 1
==
ËË2 4
$str
ËË5 B
)
ËËB C
{
ÈÈ  !
oJca
ÍÍ$ (
.
ÍÍ( )
config
ÍÍ) /
=
ÍÍ0 1
nodoHijo
ÍÍ2 :
.
ÍÍ: ;

Attributes
ÍÍ; E
[
ÍÍE F
$str
ÍÍF N
]
ÍÍN O
.
ÍÍO P
Value
ÍÍP U
;
ÍÍU V
if
ÏÏ$ &
(
ÏÏ' (
oJca
ÏÏ( ,
.
ÏÏ, -
config
ÏÏ- 3
!=
ÏÏ4 6
$str
ÏÏ7 9
)
ÏÏ9 :
{
ÌÌ$ %
XmlDocument
ÓÓ( 3
docJca
ÓÓ4 :
=
ÓÓ; <
new
ÓÓ= @
XmlDocument
ÓÓA L
(
ÓÓL M
)
ÓÓM N
;
ÓÓN O
docJca
ÔÔ( .
.
ÔÔ. /
Load
ÔÔ/ 3
(
ÔÔ3 4
folder_name
ÔÔ4 ?
+
ÔÔ@ A
$str
ÔÔB F
+
ÔÔG H
oJca
ÔÔI M
.
ÔÔM N
config
ÔÔN T
)
ÔÔT U
;
ÔÔU V
XmlNodeList
( 3
bdJca
4 9
=
: ;
docJca
< B
.
B C"
GetElementsByTagName
C W
(
W X
$str
X h
)
h i
;
i j
foreach
ÒÒ( /
(
ÒÒ0 1
XmlNode
ÒÒ1 8
nodeAC
ÒÒ9 ?
in
ÒÒ@ B
bdJca
ÒÒC H
)
ÒÒH I
{
ÚÚ( )

XmlElement
ÛÛ, 6
subsElementAC
ÛÛ7 D
=
ÛÛE F
(
ÛÛG H

XmlElement
ÛÛH R
)
ÛÛR S
nodeAC
ÛÛS Y
;
ÛÛY Z
XmlNodeList
ÙÙ, 7
stepsAC
ÙÙ8 ?
=
ÙÙ@ A
subsElementAC
ÙÙB O
.
ÙÙO P

ChildNodes
ÙÙP Z
;
ÙÙZ [
foreach
ˆˆ, 3
(
ˆˆ4 5
XmlNode
ˆˆ5 <

nodeStepAC
ˆˆ= G
in
ˆˆH J
stepsAC
ˆˆK R
)
ˆˆR S
{
˜˜, -
if
¯¯0 2
(
¯¯3 4

nodeStepAC
¯¯4 >
.
¯¯> ?
Name
¯¯? C
==
¯¯D F
$str
¯¯G [
&&
¯¯\ ^

nodeStepAC
¯¯_ i
.
¯¯i j

Attributes
¯¯j t
[
¯¯t u
$str
¯¯u 
]¯¯ Ä
!=¯¯Å É
null¯¯Ñ à
)¯¯à â
{
˘˘0 1
oJca
˙˙4 8
.
˙˙8 9

cdLocation
˙˙9 C
=
˙˙D E

nodeStepAC
˙˙F P
.
˙˙P Q

Attributes
˙˙Q [
[
˙˙[ \
$str
˙˙\ f
]
˙˙f g
.
˙˙g h
Value
˙˙h m
;
˙˙m n
}
˚˚0 1
if
¸¸0 2
(
¸¸3 4

nodeStepAC
¸¸4 >
.
¸¸> ?
Name
¸¸? C
==
¸¸D F
$str
¸¸G \
)
¸¸\ ]
{
˝˝0 1

XmlElement
ˇˇ4 >
subsProp
ˇˇ? G
=
ˇˇH I
(
ˇˇJ K

XmlElement
ˇˇK U
)
ˇˇU V

nodeStepAC
ˇˇV `
;
ˇˇ` a
foreach
ÅÅ4 ;
(
ÅÅ< =
XmlNode
ÅÅ= D
nodeProp
ÅÅE M
in
ÅÅN P
subsProp
ÅÅQ Y
.
ÅÅY Z

ChildNodes
ÅÅZ d
[
ÅÅd e
$num
ÅÅe f
]
ÅÅf g
.
ÅÅg h

ChildNodes
ÅÅh r
)
ÅÅr s
{
ÇÇ4 5
if
ÉÉ8 :
(
ÉÉ; <
nodeProp
ÉÉ< D
.
ÉÉD E

Attributes
ÉÉE O
[
ÉÉO P
$str
ÉÉP V
]
ÉÉV W
!=
ÉÉX Z
null
ÉÉ[ _
)
ÉÉ_ `
{
ÑÑ8 9
if
ÖÖ< >
(
ÖÖ? @
nodeProp
ÖÖ@ H
.
ÖÖH I

Attributes
ÖÖI S
[
ÖÖS T
$str
ÖÖT Z
]
ÖÖZ [
.
ÖÖ[ \
Value
ÖÖ\ a
==
ÖÖb d
$str
ÖÖe v
||
ÖÖw y
nodePropÖÖz Ç
.ÖÖÇ É

AttributesÖÖÉ ç
[ÖÖç é
$strÖÖé î
]ÖÖî ï
.ÖÖï ñ
ValueÖÖñ õ
==ÖÖú û
$strÖÖü Ø
)ÖÖØ ∞
{
ÜÜ< =
oJca
áá@ D
.
ááD E
DestinationName
ááE T
=
ááU V
nodeProp
ááW _
.
áá_ `

Attributes
áá` j
[
ááj k
$str
áák r
]
áár s
!=
áát v
null
ááw {
?
áá| }
nodePropáá~ Ü
.ááÜ á

Attributesááá ë
[ááë í
$strááí ô
]ááô ö
.ááö õ
Valueááõ †
:áá° ¢
$stráá£ •
;áá• ¶
}
àà< =
if
ââ< >
(
ââ? @
nodeProp
ââ@ H
.
ââH I

Attributes
ââI S
[
ââS T
$str
ââT Z
]
ââZ [
.
ââ[ \
Value
ââ\ a
==
ââb d
$str
ââe v
)
ââv w
{
ää< =
oJca
ãã@ D
.
ããD E
MessageSelector
ããE T
=
ããU V
nodeProp
ããW _
.
ãã_ `

Attributes
ãã` j
[
ããj k
$str
ããk r
]
ããr s
!=
ããt v
null
ããw {
?
ãã| }
nodePropãã~ Ü
.ããÜ á

Attributesããá ë
[ããë í
$strããí ô
]ããô ö
.ããö õ
Valueããõ †
:ãã° ¢
$strãã£ •
;ãã• ¶
}
åå< =
}
çç8 9
}
éé4 5
}
èè0 1
}
êê, -
}
ëë( )
}
ìì$ %
}
îî  !
}
ïï 
if
ññ 
(
ññ  
oJca
ññ  $
.
ññ$ %
config
ññ% +
!=
ññ, .
$str
ññ/ 1
)
ññ1 2
{
óó 
lJca
òò  $
.
òò$ %
Add
òò% (
(
òò( )
oJca
òò) -
)
òò- .
;
òò. /
}
ôô 
break
öö !
;
öö! "
case
úú 
$str
úú (
:
úú( )
if
ùù 
(
ùù  
nodeStep
ùù  (
.
ùù( )
HasChildNodes
ùù) 6
)
ùù6 7
{
ûû 
foreach
üü  '
(
üü( )
XmlNode
üü) 0
nodoHijo
üü1 9
in
üü: <
nodeStep
üü= E
.
üüE F

ChildNodes
üüF P
)
üüP Q
{
††  !
switch
°°$ *
(
°°+ ,
nodoHijo
°°, 4
.
°°4 5
Name
°°5 9
)
°°9 :
{
¢¢$ %
case
££( ,
$str
££- B
:
££B C
var
§§, /
a
§§0 1
=
§§2 3
nodoHijo
§§4 <
.
§§< =

Attributes
§§= G
[
§§G H
$str
§§H M
]
§§M N
.
§§N O
	InnerText
§§O X
;
§§X Y
bpels
••, 1
.
••1 2
Add
••2 5
(
••5 6
a
••6 7
)
••7 8
;
••8 9
arch
¶¶, 0
.
¶¶0 1
	WriteLine
¶¶1 :
(
¶¶: ;
$str
¶¶; J
,
¶¶J K
	file_name
¶¶L U
,
¶¶U V
service_name
¶¶W c
,
¶¶c d
a
¶¶e f
)
¶¶f g
;
¶¶g h
break
®®, 1
;
®®1 2
case
™™( ,
$str
™™- >
:
™™> ?
var
´´, /
fio
´´0 3
=
´´4 5
new
´´6 9
System
´´: @
.
´´@ A
IO
´´A C
.
´´C D
DirectoryInfo
´´D Q
(
´´Q R
folder_name
´´R ]
)
´´] ^
;
´´^ _
res
¨¨, /
=
¨¨0 1
fio
¨¨2 5
.
¨¨5 6
Name
¨¨6 :
.
¨¨: ;
Replace
¨¨; B
(
¨¨B C
$str
¨¨C H
,
¨¨H I
$str
¨¨J L
)
¨¨L M
;
¨¨M N
foreach
ÆÆ, 3
(
ÆÆ4 5
XmlNode
ÆÆ5 <
nodoBE
ÆÆ= C
in
ÆÆD F
nodoHijo
ÆÆG O
.
ÆÆO P

ChildNodes
ÆÆP Z
)
ÆÆZ [
{
ØØ, -
switch
∞∞0 6
(
∞∞7 8
nodoBE
∞∞8 >
.
∞∞> ?
Name
∞∞? C
)
∞∞C D
{
±±0 1
case
≤≤4 8
$str
≤≤9 D
:
≤≤D E
	port_type
≥≥8 A
=
≥≥B C
nodoBE
≥≥D J
.
≥≥J K

Attributes
≥≥K U
[
≥≥U V
$str
≥≥V \
]
≥≥\ ]
.
≥≥] ^
	InnerText
≥≥^ g
;
≥≥g h
	port_type
¥¥8 A
=
¥¥B C
res
¥¥D G
+
¥¥H I
$str
¥¥J M
+
¥¥N O
(
¥¥P Q
	port_type
¥¥Q Z
.
¥¥Z [
Contains
¥¥[ c
(
¥¥c d
$str
¥¥d g
)
¥¥g h
?
¥¥i j
	port_type
¥¥k t
.
¥¥t u
Remove
¥¥u {
(
¥¥{ |
$num
¥¥| }
,
¥¥} ~
	port_type¥¥ à
.¥¥à â
IndexOf¥¥â ê
(¥¥ê ë
$str¥¥ë î
)¥¥î ï
+¥¥ñ ó
$num¥¥ò ô
)¥¥ô ö
:¥¥õ ú
	port_type¥¥ù ¶
)¥¥¶ ß
;¥¥ß ®
break
µµ8 =
;
µµ= >
default
∂∂4 ;
:
∂∂; <
break
∑∑8 =
;
∑∑= >
}
∏∏0 1
}
ππ, -
break
∫∫, 1
;
∫∫1 2
default
ªª( /
:
ªª/ 0
break
ºº, 1
;
ºº1 2
}
ΩΩ$ %
}
ææ  !
}
øø 
break
¡¡ !
;
¡¡! "
case
√√ 
$str
√√ (
:
√√( )
var
ƒƒ 
wsdlRef
ƒƒ  '
=
ƒƒ( )
nodeStep
ƒƒ* 2
.
ƒƒ2 3

Attributes
ƒƒ3 =
[
ƒƒ= >
$str
ƒƒ> O
]
ƒƒO P
==
ƒƒQ S
null
ƒƒT X
?
ƒƒY Z
$str
ƒƒ[ ]
:
ƒƒ^ _
nodeStep
ƒƒ` h
.
ƒƒh i

Attributes
ƒƒi s
[
ƒƒs t
$strƒƒt Ö
]ƒƒÖ Ü
.ƒƒÜ á
	InnerTextƒƒá ê
;ƒƒê ë
if
≈≈ 
(
≈≈  
wsdlRef
≈≈  '
!=
≈≈( *
$str
≈≈+ -
)
≈≈- .
{
∆∆ 
var
»»  #
oJcaRef
»»$ +
=
»», -
new
»». 1
JCA
»»2 5
(
»»5 6
)
»»6 7
{
»»8 9
name
»»: >
=
»»? @
nodeStep
»»A I
.
»»I J

Attributes
»»J T
[
»»T U
$str
»»U [
]
»»[ \
.
»»\ ]
	InnerText
»»] f
,
»»f g
wsdlLocation
»»h t
=
»»u v
wsdlRef
»»w ~
,
»»~ 
config»»Ä Ü
=»»á à
$str»»â ã
}»»å ç
;»»ç é
foreach
……  '
(
……( )
XmlNode
……) 0
nodoHijo
……1 9
in
……: <
nodeStep
……= E
.
……E F

ChildNodes
……F P
)
……P Q
{
    !
if
ÀÀ$ &
(
ÀÀ' (
nodoHijo
ÀÀ( 0
.
ÀÀ0 1
Name
ÀÀ1 5
==
ÀÀ6 8
$str
ÀÀ9 F
)
ÀÀF G
{
ÃÃ$ %
oJcaRef
ÕÕ( /
.
ÕÕ/ 0
config
ÕÕ0 6
=
ÕÕ7 8
nodoHijo
ÕÕ9 A
.
ÕÕA B

Attributes
ÕÕB L
[
ÕÕL M
$str
ÕÕM U
]
ÕÕU V
.
ÕÕV W
Value
ÕÕW \
;
ÕÕ\ ]
}
ŒŒ$ %
}
œœ  !
if
––  "
(
––# $
oJcaRef
––$ +
.
––+ ,
config
––, 2
!=
––3 5
$str
––6 8
)
––8 9
{
——  !
lRefJca
““$ +
.
““+ ,
Add
““, /
(
““/ 0
oJcaRef
““0 7
)
““7 8
;
““8 9
}
””  !
}
’’ 
break
◊◊ !
;
◊◊! "
default
ŸŸ 
:
ŸŸ  
break
⁄⁄ !
;
⁄⁄! "
}
€€ 
}
‹‹ 
}
›› 
return
ﬂﬂ 
res
ﬂﬂ 
;
ﬂﬂ 
}
‡‡ 	
bool
‚‚ 
onMessageLeido
‚‚ 
;
‚‚ 
bool
„„ 
	pickLeido
„„ 
;
„„ 
private
‰‰ 
void
‰‰ 
	parseBpel
‰‰ 
(
‰‰ 
String
‰‰ %
	file_name
‰‰& /
,
‰‰/ 0
string
‰‰1 7

folderName
‰‰8 B
)
‰‰B C
{
ÂÂ 	
if
ÊÊ 
(
ÊÊ 
System
ÊÊ 
.
ÊÊ 
IO
ÊÊ 
.
ÊÊ 
File
ÊÊ 
.
ÊÊ 
Exists
ÊÊ %
(
ÊÊ% &
	file_name
ÊÊ& /
)
ÊÊ/ 0
)
ÊÊ0 1
{
ÁÁ 
var
ËË 
fio
ËË 
=
ËË 
new
ËË 
System
ËË $
.
ËË$ %
IO
ËË% '
.
ËË' (
FileInfo
ËË( 0
(
ËË0 1
	file_name
ËË1 :
)
ËË: ;
;
ËË; <
operation_name
ÏÏ 
=
ÏÏ  
$str
ÏÏ! #
;
ÏÏ# $
my_port_type
ÌÌ 
=
ÌÌ 
$str
ÌÌ !
;
ÌÌ! "
onMessageLeido
ÓÓ 
=
ÓÓ  
false
ÓÓ! &
;
ÓÓ& '
operation_id
ÔÔ 
=
ÔÔ 
$num
ÔÔ  
;
ÔÔ  !
	pickLeido
 
=
 
false
 !
;
! "
XmlDocument
ÚÚ 
doc
ÚÚ 
=
ÚÚ  !
new
ÚÚ" %
XmlDocument
ÚÚ& 1
(
ÚÚ1 2
)
ÚÚ2 3
;
ÚÚ3 4
try
ÛÛ 
{
ÙÙ 
doc
ıı 
.
ıı 
Load
ıı 
(
ıı 
	file_name
ıı &
)
ıı& '
;
ıı' (
}
ˆˆ 
catch
˜˜ 
(
˜˜ 
	Exception
˜˜  
ex
˜˜! #
)
˜˜# $
{
¯¯ 
arch
˘˘ 
.
˘˘ 
	WriteLine
˘˘ "
(
˘˘" #
$str
˘˘# F
,
˘˘F G
	file_name
˘˘H Q
)
˘˘Q R
;
˘˘R S
return
˙˙ 
;
˙˙ 
}
˚˚ 
XmlNodeList
˝˝ 
	bdProcess
˝˝ %
=
˝˝& '
doc
˝˝( +
.
˝˝+ ,"
GetElementsByTagName
˝˝, @
(
˝˝@ A
$str
˝˝A J
)
˝˝J K
;
˝˝K L
foreach
˛˛ 
(
˛˛ 
XmlNode
˛˛  
nodeP
˛˛! &
in
˛˛' )
	bdProcess
˛˛* 3
)
˛˛3 4
{
ˇˇ 

XmlElement
ÄÄ 
subsElement
ÄÄ *
=
ÄÄ+ ,
(
ÄÄ- .

XmlElement
ÄÄ. 8
)
ÄÄ8 9
nodeP
ÄÄ9 >
;
ÄÄ> ?
XmlNodeList
ÅÅ 
stepsSE
ÅÅ  '
=
ÅÅ( )
subsElement
ÅÅ* 5
.
ÅÅ5 6

ChildNodes
ÅÅ6 @
;
ÅÅ@ A
foreach
ÉÉ 
(
ÉÉ 
XmlNode
ÉÉ $
nodeStep
ÉÉ% -
in
ÉÉ. 0
stepsSE
ÉÉ1 8
)
ÉÉ8 9
{
ÑÑ 

RevisaNodo
ÖÖ "
(
ÖÖ" #
nodeStep
ÖÖ# +
,
ÖÖ+ ,
fio
ÖÖ- 0
.
ÖÖ0 1
Name
ÖÖ1 5
,
ÖÖ5 6

folderName
ÖÖ7 A
)
ÖÖA B
;
ÖÖB C
}
ÜÜ 
}
áá 
}
àà 
else
ââ 
{
ää 
arch
ãã 
.
ãã 
	WriteLine
ãã 
(
ãã 
$str
ãã B
,
ããB C
	file_name
ããD M
)
ããM N
;
ããN O
}
åå 
}
çç 	
private
èè 
void
èè 

RevisaNodo
èè 
(
èè  
XmlNode
èè  '
nodo
èè( ,
,
èè, -
string
èè. 4
	file_name
èè5 >
,
èè> ?
string
èè@ F

folderName
èèG Q
)
èèQ R
{
êê 	
switch
ëë 
(
ëë 
nodo
ëë 
.
ëë 
Name
ëë 
)
ëë 
{
íí 
case
ìì 
$str
ìì 
:
ìì 
case
îî 
$str
îî 
:
îî 
case
ïï 
$str
ïï 
:
ïï  
case
ññ 
$str
ññ 
:
ññ 
case
óó 
$str
óó 
:
óó  
case
òò 
$str
òò !
:
òò! "
case
ôô 
$str
ôô 
:
ôô 
case
öö 
$str
öö 
:
öö 
case
õõ 
$str
õõ #
:
õõ# $
case
úú 
$str
úú %
:
úú% &
case
ûû 
$str
ûû 
:
ûû 
case
üü 
$str
üü  
:
üü  !
case
†† 
$str
†† 
:
††  
case
°° 
$str
°° "
:
°°" #
case
¢¢ 
$str
¢¢ #
:
¢¢# $
case
££ 
$str
££ 
:
££ 
case
§§ 
$str
§§ 
:
§§ 
case
•• 
$str
•• 
:
•• 
case
¶¶ 
$str
¶¶ 
:
¶¶ 
case
ßß 
$str
ßß 
:
ßß 
case
®® 
$str
®® 
:
®® 
case
©© 
$str
©©  
:
©©  !
case
™™ 
$str
™™ 
:
™™ 
case
´´ 
$str
´´ 
:
´´ 
case
¨¨ 
$str
¨¨ 
:
¨¨ 
case
≠≠ 
$str
≠≠ 
:
≠≠ 
case
ÆÆ 
$str
ÆÆ $
:
ÆÆ$ %
case
ØØ 
$str
ØØ 
:
ØØ 
case
∞∞ 
$str
∞∞ 
:
∞∞  
case
±± 
$str
±± !
:
±±! "
case
≤≤ 
$str
≤≤ #
:
≤≤# $
case
≥≥ 
$str
≥≥ #
:
≥≥# $
case
¥¥ 
$str
¥¥ "
:
¥¥" #
case
µµ 
$str
µµ 
:
µµ 
case
∂∂ 
$str
∂∂ 
:
∂∂ 
case
∑∑ 
$str
∑∑  
:
∑∑  !
if
ππ 
(
ππ 
nodo
ππ 
.
ππ 
Name
ππ !
==
ππ" $
$str
ππ% +
)
ππ+ ,
{
∫∫ 
	pickLeido
ªª !
=
ªª" #
true
ªª$ (
;
ªª( )
}
ºº 
if
ΩΩ 
(
ΩΩ 
nodo
ΩΩ 
.
ΩΩ 
Name
ΩΩ !
==
ΩΩ" $
$str
ΩΩ% .
)
ΩΩ. /
{
ææ 
if
øø 
(
øø 
nodo
øø  
.
øø  !

Attributes
øø! +
[
øø+ ,
$str
øø, 7
]
øø7 8
!=
øø9 ;
null
øø< @
)
øø@ A
{
¿¿ 
operation_name
¡¡ *
=
¡¡+ ,
nodo
¡¡- 1
.
¡¡1 2

Attributes
¡¡2 <
[
¡¡< =
$str
¡¡= H
]
¡¡H I
.
¡¡I J
	InnerText
¡¡J S
;
¡¡S T
my_port_type
¬¬ (
=
¬¬) *
nodo
¬¬+ /
.
¬¬/ 0

Attributes
¬¬0 :
[
¬¬: ;
$str
¬¬; E
]
¬¬E F
.
¬¬F G
	InnerText
¬¬G P
;
¬¬P Q
operation_id
≈≈ (
=
≈≈) *
grabaOperacion
≈≈+ 9
(
≈≈9 :
operation_name
≈≈: H
,
≈≈H I
service_name
≈≈J V
,
≈≈V W
	file_name
≈≈X a
,
≈≈a b

folderName
≈≈c m
,
≈≈m n
my_port_type
≈≈o {
)
≈≈{ |
;
≈≈| }
}
∆∆ 
if
»» 
(
»» 
nodo
»»  
.
»»  !

Attributes
»»! +
[
»»+ ,
$str
»», B
]
»»B C
!=
»»D F
null
»»G K
)
»»K L
{
…… 
}
   
if
ÃÃ 
(
ÃÃ 
nodo
ÃÃ  
.
ÃÃ  !

Attributes
ÃÃ! +
[
ÃÃ+ ,
$str
ÃÃ, =
]
ÃÃ= >
!=
ÃÃ? A
null
ÃÃB F
)
ÃÃF G
{
ÕÕ 
operation_name
ŒŒ *
=
ŒŒ+ ,
nodo
ŒŒ- 1
.
ŒŒ1 2

Attributes
ŒŒ2 <
[
ŒŒ< =
$str
ŒŒ= N
]
ŒŒN O
.
ŒŒO P
	InnerText
ŒŒP Y
;
ŒŒY Z
operation_name
œœ *
=
œœ+ ,
(
œœ- .
operation_name
œœ. <
.
œœ< =
Contains
œœ= E
(
œœE F
$str
œœF I
)
œœI J
?
œœK L
operation_name
œœM [
.
œœ[ \
Remove
œœ\ b
(
œœb c
$num
œœc d
,
œœd e
operation_name
œœf t
.
œœt u
IndexOf
œœu |
(
œœ| }
$strœœ} Ä
)œœÄ Å
+œœÇ É
$numœœÑ Ö
)œœÖ Ü
:œœá à
operation_nameœœâ ó
)œœó ò
;œœò ô
var
—— 
fio
——  #
=
——$ %
new
——& )
System
——* 0
.
——0 1
IO
——1 3
.
——3 4
DirectoryInfo
——4 A
(
——A B

folderName
——B L
)
——L M
;
——M N
var
““ 
folder
““  &
=
““' (
fio
““) ,
.
““, -
Name
““- 1
.
““1 2
Replace
““2 9
(
““9 :
$str
““: ?
,
““? @
$str
““A C
)
““C D
;
““D E
my_port_type
‘‘ (
=
‘‘) *
folder
‘‘+ 1
+
‘‘2 3
$str
‘‘4 7
+
‘‘8 9
operation_name
‘‘: H
;
‘‘H I
operation_id
◊◊ (
=
◊◊) *
grabaOperacion
◊◊+ 9
(
◊◊9 :
operation_name
◊◊: H
,
◊◊H I
service_name
◊◊J V
,
◊◊V W
	file_name
◊◊X a
,
◊◊a b

folderName
◊◊c m
,
◊◊m n
my_port_type
◊◊o {
)
◊◊{ |
;
◊◊| }
}
ÿÿ 
}
ŸŸ 
if
€€ 
(
€€ 
	pickLeido
€€ !
&&
€€" $
nodo
€€% )
.
€€) *
Name
€€* .
==
€€/ 1
$str
€€2 =
)
€€= >
{
‹‹ 
if
›› 
(
›› 
operation_id
›› (
==
››) +
$num
››, -
)
››- .
{
ﬁﬁ 
if
ﬂﬂ 
(
ﬂﬂ  

folderName
ﬂﬂ  *
.
ﬂﬂ* +
Contains
ﬂﬂ+ 3
(
ﬂﬂ3 4
$str
ﬂﬂ4 C
)
ﬂﬂC D
)
ﬂﬂD E
{
‡‡ 
operation_name
··  .
=
··/ 0
nodo
··1 5
.
··5 6

Attributes
··6 @
[
··@ A
$str
··A L
]
··L M
.
··M N
	InnerText
··N W
;
··W X
my_port_type
‚‚  ,
=
‚‚- .
nodo
‚‚/ 3
.
‚‚3 4

Attributes
‚‚4 >
[
‚‚> ?
$str
‚‚? I
]
‚‚I J
.
‚‚J K
	InnerText
‚‚K T
;
‚‚T U
}
„„ 
else
‰‰  
{
ÂÂ 
operation_name
ÊÊ  .
=
ÊÊ/ 0
Path
ÊÊ1 5
.
ÊÊ5 6)
GetFileNameWithoutExtension
ÊÊ6 Q
(
ÊÊQ R
	file_name
ÊÊR [
)
ÊÊ[ \
;
ÊÊ\ ]
my_port_type
ÁÁ  ,
=
ÁÁ- .
service_name
ÁÁ/ ;
;
ÁÁ; <
}
ËË 
operation_id
ÎÎ (
=
ÎÎ) *
grabaOperacion
ÎÎ+ 9
(
ÎÎ9 :
operation_name
ÎÎ: H
,
ÎÎH I
service_name
ÎÎJ V
,
ÎÎV W
	file_name
ÎÎX a
,
ÎÎa b

folderName
ÎÎc m
,
ÎÎm n
my_port_type
ÎÎo {
)
ÎÎ{ |
;
ÎÎ| }
}
ÌÌ 
if
ÓÓ 
(
ÓÓ 
operation_id
ÓÓ (
>
ÓÓ) *
$num
ÓÓ+ ,
)
ÓÓ, -
{
ÔÔ 
var
 
pl
  "
=
# $
nodo
% )
.
) *

Attributes
* 4
[
4 5
$str
5 B
]
B C
.
C D
	InnerText
D M
;
M N
var
ÚÚ 
ljca
ÚÚ  $
=
ÚÚ% &
lJca
ÚÚ' +
.
ÚÚ+ ,
Find
ÚÚ, 0
(
ÚÚ0 1
m
ÚÚ1 2
=>
ÚÚ3 5
m
ÚÚ6 7
.
ÚÚ7 8
name
ÚÚ8 <
==
ÚÚ= ?
pl
ÚÚ@ B
)
ÚÚB C
;
ÚÚC D
if
ÛÛ 
(
ÛÛ  
ljca
ÛÛ  $
!=
ÛÛ% '
null
ÛÛ( ,
)
ÛÛ, -
{
ÙÙ 
var
ıı  #
operation_invoked
ıı$ 5
=
ıı6 7
ljca
ıı8 <
.
ıı< =
DestinationName
ıı= L
;
ııL M
var
ˆˆ  #
partner_link
ˆˆ$ 0
=
ˆˆ1 2
$str
ˆˆ3 5
;
ˆˆ5 6
var
˜˜  #
	port_type
˜˜$ -
=
˜˜. /
ljca
˜˜0 4
.
˜˜4 5

cdLocation
˜˜5 ?
;
˜˜? @ 
grabaRelacionQueue
¯¯  2
(
¯¯2 3
operation_id
¯¯3 ?
,
¯¯? @
operation_name
¯¯A O
,
¯¯O P
service_name
¯¯Q ]
,
¯¯] ^
my_port_type
¯¯_ k
,
¯¯k l
operation_invoked
¯¯m ~
,
¯¯~ 
partner_link¯¯Ä å
,¯¯å ç
	port_type¯¯é ó
,¯¯ó ò

folderName¯¯ô £
,¯¯£ §
	file_name¯¯• Æ
)¯¯Æ Ø
;¯¯Ø ∞
}
˘˘ 
}
˙˙ 
}
˚˚ 
if
¸¸ 
(
¸¸ 
nodo
¸¸ 
.
¸¸ 
HasChildNodes
¸¸ *
)
¸¸* +
{
˝˝ 
foreach
˛˛ 
(
˛˛  !
XmlNode
˛˛! (
nodoHijo
˛˛) 1
in
˛˛2 4
nodo
˛˛5 9
.
˛˛9 :

ChildNodes
˛˛: D
)
˛˛D E
{
ˇˇ 

RevisaNodo
ÄÄ &
(
ÄÄ& '
nodoHijo
ÄÄ' /
,
ÄÄ/ 0
	file_name
ÄÄ1 :
,
ÄÄ: ;

folderName
ÄÄ< F
)
ÄÄF G
;
ÄÄG H
}
ÅÅ 
}
ÇÇ 
if
ÑÑ 
(
ÑÑ 
nodo
ÑÑ 
.
ÑÑ 
Name
ÑÑ !
==
ÑÑ" $
$str
ÑÑ% -
&&
ÑÑ. 0
operation_name
ÑÑ1 ?
==
ÑÑ@ B
$str
ÑÑC E
)
ÑÑE F
{
ÖÖ 
XmlDocument
áá #
doc2
áá$ (
=
áá) *
new
áá+ .
XmlDocument
áá/ :
(
áá: ;
)
áá; <
;
áá< =
doc2
àà 
.
àà 
Load
àà !
(
àà! "

folderName
àà" ,
+
àà- .
$str
àà/ 3
+
àà4 5
	file_name
àà6 ?
)
àà? @
;
àà@ A
var
ää 
nombre2
ää #
=
ää$ %
$str
ää& (
;
ää( )
XmlNodeList
ãã #
	bdProcess
ãã$ -
=
ãã. /
doc2
ãã0 4
.
ãã4 5"
GetElementsByTagName
ãã5 I
(
ããI J
$str
ããJ S
)
ããS T
;
ããT U
foreach
åå 
(
åå  !
XmlNode
åå! (
nodeP
åå) .
in
åå/ 1
	bdProcess
åå2 ;
)
åå; <
{
çç 

XmlElement
éé &
subsElement
éé' 2
=
éé3 4
(
éé5 6

XmlElement
éé6 @
)
éé@ A
nodeP
ééA F
;
ééF G
XmlNodeList
èè '
stepsSE
èè( /
=
èè0 1
subsElement
èè2 =
.
èè= >

ChildNodes
èè> H
;
èèH I
foreach
ëë #
(
ëë$ %
XmlNode
ëë% ,
nodeStep
ëë- 5
in
ëë6 8
stepsSE
ëë9 @
)
ëë@ A
{
íí 
RevisaNodo2
ìì  +
(
ìì+ ,
nodeStep
ìì, 4
,
ìì4 5
ref
ìì6 9
nombre2
ìì: A
)
ììA B
;
ììB C
}
îî 
}
ïï 
if
ññ 
(
ññ 
nombre2
ññ #
!=
ññ$ &
$str
ññ' )
)
ññ) *
{
óó 
operation_name
òò *
=
òò+ ,
nombre2
òò- 4
;
òò4 5
}
ôô 
}
öö 
if
úú 
(
úú 
nodo
úú 
.
úú 
Name
úú !
==
úú" $
$str
úú% -
&&
úú. 0
operation_name
úú1 ?
!=
úú@ B
$str
úúC E
)
úúE F
{
ùù 
var
ûû 
operation_invoked
ûû -
=
ûû. /
$str
ûû0 2
;
ûû2 3
var
üü 
partner_link
üü (
=
üü) *
$str
üü+ -
;
üü- .
var
†† 
	port_type
†† %
=
††& '
$str
††( *
;
††* +
if
°° 
(
°° 
nodo
°°  
.
°°  !

Attributes
°°! +
[
°°+ ,
$str
°°, 7
]
°°7 8
!=
°°9 ;
null
°°< @
)
°°@ A
{
¢¢ 
operation_invoked
££ -
=
££. /
nodo
££0 4
.
££4 5

Attributes
££5 ?
[
££? @
$str
££@ K
]
££K L
.
££L M
	InnerText
££M V
;
££V W
partner_link
§§ (
=
§§) *
nodo
§§+ /
.
§§/ 0

Attributes
§§0 :
[
§§: ;
$str
§§; H
]
§§H I
.
§§I J
	InnerText
§§J S
;
§§S T
	port_type
•• %
=
••& '
nodo
••( ,
.
••, -

Attributes
••- 7
[
••7 8
$str
••8 B
]
••B C
.
••C D
	InnerText
••D M
;
••M N
}
¶¶ 
if
ßß 
(
ßß 
nodo
ßß  
.
ßß  !

Attributes
ßß! +
[
ßß+ ,
$str
ßß, =
]
ßß= >
!=
ßß? A
null
ßßB F
)
ßßF G
{
®® 
operation_invoked
©© -
=
©©. /
nodo
©©0 4
.
©©4 5

Attributes
©©5 ?
[
©©? @
$str
©©@ Q
]
©©Q R
.
©©R S
	InnerText
©©S \
;
©©\ ]
}
™™ 
if
¨¨ 
(
¨¨ 
nodo
¨¨  
.
¨¨  !

Attributes
¨¨! +
[
¨¨+ ,
$str
¨¨, <
]
¨¨< =
==
¨¨> @
null
¨¨A E
&&
¨¨F H
partner_link
¨¨I U
!=
¨¨V X
$str
¨¨Y [
)
¨¨[ \
{
≠≠ 
var
ÆÆ 
type
ÆÆ  $
=
ÆÆ% &
$str
ÆÆ' )
;
ÆÆ) *
var
ØØ 
queue
ØØ  %
=
ØØ& '
$str
ØØ( *
;
ØØ* +
queue
∞∞ !
=
∞∞" #!
buscaNombreColaBpel
∞∞$ 7
(
∞∞7 8

folderName
∞∞8 B
,
∞∞B C
	file_name
∞∞D M
,
∞∞M N
partner_link
∞∞O [
,
∞∞[ \
	port_type
∞∞] f
,
∞∞f g
operation_invoked
∞∞h y
,
∞∞y z
out
∞∞{ ~
type∞∞ É
)∞∞É Ñ
;∞∞Ñ Ö
if
±± 
(
±±  
queue
±±  %
!=
±±& (
$str
±±) +
)
±±+ ,
{
≤≤ 
operation_invoked
≥≥  1
=
≥≥2 3
queue
≥≥4 9
;
≥≥9 :
	port_type
¥¥  )
=
¥¥* +
type
¥¥, 0
;
¥¥0 1
}
∂∂ 
}
∑∑ 
arch
∏∏ 
.
∏∏ 
	WriteLine
∏∏ &
(
∏∏& '
$str
∏∏' @
,
∏∏@ A
	file_name
∏∏B K
,
∏∏K L
my_port_type
∏∏M Y
,
∏∏Y Z
operation_name
∏∏[ i
,
∏∏i j
	port_type
∏∏k t
,
∏∏t u 
operation_invoked∏∏v á
)∏∏á à
;∏∏à â
grabaRelacion
∫∫ %
(
∫∫% &
operation_id
∫∫& 2
,
∫∫2 3
operation_name
∫∫4 B
,
∫∫B C
service_name
∫∫D P
,
∫∫P Q
my_port_type
∫∫R ^
,
∫∫^ _
operation_invoked
∫∫` q
,
∫∫q r
partner_link
∫∫s 
,∫∫ Ä
	port_type∫∫Å ä
,∫∫ä ã

folderName∫∫å ñ
,∫∫ñ ó
	file_name∫∫ò °
)∫∫° ¢
;∫∫¢ £
}
ªª 
break
ΩΩ 
;
ΩΩ 
default
ææ 
:
ææ 
break
øø 
;
øø 
}
¿¿ 
}
¡¡ 	
private
√√ 
string
√√ !
buscaNombreColaBpel
√√ *
(
√√* +
string
√√+ 1

folderName
√√2 <
,
√√< =
string
√√> D
archivo
√√E L
,
√√L M
string
√√N T
partnerLink
√√U `
,
√√` a
string
√√b h
portType
√√i q
,
√√q r
string
√√s y
	operacion√√z É
,√√É Ñ
out√√Ö à
string√√â è
TYPE√√ê î
)√√î ï
{
ƒƒ 	
var
≈≈ 
res
≈≈ 
=
≈≈ 
$str
≈≈ 
;
≈≈ 
TYPE
∆∆ 
=
∆∆ 
$str
∆∆ 
;
∆∆ 
var
»» 
ctf
»» 
=
»» 
Path
»» 
.
»» 
ChangeExtension
»» *
(
»»* +

folderName
»»+ 5
+
»»6 7
$str
»»8 <
+
»»= >
archivo
»»? F
,
»»F G
$str
»»H X
)
»»X Y
;
»»Y Z
if
…… 
(
…… 
File
…… 
.
…… 
Exists
…… 
(
…… 
ctf
…… 
)
……  
)
……  !
{
   
XmlDocument
ÃÃ 
doc2
ÃÃ  
=
ÃÃ! "
new
ÃÃ# &
XmlDocument
ÃÃ' 2
(
ÃÃ2 3
)
ÃÃ3 4
;
ÃÃ4 5
doc2
ÕÕ 
.
ÕÕ 
Load
ÕÕ 
(
ÕÕ 
ctf
ÕÕ 
)
ÕÕ 
;
ÕÕ 
var
œœ 
wsdl
œœ 
=
œœ 
$str
œœ 
;
œœ 
var
–– 
wsdl2
–– 
=
–– 
$str
–– 
;
–– 
var
—— 
jca
—— 
=
—— 
$str
—— 
;
—— 
var
”” 
plref
”” 
=
”” 
lRefJca
”” #
.
””# $
Find
””$ (
(
””( )
m
””) *
=>
””+ -
m
””. /
.
””/ 0
name
””0 4
==
””5 7
partnerLink
””8 C
)
””C D
;
””D E
if
‘‘ 
(
‘‘ 
plref
‘‘ 
!=
‘‘ 
null
‘‘ !
)
‘‘! "
{
’’ 
wsdl
÷÷ 
=
÷÷ 

folderName
÷÷ %
+
÷÷& '
$str
÷÷( ,
+
÷÷- .
plref
÷÷/ 4
.
÷÷4 5
wsdlLocation
÷÷5 A
;
÷÷A B
wsdl2
◊◊ 
=
◊◊ 
plref
◊◊ !
.
◊◊! "
wsdlLocation
◊◊" .
;
◊◊. /
jca
ŸŸ 
=
ŸŸ 

folderName
ŸŸ $
+
ŸŸ% &
$str
ŸŸ' +
+
ŸŸ, -
plref
ŸŸ. 3
.
ŸŸ3 4
config
ŸŸ4 :
;
ŸŸ: ;
}
⁄⁄ 
if
€€ 
(
€€ 
wsdl
€€ 
==
€€ 
$str
€€ 
)
€€ 
{
‹‹ 
XmlNodeList
›› 
bdCT
››  $
=
››% &
doc2
››' +
.
››+ ,"
GetElementsByTagName
››, @
(
››@ A
$str
››A P
)
››P Q
;
››Q R
foreach
ﬁﬁ 
(
ﬁﬁ 
XmlNode
ﬁﬁ $
nodeP
ﬁﬁ% *
in
ﬁﬁ+ -
bdCT
ﬁﬁ. 2
)
ﬁﬁ2 3
{
ﬂﬂ 

XmlElement
‡‡ "
subsElement
‡‡# .
=
‡‡/ 0
(
‡‡1 2

XmlElement
‡‡2 <
)
‡‡< =
nodeP
‡‡= B
;
‡‡B C
XmlNodeList
·· #
stepsSE
··$ +
=
··, -
subsElement
··. 9
.
··9 :

ChildNodes
··: D
;
··D E
foreach
„„ 
(
„„  !
XmlNode
„„! (
nodeStep
„„) 1
in
„„2 4
stepsSE
„„5 <
)
„„< =
{
‰‰ 
if
ÂÂ 
(
ÂÂ  
nodeStep
ÂÂ  (
.
ÂÂ( )
Name
ÂÂ) -
==
ÂÂ. 0
$str
ÂÂ1 <
&&
ÂÂ= ?
nodeStep
ÂÂ@ H
.
ÂÂH I

Attributes
ÂÂI S
[
ÂÂS T
$str
ÂÂT Z
]
ÂÂZ [
.
ÂÂ[ \
Value
ÂÂ\ a
==
ÂÂb d
partnerLink
ÂÂe p
&&
ÂÂq s
nodeStep
ÂÂt |
.
ÂÂ| }

AttributesÂÂ} á
[ÂÂá à
$strÂÂà ô
]ÂÂô ö
!=ÂÂõ ù
nullÂÂû ¢
)ÂÂ¢ £
{
ÊÊ 
wsdl
ÁÁ  $
=
ÁÁ% &

folderName
ÁÁ' 1
+
ÁÁ2 3
$str
ÁÁ4 8
+
ÁÁ9 :
nodeStep
ÁÁ; C
.
ÁÁC D

Attributes
ÁÁD N
[
ÁÁN O
$str
ÁÁO `
]
ÁÁ` a
.
ÁÁa b
Value
ÁÁb g
;
ÁÁg h
wsdl2
ËË  %
=
ËË& '
nodeStep
ËË( 0
.
ËË0 1

Attributes
ËË1 ;
[
ËË; <
$str
ËË< M
]
ËËM N
.
ËËN O
Value
ËËO T
;
ËËT U
}
ÈÈ 
}
ÍÍ 
}
ÎÎ 
}
ÏÏ 
if
ÌÌ 
(
ÌÌ 
wsdl
ÌÌ 
!=
ÌÌ 
$str
ÌÌ 
&&
ÌÌ !
jca
ÌÌ" %
==
ÌÌ& (
$str
ÌÌ) +
&&
ÌÌ, .
!
ÌÌ/ 0
wsdl2
ÌÌ0 5
.
ÌÌ5 6
Contains
ÌÌ6 >
(
ÌÌ> ?
$str
ÌÌ? H
)
ÌÌH I
)
ÌÌI J
{
ÓÓ 
var
ÔÔ 
ljca
ÔÔ 
=
ÔÔ 
lRefJca
ÔÔ &
.
ÔÔ& '
Find
ÔÔ' +
(
ÔÔ+ ,
m
ÔÔ, -
=>
ÔÔ. 0
m
ÔÔ1 2
.
ÔÔ2 3
wsdlLocation
ÔÔ3 ?
==
ÔÔ@ B
wsdl2
ÔÔC H
)
ÔÔH I
;
ÔÔI J
if
 
(
 
ljca
 
!=
 
null
  $
)
$ %
{
ÒÒ 
jca
ÚÚ 
=
ÚÚ 

folderName
ÚÚ (
+
ÚÚ) *
$str
ÚÚ+ /
+
ÚÚ0 1
ljca
ÚÚ2 6
.
ÚÚ6 7
config
ÚÚ7 =
;
ÚÚ= >
}
ÛÛ 
else
ÙÙ 
{
ıı 
if
˜˜ 
(
˜˜ 
File
˜˜  
.
˜˜  !
Exists
˜˜! '
(
˜˜' (
wsdl
˜˜( ,
)
˜˜, -
)
˜˜- .
{
¯¯ 
XmlDocument
˘˘ '
docWsdl
˘˘( /
=
˘˘0 1
new
˘˘2 5
XmlDocument
˘˘6 A
(
˘˘A B
)
˘˘B C
;
˘˘C D
docWsdl
˙˙ #
.
˙˙# $
Load
˙˙$ (
(
˙˙( )
wsdl
˙˙) -
)
˙˙- .
;
˙˙. /
var
˚˚ 
xBind
˚˚  %
=
˚˚& '
docWsdl
˚˚( /
.
˚˚/ 0

FirstChild
˚˚0 :
;
˚˚: ;
if
¸¸ 
(
¸¸  
xBind
¸¸  %
.
¸¸% &
Name
¸¸& *
==
¸¸+ -
$str
¸¸. ;
)
¸¸; <
{
˝˝ 
jca
˛˛  #
=
˛˛$ %

folderName
˛˛& 0
+
˛˛1 2
$str
˛˛3 7
+
˛˛8 9
xBind
˛˛: ?
.
˛˛? @
Value
˛˛@ E
;
˛˛E F
}
ˇˇ 
}
ÄÄ 
}
ÅÅ 
}
ÇÇ 
if
ÉÉ 
(
ÉÉ 
jca
ÉÉ 
!=
ÉÉ 
$str
ÉÉ 
&&
ÉÉ  
!
ÉÉ! "
jca
ÉÉ" %
.
ÉÉ% &
Contains
ÉÉ& .
(
ÉÉ. /
$str
ÉÉ/ 8
)
ÉÉ8 9
)
ÉÉ9 :
{
ÑÑ 
XmlDocument
ÖÖ 
docJca
ÖÖ  &
=
ÖÖ' (
new
ÖÖ) ,
XmlDocument
ÖÖ- 8
(
ÖÖ8 9
)
ÖÖ9 :
;
ÖÖ: ;
docJca
ÜÜ 
.
ÜÜ 
Load
ÜÜ 
(
ÜÜ  
jca
ÜÜ  #
)
ÜÜ# $
;
ÜÜ$ %
XmlNodeList
áá 
bdJca
áá  %
=
áá& '
docJca
áá( .
.
áá. /"
GetElementsByTagName
áá/ C
(
ááC D
$str
ááD T
)
ááT U
;
ááU V
foreach
àà 
(
àà 
XmlNode
àà $
nodeP
àà% *
in
àà+ -
bdJca
àà. 3
)
àà3 4
{
ââ 

XmlElement
ää "
subsElement
ää# .
=
ää/ 0
(
ää1 2

XmlElement
ää2 <
)
ää< =
nodeP
ää= B
;
ääB C
XmlNodeList
ãã #
stepsSE
ãã$ +
=
ãã, -
subsElement
ãã. 9
.
ãã9 :

ChildNodes
ãã: D
;
ããD E
foreach
çç 
(
çç  !
XmlNode
çç! (
nodeStep
çç) 1
in
çç2 4
stepsSE
çç5 <
)
çç< =
{
éé 
var
èè 
	portType2
èè  )
=
èè* +
portType
èè, 4
.
èè4 5
	Substring
èè5 >
(
èè> ?
portType
èè? G
.
èèG H
IndexOf
èèH O
(
èèO P
$str
èèP S
)
èèS T
+
èèU V
$num
èèW X
)
èèX Y
;
èèY Z
if
êê 
(
êê  
nodeStep
êê  (
.
êê( )
Name
êê) -
==
êê. 0
$str
êê1 E
&&
êêF H
nodeStep
êêI Q
.
êêQ R

Attributes
êêR \
[
êê\ ]
$str
êê] g
]
êêg h
!=
êêi k
null
êêl p
)
êêp q
{
ëë 
TYPE
íí  $
=
íí% &
nodeStep
íí' /
.
íí/ 0

Attributes
íí0 :
[
íí: ;
$str
íí; E
]
ííE F
.
ííF G
Value
ííG L
;
ííL M
}
ìì 
if
îî 
(
îî  
nodeStep
îî  (
.
îî( )
Name
îî) -
==
îî. 0
$str
îî1 G
&&
îîH J
nodeStep
îîK S
.
îîS T

Attributes
îîT ^
[
îî^ _
$str
îî_ i
]
îîi j
.
îîj k
Value
îîk p
==
îîq s
	portType2
îît }
&&îî~ Ä
nodeStepîîÅ â
.îîâ ä

Attributesîîä î
[îîî ï
$strîîï †
]îî† °
.îî° ¢
Valueîî¢ ß
==îî® ™
	operacionîî´ ¥
)îî¥ µ
{
ïï 

XmlElement
óó  *
subsProp
óó+ 3
=
óó4 5
(
óó6 7

XmlElement
óó7 A
)
óóA B
nodeStep
óóB J
;
óóJ K
foreach
ôô  '
(
ôô( )
XmlNode
ôô) 0
nodeProp
ôô1 9
in
ôô: <
subsProp
ôô= E
.
ôôE F

ChildNodes
ôôF P
[
ôôP Q
$num
ôôQ R
]
ôôR S
.
ôôS T

ChildNodes
ôôT ^
)
ôô^ _
{
öö  !
if
õõ$ &
(
õõ' (
nodeProp
õõ( 0
.
õõ0 1

Attributes
õõ1 ;
[
õõ; <
$str
õõ< B
]
õõB C
!=
õõD F
null
õõG K
)
õõK L
{
úú$ %
if
ùù( *
(
ùù+ ,
nodeProp
ùù, 4
.
ùù4 5

Attributes
ùù5 ?
[
ùù? @
$str
ùù@ F
]
ùùF G
.
ùùG H
Value
ùùH M
==
ùùN P
$str
ùùQ b
||
ùùc e
nodeProp
ùùf n
.
ùùn o

Attributes
ùùo y
[
ùùy z
$strùùz Ä
]ùùÄ Å
.ùùÅ Ç
ValueùùÇ á
==ùùà ä
$strùùã õ
)ùùõ ú
{
ûû( )
res
üü, /
=
üü0 1
nodeProp
üü2 :
.
üü: ;

Attributes
üü; E
[
üüE F
$str
üüF M
]
üüM N
!=
üüO Q
null
üüR V
?
üüW X
nodeProp
üüY a
.
üüa b

Attributes
üüb l
[
üül m
$str
üüm t
]
üüt u
.
üüu v
Value
üüv {
:
üü| }
$strüü~ Ä
;üüÄ Å
}
††( )
}
°°$ %
}
¢¢  !
}
££ 
}
§§ 
}
•• 
}
ßß 
}
©© 
return
´´ 
res
´´ 
;
´´ 
}
¨¨ 	
private
ØØ 
void
ØØ 
RevisaNodo2
ØØ  
(
ØØ  !
XmlNode
ØØ! (
nodo
ØØ) -
,
ØØ- .
ref
ØØ/ 2
string
ØØ3 9
nombre2
ØØ: A
)
ØØA B
{
∞∞ 	
switch
±± 
(
±± 
nodo
±± 
.
±± 
Name
±± 
)
±± 
{
≤≤ 
case
≥≥ 
$str
≥≥ 
:
≥≥ 
case
¥¥ 
$str
¥¥ 
:
¥¥ 
case
µµ 
$str
µµ 
:
µµ  
case
∂∂ 
$str
∂∂ 
:
∂∂ 
case
∑∑ 
$str
∑∑ 
:
∑∑ 
case
∏∏ 
$str
∏∏ 
:
∏∏ 
case
ππ 
$str
ππ 
:
ππ 
case
∫∫ 
$str
∫∫  
:
∫∫  !
if
ºº 
(
ºº 
nodo
ºº 
.
ºº 
Name
ºº !
==
ºº" $
$str
ºº% .
||
ºº/ 1
nodo
ºº2 6
.
ºº6 7
Name
ºº7 ;
==
ºº< >
$str
ºº? J
)
ººJ K
{
ΩΩ 
if
ææ 
(
ææ 
nodo
ææ  
.
ææ  !

Attributes
ææ! +
[
ææ+ ,
$str
ææ, 7
]
ææ7 8
!=
ææ9 ;
null
ææ< @
)
ææ@ A
{
øø 
nombre2
¿¿ #
=
¿¿$ %
operation_name
¿¿& 4
=
¿¿5 6
nodo
¿¿7 ;
.
¿¿; <

Attributes
¿¿< F
[
¿¿F G
$str
¿¿G R
]
¿¿R S
.
¿¿S T
	InnerText
¿¿T ]
;
¿¿] ^
my_port_type
¡¡ (
=
¡¡) *
nodo
¡¡+ /
.
¡¡/ 0

Attributes
¡¡0 :
[
¡¡: ;
$str
¡¡; E
]
¡¡E F
.
¡¡F G
	InnerText
¡¡G P
;
¡¡P Q
}
¬¬ 
}
√√ 
if
ƒƒ 
(
ƒƒ 
nodo
ƒƒ 
.
ƒƒ 
HasChildNodes
ƒƒ *
)
ƒƒ* +
{
≈≈ 
foreach
∆∆ 
(
∆∆  !
XmlNode
∆∆! (
nodoHijo
∆∆) 1
in
∆∆2 4
nodo
∆∆5 9
.
∆∆9 :

ChildNodes
∆∆: D
)
∆∆D E
{
«« 
RevisaNodo2
…… '
(
……' (
nodoHijo
……( 0
,
……0 1
ref
……2 5
nombre2
……6 =
)
……= >
;
……> ?
}
   
}
ÀÀ 
break
ÕÕ 
;
ÕÕ 
default
ŒŒ 
:
ŒŒ 
break
œœ 
;
œœ 
}
–– 
}
—— 	
private
”” 
long
”” 
grabaOperacion
”” #
(
””# $
string
””$ *
operationName
””+ 8
,
””8 9
string
””: @
serviceName
””A L
,
””L M
string
””N T
bpel
””U Y
,
””Y Z
string
””[ a

folderName
””b l
,
””l m
string
””n t
portType
””u }
)
””} ~
{
‘‘ 	
long
’’ 
id_ret
’’ 
=
’’ 
$num
’’ 
;
’’ 
using
÷÷ 
(
÷÷ 
var
÷÷ 
cmd
÷÷ 
=
÷÷ 
new
÷÷  
MySqlCommand
÷÷! -
(
÷÷- .
)
÷÷. /
)
÷÷/ 0
{
◊◊ 
portType
ÿÿ 
=
ÿÿ 
fixServiceName
ÿÿ )
(
ÿÿ) *
service_name
ÿÿ* 6
,
ÿÿ6 7
portType
ÿÿ8 @
,
ÿÿ@ A

folderName
ÿÿB L
)
ÿÿL M
;
ÿÿM N
cmd
ŸŸ 
.
ŸŸ 

Connection
ŸŸ 
=
ŸŸ  
conn
ŸŸ! %
;
ŸŸ% &
cmd
⁄⁄ 
.
⁄⁄ 
CommandText
⁄⁄ 
=
⁄⁄  !
$str⁄⁄" Í
;⁄⁄Í Î
cmd
€€ 
.
€€ 
CommandType
€€ 
=
€€  !
CommandType
€€" -
.
€€- .
Text
€€. 2
;
€€2 3
cmd
ﬁﬁ 
.
ﬁﬁ 

Parameters
ﬁﬁ 
.
ﬁﬁ 
Add
ﬁﬁ "
(
ﬁﬁ" #
new
ﬁﬁ# &
MySqlParameter
ﬁﬁ' 5
(
ﬁﬁ5 6
$str
ﬁﬁ6 A
,
ﬁﬁA B
operationName
ﬁﬁC P
)
ﬁﬁP Q
)
ﬁﬁQ R
;
ﬁﬁR S
cmd
ﬂﬂ 
.
ﬂﬂ 

Parameters
ﬂﬂ 
.
ﬂﬂ 
Add
ﬂﬂ "
(
ﬂﬂ" #
new
ﬂﬂ# &
MySqlParameter
ﬂﬂ' 5
(
ﬂﬂ5 6
$str
ﬂﬂ6 ?
,
ﬂﬂ? @
serviceName
ﬂﬂA L
)
ﬂﬂL M
)
ﬂﬂM N
;
ﬂﬂN O
cmd
‡‡ 
.
‡‡ 

Parameters
‡‡ 
.
‡‡ 
Add
‡‡ "
(
‡‡" #
new
‡‡# &
MySqlParameter
‡‡' 5
(
‡‡5 6
$str
‡‡6 <
,
‡‡< =
bpel
‡‡> B
)
‡‡B C
)
‡‡C D
;
‡‡D E
cmd
·· 
.
·· 

Parameters
·· 
.
·· 
Add
·· "
(
··" #
new
··# &
MySqlParameter
··' 5
(
··5 6
$str
··6 >
,
··> ?

folderName
··@ J
)
··J K
)
··K L
;
··L M
portType
‚‚ 
=
‚‚ 
portType
‚‚ #
.
‚‚# $
Contains
‚‚$ ,
(
‚‚, -
$str
‚‚- 0
)
‚‚0 1
?
‚‚2 3
portType
‚‚4 <
.
‚‚< =
Remove
‚‚= C
(
‚‚C D
$num
‚‚D E
,
‚‚E F
portType
‚‚G O
.
‚‚O P
IndexOf
‚‚P W
(
‚‚W X
$str
‚‚X [
)
‚‚[ \
+
‚‚] ^
$num
‚‚_ `
)
‚‚` a
:
‚‚b c
portType
‚‚d l
;
‚‚l m
cmd
„„ 
.
„„ 

Parameters
„„ 
.
„„ 
Add
„„ "
(
„„" #
new
„„# &
MySqlParameter
„„' 5
(
„„5 6
$str
„„6 A
,
„„A B
portType
„„C K
)
„„K L
)
„„L M
;
„„M N
cmd
‰‰ 
.
‰‰ 

Parameters
‰‰ 
.
‰‰ 
Add
‰‰ "
(
‰‰" #
new
‰‰# &
MySqlParameter
‰‰' 5
(
‰‰5 6
$str
‰‰6 A
,
‰‰A B
fixPortType
‰‰C N
(
‰‰N O
operationName
‰‰O \
,
‰‰\ ]
serviceName
‰‰^ i
,
‰‰i j
bpel
‰‰k o
,
‰‰o p

folderName
‰‰q {
,
‰‰{ |
portType‰‰} Ö
)‰‰Ö Ü
)‰‰Ü á
)‰‰á à
;‰‰à â
try
ÊÊ 
{
ÁÁ 
id_ret
ËË 
=
ËË 
Convert
ËË $
.
ËË$ %
ToInt64
ËË% ,
(
ËË, -
cmd
ËË- 0
.
ËË0 1
ExecuteScalar
ËË1 >
(
ËË> ?
)
ËË? @
)
ËË@ A
;
ËËA B
}
ÈÈ 
catch
ÍÍ 
(
ÍÍ 
	Exception
ÍÍ  
ex
ÍÍ! #
)
ÍÍ# $
{
ÎÎ 
var
ÏÏ 
m
ÏÏ 
=
ÏÏ 
ex
ÏÏ 
.
ÏÏ 
Message
ÏÏ &
;
ÏÏ& '
id_ret
ÌÌ 
=
ÌÌ 
$num
ÌÌ 
;
ÌÌ 
}
ÓÓ 
}
ÔÔ 
if
ÒÒ 
(
ÒÒ 
operation_id
ÒÒ 
==
ÒÒ 
$num
ÒÒ  !
&&
ÒÒ" $
id_ret
ÒÒ% +
!=
ÒÒ, .
$num
ÒÒ/ 0
)
ÒÒ0 1
{
ÚÚ 
using
ÙÙ 
(
ÙÙ 
var
ÙÙ 
cmd
ÙÙ 
=
ÙÙ  
new
ÙÙ! $
MySqlCommand
ÙÙ% 1
(
ÙÙ1 2
)
ÙÙ2 3
)
ÙÙ3 4
{
ıı 
cmd
˜˜ 
.
˜˜ 

Connection
˜˜ "
=
˜˜# $
conn
˜˜% )
;
˜˜) *
cmd
¯¯ 
.
¯¯ 
CommandText
¯¯ #
=
¯¯$ %
$str
¯¯& v
;
¯¯v w
cmd
˘˘ 
.
˘˘ 
CommandType
˘˘ #
=
˘˘$ %
CommandType
˘˘& 1
.
˘˘1 2
Text
˘˘2 6
;
˘˘6 7
cmd
˚˚ 
.
˚˚ 

Parameters
˚˚ "
.
˚˚" #
Add
˚˚# &
(
˚˚& '
new
˚˚' *
MySqlParameter
˚˚+ 9
(
˚˚9 :
$str
˚˚: H
,
˚˚H I
id_ret
˚˚J P
)
˚˚P Q
)
˚˚Q R
;
˚˚R S
cmd
˝˝ 
.
˝˝ 
ExecuteNonQuery
˝˝ '
(
˝˝' (
)
˝˝( )
;
˝˝) *
}
˛˛ 
}
ˇˇ 
return
ÄÄ 
id_ret
ÄÄ 
;
ÄÄ 
}
ÅÅ 	
private
ÉÉ 
void
ÉÉ 
grabaRelacion
ÉÉ "
(
ÉÉ" #
long
ÉÉ# '
operation_id
ÉÉ( 4
,
ÉÉ4 5
string
ÉÉ6 <
operationName
ÉÉ= J
,
ÉÉJ K
string
ÉÉL R
serviceName
ÉÉS ^
,
ÉÉ^ _
string
ÉÉ` f
portType
ÉÉg o
,
ÉÉo p
string
ÉÉq w
operationInvokedÉÉx à
,ÉÉà â
stringÉÉä ê
serviceIvokedÉÉë û
,ÉÉû ü
stringÉÉ† ¶
portTypeInvÉÉß ≤
,ÉÉ≤ ≥
stringÉÉ¥ ∫

folderNameÉÉª ≈
,ÉÉ≈ ∆
stringÉÉ« Õ
bpelNameÉÉŒ ÷
)ÉÉ÷ ◊
{
ÑÑ 	
try
ÖÖ 
{
ÜÜ 
if
áá 
(
áá 
operationName
áá !
==
áá" $
null
áá% )
)
áá) *
{
àà 
return
ââ 
;
ââ 
}
ää 
portType
ãã 
=
ãã 
fixServiceName
ãã )
(
ãã) *
serviceName
ãã* 5
,
ãã5 6
portType
ãã7 ?
,
ãã? @

folderName
ããA K
)
ããK L
;
ããL M
var
çç 
cont
çç 
=
çç 
false
çç  
;
çç  !
using
éé 
(
éé 
var
éé 
cmd
éé 
=
éé  
new
éé! $
MySqlCommand
éé% 1
(
éé1 2
)
éé2 3
)
éé3 4
{
èè 
cmd
êê 
.
êê 

Connection
êê "
=
êê# $
conn
êê% )
;
êê) *
cmd
ëë 
.
ëë 
CommandText
ëë #
=
ëë$ %
$strëë& é
+ëëè ê
$stríí Æ
+ííØ ∞
$str
ìì 2
;
ìì2 3
cmd
îî 
.
îî 
CommandType
îî #
=
îî$ %
CommandType
îî& 1
.
îî1 2
Text
îî2 6
;
îî6 7
cmd
ññ 
.
ññ 

Parameters
ññ "
.
ññ" #
Add
ññ# &
(
ññ& '
new
ññ' *
MySqlParameter
ññ+ 9
(
ññ9 :
$str
ññ: E
,
ññE F
operationName
ññG T
)
ññT U
)
ññU V
;
ññV W
cmd
óó 
.
óó 

Parameters
óó "
.
óó" #
Add
óó# &
(
óó& '
new
óó' *
MySqlParameter
óó+ 9
(
óó9 :
$str
óó: C
,
óóC D
serviceName
óóE P
)
óóP Q
)
óóQ R
;
óóR S
cmd
òò 
.
òò 

Parameters
òò "
.
òò" #
Add
òò# &
(
òò& '
new
òò' *
MySqlParameter
òò+ 9
(
òò9 :
$str
òò: M
,
òòM N
operationInvoked
òòO _
)
òò_ `
)
òò` a
;
òòa b
cmd
ôô 
.
ôô 

Parameters
ôô "
.
ôô" #
Add
ôô# &
(
ôô& '
new
ôô' *
MySqlParameter
ôô+ 9
(
ôô9 :
$str
ôô: K
,
ôôK L
serviceIvoked
ôôM Z
)
ôôZ [
)
ôô[ \
;
ôô\ ]
portTypeInv
öö 
=
öö  !
portTypeInv
öö" -
.
öö- .
Contains
öö. 6
(
öö6 7
$str
öö7 :
)
öö: ;
?
öö< =
portTypeInv
öö> I
.
ööI J
Remove
ööJ P
(
ööP Q
$num
ööQ R
,
ööR S
portTypeInv
ööT _
.
öö_ `
IndexOf
öö` g
(
öög h
$str
ööh k
)
öök l
+
ööm n
$num
ööo p
)
ööp q
:
öör s
portTypeInv
ööt 
;öö Ä
cmd
õõ 
.
õõ 

Parameters
õõ "
.
õõ" #
Add
õõ# &
(
õõ& '
new
õõ' *
MySqlParameter
õõ+ 9
(
õõ9 :
$str
õõ: M
,
õõM N
fixPortType
õõO Z
(
õõZ [
operationName
õõ[ h
,
õõh i
serviceName
õõj u
,
õõu v
$str
õõw y
,
õõy z

folderNameõõ{ Ö
,õõÖ Ü
portTypeõõá è
)õõè ê
)õõê ë
)õõë í
;õõí ì
portType
úú 
=
úú 
portType
úú '
.
úú' (
Contains
úú( 0
(
úú0 1
$str
úú1 4
)
úú4 5
?
úú6 7
portType
úú8 @
.
úú@ A
Remove
úúA G
(
úúG H
$num
úúH I
,
úúI J
portType
úúK S
.
úúS T
IndexOf
úúT [
(
úú[ \
$str
úú\ _
)
úú_ `
+
úúa b
$num
úúc d
)
úúd e
:
úúf g
portType
úúh p
;
úúp q
cmd
ùù 
.
ùù 

Parameters
ùù "
.
ùù" #
Add
ùù# &
(
ùù& '
new
ùù' *
MySqlParameter
ùù+ 9
(
ùù9 :
$str
ùù: E
,
ùùE F
portType
ùùG O
)
ùùO P
)
ùùP Q
;
ùùQ R
cmd
ûû 
.
ûû 

Parameters
ûû "
.
ûû" #
Add
ûû# &
(
ûû& '
new
ûû' *
MySqlParameter
ûû+ 9
(
ûû9 :
$str
ûû: E
,
ûûE F
fixPortType
ûûG R
(
ûûR S
operationName
ûûS `
,
ûû` a
serviceName
ûûb m
,
ûûm n
bpelName
ûûo w
,
ûûw x

folderNameûûy É
,ûûÉ Ñ
portTypeûûÖ ç
)ûûç é
)ûûé è
)ûûè ê
;ûûê ë
cmd
üü 
.
üü 

Parameters
üü "
.
üü" #
Add
üü# &
(
üü& '
new
üü' *
MySqlParameter
üü+ 9
(
üü9 :
$str
üü: H
,
üüH I
operation_id
üüJ V
)
üüV W
)
üüW X
;
üüX Y
var
°° 
respS
°° 
=
°° 
cmd
°°  #
.
°°# $
ExecuteScalar
°°$ 1
(
°°1 2
)
°°2 3
;
°°3 4
cont
¢¢ 
=
¢¢ 
(
¢¢ 
Convert
¢¢ #
.
¢¢# $
ToInt32
¢¢$ +
(
¢¢+ ,
respS
¢¢, 1
)
¢¢1 2
==
¢¢3 5
$num
¢¢6 7
)
¢¢7 8
;
¢¢8 9
}
££ 
if
§§ 
(
§§ 
cont
§§ 
)
§§ 
{
•• 
portTypeInv
¶¶ 
=
¶¶  !
fixServiceNameInv
¶¶" 3
(
¶¶3 4
serviceIvoked
¶¶4 A
,
¶¶A B
portTypeInv
¶¶C N
)
¶¶N O
;
¶¶O P
using
®® 
(
®® 
var
®® 
cmd
®® "
=
®®# $
new
®®% (
MySqlCommand
®®) 5
(
®®5 6
)
®®6 7
)
®®7 8
{
©© 
cmd
™™ 
.
™™ 

Connection
™™ &
=
™™' (
conn
™™) -
;
™™- .
cmd
´´ 
.
´´ 
CommandText
´´ '
=
´´( )
$str´´* œ
+´´– —
$str¨¨ ö
;¨¨ö õ
cmd
≠≠ 
.
≠≠ 
CommandType
≠≠ '
=
≠≠( )
CommandType
≠≠* 5
.
≠≠5 6
Text
≠≠6 :
;
≠≠: ;
cmd
ØØ 
.
ØØ 

Parameters
ØØ &
.
ØØ& '
Add
ØØ' *
(
ØØ* +
new
ØØ+ .
MySqlParameter
ØØ/ =
(
ØØ= >
$str
ØØ> I
,
ØØI J
operationName
ØØK X
)
ØØX Y
)
ØØY Z
;
ØØZ [
cmd
∞∞ 
.
∞∞ 

Parameters
∞∞ &
.
∞∞& '
Add
∞∞' *
(
∞∞* +
new
∞∞+ .
MySqlParameter
∞∞/ =
(
∞∞= >
$str
∞∞> G
,
∞∞G H
serviceName
∞∞I T
)
∞∞T U
)
∞∞U V
;
∞∞V W
portType
±±  
=
±±! "
portType
±±# +
.
±±+ ,
Contains
±±, 4
(
±±4 5
$str
±±5 8
)
±±8 9
?
±±: ;
portType
±±< D
.
±±D E
Remove
±±E K
(
±±K L
$num
±±L M
,
±±M N
portType
±±O W
.
±±W X
IndexOf
±±X _
(
±±_ `
$str
±±` c
)
±±c d
+
±±e f
$num
±±g h
)
±±h i
:
±±j k
portType
±±l t
;
±±t u
cmd
≤≤ 
.
≤≤ 

Parameters
≤≤ &
.
≤≤& '
Add
≤≤' *
(
≤≤* +
new
≤≤+ .
MySqlParameter
≤≤/ =
(
≤≤= >
$str
≤≤> I
,
≤≤I J
portType
≤≤K S
)
≤≤S T
)
≤≤T U
;
≤≤U V
cmd
≥≥ 
.
≥≥ 

Parameters
≥≥ &
.
≥≥& '
Add
≥≥' *
(
≥≥* +
new
≥≥+ .
MySqlParameter
≥≥/ =
(
≥≥= >
$str
≥≥> Q
,
≥≥Q R
operationInvoked
≥≥S c
)
≥≥c d
)
≥≥d e
;
≥≥e f
cmd
¥¥ 
.
¥¥ 

Parameters
¥¥ &
.
¥¥& '
Add
¥¥' *
(
¥¥* +
new
¥¥+ .
MySqlParameter
¥¥/ =
(
¥¥= >
$str
¥¥> O
,
¥¥O P
serviceIvoked
¥¥Q ^
)
¥¥^ _
)
¥¥_ `
;
¥¥` a
portTypeInv
µµ #
=
µµ$ %
portTypeInv
µµ& 1
.
µµ1 2
Contains
µµ2 :
(
µµ: ;
$str
µµ; >
)
µµ> ?
?
µµ@ A
portTypeInv
µµB M
.
µµM N
Remove
µµN T
(
µµT U
$num
µµU V
,
µµV W
portTypeInv
µµX c
.
µµc d
IndexOf
µµd k
(
µµk l
$str
µµl o
)
µµo p
+
µµq r
$num
µµs t
)
µµt u
:
µµv w
portTypeInvµµx É
;µµÉ Ñ
cmd
∂∂ 
.
∂∂ 

Parameters
∂∂ &
.
∂∂& '
Add
∂∂' *
(
∂∂* +
new
∂∂+ .
MySqlParameter
∂∂/ =
(
∂∂= >
$str
∂∂> Q
,
∂∂Q R
portTypeInv
∂∂S ^
)
∂∂^ _
)
∂∂_ `
;
∂∂` a
cmd
∑∑ 
.
∑∑ 

Parameters
∑∑ &
.
∑∑& '
Add
∑∑' *
(
∑∑* +
new
∑∑+ .
MySqlParameter
∑∑/ =
(
∑∑= >
$str
∑∑> I
,
∑∑I J
fixPortType
∑∑K V
(
∑∑V W
operationName
∑∑W d
,
∑∑d e
serviceName
∑∑f q
,
∑∑q r
bpelName
∑∑s {
,
∑∑{ |

folderName∑∑} á
,∑∑á à
portType∑∑â ë
)∑∑ë í
)∑∑í ì
)∑∑ì î
;∑∑î ï
cmd
∏∏ 
.
∏∏ 

Parameters
∏∏ &
.
∏∏& '
Add
∏∏' *
(
∏∏* +
new
∏∏+ .
MySqlParameter
∏∏/ =
(
∏∏= >
$str
∏∏> L
,
∏∏L M
operation_id
∏∏N Z
)
∏∏Z [
)
∏∏[ \
;
∏∏\ ]
cmd
∫∫ 
.
∫∫ 
ExecuteNonQuery
∫∫ +
(
∫∫+ ,
)
∫∫, -
;
∫∫- .
}
ªª 
}
ºº 
}
ΩΩ 
catch
ææ 
(
ææ 
	Exception
ææ 
ex
ææ 
)
ææ  
{
øø 
throw
¿¿ 
;
¿¿ 
}
¡¡ 
}
¬¬ 	
private
∆∆ 
void
∆∆  
grabaRelacionQueue
∆∆ '
(
∆∆' (
long
∆∆( ,
operation_id
∆∆- 9
,
∆∆9 :
string
∆∆; A
operationName
∆∆B O
,
∆∆O P
string
∆∆Q W
serviceName
∆∆X c
,
∆∆c d
string
∆∆e k
portType
∆∆l t
,
∆∆t u
string
∆∆v |
operationInvoked∆∆} ç
,∆∆ç é
string∆∆è ï
serviceIvoked∆∆ñ £
,∆∆£ §
string∆∆• ´
portTypeInv∆∆¨ ∑
,∆∆∑ ∏
string∆∆π ø

folderName∆∆¿  
,∆∆  À
string∆∆Ã “
bpelName∆∆” €
)∆∆€ ‹
{
«« 	
try
»» 
{
…… 
if
   
(
   
operationName
   !
==
  " $
null
  % )
)
  ) *
{
ÀÀ 
return
ÃÃ 
;
ÃÃ 
}
ÕÕ 
portType
ŒŒ 
=
ŒŒ 
fixServiceName
ŒŒ )
(
ŒŒ) *
serviceName
ŒŒ* 5
,
ŒŒ5 6
portType
ŒŒ7 ?
,
ŒŒ? @

folderName
ŒŒA K
)
ŒŒK L
;
ŒŒL M
var
–– 
cont
–– 
=
–– 
false
––  
;
––  !
using
—— 
(
—— 
var
—— 
cmd
—— 
=
——  
new
——! $
MySqlCommand
——% 1
(
——1 2
)
——2 3
)
——3 4
{
““ 
cmd
”” 
.
”” 

Connection
”” "
=
””# $
conn
””% )
;
””) *
cmd
‘‘ 
.
‘‘ 
CommandText
‘‘ #
=
‘‘$ %
$str‘‘& í
+‘‘ì î
$str’’ ò
+’’ô ö
$str
÷÷ 2
;
÷÷2 3
cmd
◊◊ 
.
◊◊ 
CommandType
◊◊ #
=
◊◊$ %
CommandType
◊◊& 1
.
◊◊1 2
Text
◊◊2 6
;
◊◊6 7
cmd
ŸŸ 
.
ŸŸ 

Parameters
ŸŸ "
.
ŸŸ" #
Add
ŸŸ# &
(
ŸŸ& '
new
ŸŸ' *
MySqlParameter
ŸŸ+ 9
(
ŸŸ9 :
$str
ŸŸ: E
,
ŸŸE F
operationName
ŸŸG T
)
ŸŸT U
)
ŸŸU V
;
ŸŸV W
cmd
⁄⁄ 
.
⁄⁄ 

Parameters
⁄⁄ "
.
⁄⁄" #
Add
⁄⁄# &
(
⁄⁄& '
new
⁄⁄' *
MySqlParameter
⁄⁄+ 9
(
⁄⁄9 :
$str
⁄⁄: C
,
⁄⁄C D
serviceName
⁄⁄E P
)
⁄⁄P Q
)
⁄⁄Q R
;
⁄⁄R S
cmd
€€ 
.
€€ 

Parameters
€€ "
.
€€" #
Add
€€# &
(
€€& '
new
€€' *
MySqlParameter
€€+ 9
(
€€9 :
$str
€€: I
,
€€I J
operationInvoked
€€K [
)
€€[ \
)
€€\ ]
;
€€] ^
cmd
‹‹ 
.
‹‹ 

Parameters
‹‹ "
.
‹‹" #
Add
‹‹# &
(
‹‹& '
new
‹‹' *
MySqlParameter
‹‹+ 9
(
‹‹9 :
$str
‹‹: K
,
‹‹K L
serviceIvoked
‹‹M Z
)
‹‹Z [
)
‹‹[ \
;
‹‹\ ]
portTypeInv
›› 
=
››  !
portTypeInv
››" -
.
››- .
Contains
››. 6
(
››6 7
$str
››7 :
)
››: ;
?
››< =
portTypeInv
››> I
.
››I J
Remove
››J P
(
››P Q
$num
››Q R
,
››R S
portTypeInv
››T _
.
››_ `
IndexOf
››` g
(
››g h
$str
››h k
)
››k l
+
››m n
$num
››o p
)
››p q
:
››r s
portTypeInv
››t 
;›› Ä
cmd
ﬁﬁ 
.
ﬁﬁ 

Parameters
ﬁﬁ "
.
ﬁﬁ" #
Add
ﬁﬁ# &
(
ﬁﬁ& '
new
ﬁﬁ' *
MySqlParameter
ﬁﬁ+ 9
(
ﬁﬁ9 :
$str
ﬁﬁ: F
,
ﬁﬁF G
fixPortType
ﬁﬁH S
(
ﬁﬁS T
operationName
ﬁﬁT a
,
ﬁﬁa b
serviceName
ﬁﬁc n
,
ﬁﬁn o
$str
ﬁﬁp r
,
ﬁﬁr s

folderName
ﬁﬁt ~
,
ﬁﬁ~ 
portTypeﬁﬁÄ à
)ﬁﬁà â
)ﬁﬁâ ä
)ﬁﬁä ã
;ﬁﬁã å
portType
ﬂﬂ 
=
ﬂﬂ 
portType
ﬂﬂ '
.
ﬂﬂ' (
Contains
ﬂﬂ( 0
(
ﬂﬂ0 1
$str
ﬂﬂ1 4
)
ﬂﬂ4 5
?
ﬂﬂ6 7
portType
ﬂﬂ8 @
.
ﬂﬂ@ A
Remove
ﬂﬂA G
(
ﬂﬂG H
$num
ﬂﬂH I
,
ﬂﬂI J
portType
ﬂﬂK S
.
ﬂﬂS T
IndexOf
ﬂﬂT [
(
ﬂﬂ[ \
$str
ﬂﬂ\ _
)
ﬂﬂ_ `
+
ﬂﬂa b
$num
ﬂﬂc d
)
ﬂﬂd e
:
ﬂﬂf g
portType
ﬂﬂh p
;
ﬂﬂp q
cmd
‡‡ 
.
‡‡ 

Parameters
‡‡ "
.
‡‡" #
Add
‡‡# &
(
‡‡& '
new
‡‡' *
MySqlParameter
‡‡+ 9
(
‡‡9 :
$str
‡‡: E
,
‡‡E F
portType
‡‡G O
)
‡‡O P
)
‡‡P Q
;
‡‡Q R
cmd
·· 
.
·· 

Parameters
·· "
.
··" #
Add
··# &
(
··& '
new
··' *
MySqlParameter
··+ 9
(
··9 :
$str
··: E
,
··E F
fixPortType
··G R
(
··R S
operationName
··S `
,
··` a
serviceName
··b m
,
··m n
bpelName
··o w
,
··w x

folderName··y É
,··É Ñ
portType··Ö ç
)··ç é
)··é è
)··è ê
;··ê ë
cmd
‚‚ 
.
‚‚ 

Parameters
‚‚ "
.
‚‚" #
Add
‚‚# &
(
‚‚& '
new
‚‚' *
MySqlParameter
‚‚+ 9
(
‚‚9 :
$str
‚‚: H
,
‚‚H I
operation_id
‚‚J V
)
‚‚V W
)
‚‚W X
;
‚‚X Y
var
‰‰ 
respS
‰‰ 
=
‰‰ 
cmd
‰‰  #
.
‰‰# $
ExecuteScalar
‰‰$ 1
(
‰‰1 2
)
‰‰2 3
;
‰‰3 4
cont
ÂÂ 
=
ÂÂ 
(
ÂÂ 
Convert
ÂÂ #
.
ÂÂ# $
ToInt32
ÂÂ$ +
(
ÂÂ+ ,
respS
ÂÂ, 1
)
ÂÂ1 2
==
ÂÂ3 5
$num
ÂÂ6 7
)
ÂÂ7 8
;
ÂÂ8 9
}
ÊÊ 
if
ÁÁ 
(
ÁÁ 
cont
ÁÁ 
)
ÁÁ 
{
ËË 
portTypeInv
ÈÈ 
=
ÈÈ  !
fixServiceNameInv
ÈÈ" 3
(
ÈÈ3 4
serviceIvoked
ÈÈ4 A
,
ÈÈA B
portTypeInv
ÈÈC N
)
ÈÈN O
;
ÈÈO P
using
ÎÎ 
(
ÎÎ 
var
ÎÎ 
cmd
ÎÎ "
=
ÎÎ# $
new
ÎÎ% (
MySqlCommand
ÎÎ) 5
(
ÎÎ5 6
)
ÎÎ6 7
)
ÎÎ7 8
{
ÏÏ 
cmd
ÌÌ 
.
ÌÌ 

Connection
ÌÌ &
=
ÌÌ' (
conn
ÌÌ) -
;
ÌÌ- .
cmd
ÓÓ 
.
ÓÓ 
CommandText
ÓÓ '
=
ÓÓ( )
$strÓÓ* »
+ÓÓ…  
$strÔÔ è
;ÔÔè ê
cmd
 
.
 
CommandType
 '
=
( )
CommandType
* 5
.
5 6
Text
6 :
;
: ;
cmd
ÚÚ 
.
ÚÚ 

Parameters
ÚÚ &
.
ÚÚ& '
Add
ÚÚ' *
(
ÚÚ* +
new
ÚÚ+ .
MySqlParameter
ÚÚ/ =
(
ÚÚ= >
$str
ÚÚ> I
,
ÚÚI J
operationName
ÚÚK X
)
ÚÚX Y
)
ÚÚY Z
;
ÚÚZ [
cmd
ÛÛ 
.
ÛÛ 

Parameters
ÛÛ &
.
ÛÛ& '
Add
ÛÛ' *
(
ÛÛ* +
new
ÛÛ+ .
MySqlParameter
ÛÛ/ =
(
ÛÛ= >
$str
ÛÛ> G
,
ÛÛG H
serviceName
ÛÛI T
)
ÛÛT U
)
ÛÛU V
;
ÛÛV W
portType
ÙÙ  
=
ÙÙ! "
portType
ÙÙ# +
.
ÙÙ+ ,
Contains
ÙÙ, 4
(
ÙÙ4 5
$str
ÙÙ5 8
)
ÙÙ8 9
?
ÙÙ: ;
portType
ÙÙ< D
.
ÙÙD E
Remove
ÙÙE K
(
ÙÙK L
$num
ÙÙL M
,
ÙÙM N
portType
ÙÙO W
.
ÙÙW X
IndexOf
ÙÙX _
(
ÙÙ_ `
$str
ÙÙ` c
)
ÙÙc d
+
ÙÙe f
$num
ÙÙg h
)
ÙÙh i
:
ÙÙj k
portType
ÙÙl t
;
ÙÙt u
cmd
ıı 
.
ıı 

Parameters
ıı &
.
ıı& '
Add
ıı' *
(
ıı* +
new
ıı+ .
MySqlParameter
ıı/ =
(
ıı= >
$str
ıı> I
,
ııI J
portType
ııK S
)
ııS T
)
ııT U
;
ııU V
cmd
ˆˆ 
.
ˆˆ 

Parameters
ˆˆ &
.
ˆˆ& '
Add
ˆˆ' *
(
ˆˆ* +
new
ˆˆ+ .
MySqlParameter
ˆˆ/ =
(
ˆˆ= >
$str
ˆˆ> M
,
ˆˆM N
operationInvoked
ˆˆO _
)
ˆˆ_ `
)
ˆˆ` a
;
ˆˆa b
cmd
˜˜ 
.
˜˜ 

Parameters
˜˜ &
.
˜˜& '
Add
˜˜' *
(
˜˜* +
new
˜˜+ .
MySqlParameter
˜˜/ =
(
˜˜= >
$str
˜˜> O
,
˜˜O P
serviceIvoked
˜˜Q ^
)
˜˜^ _
)
˜˜_ `
;
˜˜` a
portTypeInv
¯¯ #
=
¯¯$ %
portTypeInv
¯¯& 1
.
¯¯1 2
Contains
¯¯2 :
(
¯¯: ;
$str
¯¯; >
)
¯¯> ?
?
¯¯@ A
portTypeInv
¯¯B M
.
¯¯M N
Remove
¯¯N T
(
¯¯T U
$num
¯¯U V
,
¯¯V W
portTypeInv
¯¯X c
.
¯¯c d
IndexOf
¯¯d k
(
¯¯k l
$str
¯¯l o
)
¯¯o p
+
¯¯q r
$num
¯¯s t
)
¯¯t u
:
¯¯v w
portTypeInv¯¯x É
;¯¯É Ñ
cmd
˘˘ 
.
˘˘ 

Parameters
˘˘ &
.
˘˘& '
Add
˘˘' *
(
˘˘* +
new
˘˘+ .
MySqlParameter
˘˘/ =
(
˘˘= >
$str
˘˘> J
,
˘˘J K
portTypeInv
˘˘L W
)
˘˘W X
)
˘˘X Y
;
˘˘Y Z
cmd
˙˙ 
.
˙˙ 

Parameters
˙˙ &
.
˙˙& '
Add
˙˙' *
(
˙˙* +
new
˙˙+ .
MySqlParameter
˙˙/ =
(
˙˙= >
$str
˙˙> I
,
˙˙I J
fixPortType
˙˙K V
(
˙˙V W
operationName
˙˙W d
,
˙˙d e
serviceName
˙˙f q
,
˙˙q r
bpelName
˙˙s {
,
˙˙{ |

folderName˙˙} á
,˙˙á à
portType˙˙â ë
)˙˙ë í
)˙˙í ì
)˙˙ì î
;˙˙î ï
cmd
˚˚ 
.
˚˚ 

Parameters
˚˚ &
.
˚˚& '
Add
˚˚' *
(
˚˚* +
new
˚˚+ .
MySqlParameter
˚˚/ =
(
˚˚= >
$str
˚˚> L
,
˚˚L M
operation_id
˚˚N Z
)
˚˚Z [
)
˚˚[ \
;
˚˚\ ]
cmd
˝˝ 
.
˝˝ 
ExecuteNonQuery
˝˝ +
(
˝˝+ ,
)
˝˝, -
;
˝˝- .
}
˛˛ 
}
ˇˇ 
}
ÄÄ 
catch
ÅÅ 
(
ÅÅ 
	Exception
ÅÅ 
ex
ÅÅ 
)
ÅÅ  
{
ÇÇ 
throw
ÉÉ 
;
ÉÉ 
}
ÑÑ 
}
ÖÖ 	
private
àà 
void
àà 
grabarService
àà "
(
àà" #
string
àà# )
service_name
àà* 6
,
àà6 7
string
àà8 >
	port_type
àà? H
,
ààH I
string
ààJ P
ruta
ààQ U
)
ààU V
{
ââ 	
	port_type
ää 
=
ää 
fixServiceName
ää &
(
ää& '
service_name
ää' 3
,
ää3 4
	port_type
ää5 >
,
ää> ?
ruta
ää@ D
)
ääD E
;
ääE F
try
åå 
{
çç 
using
éé 
(
éé 
var
éé 
cmd
éé 
=
éé  
new
éé! $
MySqlCommand
éé% 1
(
éé1 2
)
éé2 3
)
éé3 4
{
èè 
cmd
êê 
.
êê 

Connection
êê "
=
êê# $
conn
êê% )
;
êê) *
cmd
ëë 
.
ëë 
CommandText
ëë #
=
ëë$ %
$strëë& Ä
;ëëÄ Å
cmd
íí 
.
íí 
CommandType
íí #
=
íí$ %
CommandType
íí& 1
.
íí1 2
Text
íí2 6
;
íí6 7
cmd
îî 
.
îî 

Parameters
îî "
.
îî" #
Add
îî# &
(
îî& '
new
îî' *
MySqlParameter
îî+ 9
(
îî9 :
$str
îî: H
,
îîH I
service_name
îîJ V
)
îîV W
)
îîW X
;
îîX Y
cmd
ïï 
.
ïï 

Parameters
ïï "
.
ïï" #
Add
ïï# &
(
ïï& '
new
ïï' *
MySqlParameter
ïï+ 9
(
ïï9 :
$str
ïï: E
,
ïïE F
	port_type
ïïG P
)
ïïP Q
)
ïïQ R
;
ïïR S
cmd
óó 
.
óó 
ExecuteNonQuery
óó '
(
óó' (
)
óó( )
;
óó) *
}
òò 
}
öö 
catch
õõ 
(
õõ 
	Exception
õõ 
ex
õõ 
)
õõ  
{
úú 
var
ùù 
s
ùù 
=
ùù 
ex
ùù 
.
ùù 
Message
ùù "
;
ùù" #
}
ûû 
}
üü 	
private
°° 
string
°° 
fixPortType
°° "
(
°°" #
string
°°# )
operationName
°°* 7
,
°°7 8
string
°°9 ?
serviceName
°°@ K
,
°°K L
string
°°M S
bpel
°°T X
,
°°X Y
string
°°Z `

folderName
°°a k
,
°°k l
string
°°m s
portType
°°t |
)
°°| }
{
¢¢ 	
var
££ 
realName
££ 
=
££ 
portType
££ #
+
££$ %
$str
££& )
+
££* +
operationName
££, 9
;
££9 :
if
§§ 
(
§§ 
portType
§§ 
==
§§ 
$str
§§ 1
||
§§2 4
portType
§§5 =
==
§§> @
$str
§§A S
||
§§T V
portType
§§W _
==
§§` b
$str
§§c s
||
§§t v
portType
§§w 
==§§Ä Ç
$str§§É ò
||§§ô õ
(
•• 

folderName
•• 
==
•• 
$str
•• k
&&
••l n
bpel
••o s
==
••t v
$str••w â
)••â ä
||••ã ç
(
¶¶ 

folderName
¶¶ 
==
¶¶ 
$str
¶¶ Z
&&
¶¶[ ]
bpel
¶¶^ b
==
¶¶c e
$str¶¶f í
)¶¶í ì
||¶¶î ñ
(
ßß 

folderName
ßß 
==
ßß 
$str
ßß g
)
ßßg h
||
ßßi k
operationName
®® 
.
®® 
ToLower
®® %
(
®®% &
)
®®& '
.
®®' (
Contains
®®( 0
(
®®0 1
$str
®®1 :
)
®®: ;
||
®®< >
operationName
®®? L
.
®®L M
ToLower
®®M T
(
®®T U
)
®®U V
.
®®V W
Contains
®®W _
(
®®_ `
$str
®®` i
)
®®i j
||
®®k m
operationName
©© 
.
©© 
ToLower
©© %
(
©©% &
)
©©& '
.
©©' (
Equals
©©( .
(
©©. /
$str
©©/ 8
)
©©8 9
||
©©: <
portType
©©= E
.
©©E F
ToLower
©©F M
(
©©M N
)
©©N O
.
©©O P
Contains
©©P X
(
©©X Y
$str
©©Y `
)
©©` a
||
©©b d
portType
©©e m
==
©©n p
$str©©q ì
)
™™ 
{
´´ 
realName
¨¨ 
=
¨¨ 
bpel
¨¨ 
+
¨¨  !
$str
¨¨" %
+
¨¨& '
portType
¨¨( 0
+
¨¨1 2
$str
¨¨3 6
+
¨¨7 8
operationName
¨¨9 F
;
¨¨F G
}
≠≠ 
return
ÆÆ 
realName
ÆÆ 
;
ÆÆ 
}
∞∞ 	
private
≤≤ 
string
≤≤ 
fixServiceName
≤≤ %
(
≤≤% &
string
≤≤& ,
service_name
≤≤- 9
,
≤≤9 :
string
≤≤; A
	port_type
≤≤B K
,
≤≤K L
string
≤≤M S
ruta
≤≤T X
)
≤≤X Y
{
≥≥ 	
if
¥¥ 
(
¥¥ 
ruta
¥¥ 
.
¥¥ 
Contains
¥¥ 
(
¥¥ 
$str
¥¥ 1
)
¥¥1 2
||
¥¥3 5
ruta
¥¥6 :
.
¥¥: ;
Contains
¥¥; C
(
¥¥C D
$str
¥¥D W
)
¥¥W X
||
¥¥Y [
ruta
µµ 
.
µµ 
Contains
µµ 
(
µµ 
$str
µµ 1
)
µµ1 2
||
µµ3 5
ruta
µµ6 :
.
µµ: ;
Contains
µµ; C
(
µµC D
$str
µµD W
)
µµW X
||
µµY [
ruta
∂∂ 
.
∂∂ 
Contains
∂∂ 
(
∂∂ 
$str
∂∂ 1
)
∂∂1 2
||
∂∂3 5
ruta
∂∂6 :
.
∂∂: ;
Contains
∂∂; C
(
∂∂C D
$str
∂∂D W
)
∂∂W X
||
∂∂Y [
ruta
∑∑ 
.
∑∑ 
Contains
∑∑ 
(
∑∑ 
$str
∑∑ /
)
∑∑/ 0
)
∑∑0 1
{
∏∏ 
return
∫∫ 
$str
∫∫ ,
+
∫∫- .
ruta
∫∫/ 3
.
∫∫3 4
	Substring
∫∫4 =
(
∫∫= >
ruta
∫∫> B
.
∫∫B C
Length
∫∫C I
-
∫∫J K
$num
∫∫L M
)
∫∫M N
;
∫∫N O
}
ªª 
else
ºº 
if
ºº 
(
ºº 
ruta
ºº 
.
ºº 
Contains
ºº "
(
ºº" #
$str
ºº# 2
)
ºº2 3
&&
ºº4 6
service_name
ºº7 C
.
ººC D
Contains
ººD L
(
ººL M
$str
ººM R
)
ººR S
)
ººS T
{
ΩΩ 
return
ææ 
$str
ææ '
;
ææ' (
}
øø 
else
¿¿ 
if
¿¿ 
(
¿¿ 
ruta
¿¿ 
.
¿¿ 
Contains
¿¿ "
(
¿¿" #
$str
¿¿# 2
)
¿¿2 3
&&
¿¿4 6
service_name
¿¿7 C
.
¿¿C D
Contains
¿¿D L
(
¿¿L M
$str
¿¿M f
)
¿¿f g
)
¿¿g h
{
¡¡ 
return
¬¬ 
$str
¬¬ .
;
¬¬. /
}
√√ 
else
ƒƒ 
if
ƒƒ 
(
ƒƒ 
service_name
ƒƒ !
.
ƒƒ! "

StartsWith
ƒƒ" ,
(
ƒƒ, -
$str
ƒƒ- 2
)
ƒƒ2 3
)
ƒƒ3 4
{
≈≈ 
return
∆∆ 
service_name
∆∆ #
;
∆∆# $
}
«« 
else
»» 
{
…… 
return
   
	port_type
    
;
    !
}
ÀÀ 
}
ÃÃ 	
private
ŒŒ 
string
ŒŒ 
fixServiceNameInv
ŒŒ (
(
ŒŒ( )
string
ŒŒ) /
service_name
ŒŒ0 <
,
ŒŒ< =
string
ŒŒ> D
	port_type
ŒŒE N
)
ŒŒN O
{
œœ 	
if
–– 
(
–– 
service_name
–– 
.
–– 
Contains
–– %
(
––% &
$str
––& 9
)
––9 :
||
––; =
service_name
––> J
.
––J K
Contains
––K S
(
––S T
$str
––T g
)
––g h
||
––i k
service_name
—— 
.
—— 
Contains
—— %
(
——% &
$str
——& 9
)
——9 :
||
——; =
service_name
——> J
.
——J K
Contains
——K S
(
——S T
$str
——T g
)
——g h
||
——i k
service_name
““ 
.
““ 
Contains
““ %
(
““% &
$str
““& 9
)
““9 :
||
““; =
service_name
““> J
.
““J K
Contains
““K S
(
““S T
$str
““T g
)
““g h
||
““i k
service_name
”” 
.
”” 
Contains
”” %
(
””% &
$str
””& 9
)
””9 :
||
””; =
service_name
””> J
.
””J K
Contains
””K S
(
””S T
$str
””T g
)
””g h
)
‘‘ 
{
’’ 
return
◊◊ 
$str
◊◊ ,
+
◊◊- .
service_name
◊◊/ ;
.
◊◊; <
	Substring
◊◊< E
(
◊◊E F
service_name
◊◊F R
.
◊◊R S
Length
◊◊S Y
-
◊◊Z [
$num
◊◊\ ]
)
◊◊] ^
;
◊◊^ _
}
ÿÿ 
else
ŸŸ 
{
⁄⁄ 
return
€€ 
	port_type
€€  
;
€€  !
}
‹‹ 
}
›› 	
private
ﬂﬂ 
void
ﬂﬂ 
borraTodoBD
ﬂﬂ  
(
ﬂﬂ  !
)
ﬂﬂ! "
{
‡‡ 	
try
·· 
{
‚‚ 
using
„„ 
(
„„ 
var
„„ 
cmd
„„ 
=
„„  
new
„„! $
MySqlCommand
„„% 1
(
„„1 2
)
„„2 3
)
„„3 4
{
‰‰ 
cmd
ÂÂ 
.
ÂÂ 

Connection
ÂÂ "
=
ÂÂ# $
conn
ÂÂ% )
;
ÂÂ) *
cmd
ÊÊ 
.
ÊÊ 
CommandText
ÊÊ #
=
ÊÊ$ %
$str
ÊÊ& F
;
ÊÊF G
cmd
ÁÁ 
.
ÁÁ 
CommandType
ÁÁ #
=
ÁÁ$ %
CommandType
ÁÁ& 1
.
ÁÁ1 2
Text
ÁÁ2 6
;
ÁÁ6 7
cmd
ÈÈ 
.
ÈÈ 
ExecuteNonQuery
ÈÈ '
(
ÈÈ' (
)
ÈÈ( )
;
ÈÈ) *
}
ÍÍ 
using
ÎÎ 
(
ÎÎ 
var
ÎÎ 
cmd
ÎÎ 
=
ÎÎ  
new
ÎÎ! $
MySqlCommand
ÎÎ% 1
(
ÎÎ1 2
)
ÎÎ2 3
)
ÎÎ3 4
{
ÏÏ 
cmd
ÌÌ 
.
ÌÌ 

Connection
ÌÌ "
=
ÌÌ# $
conn
ÌÌ% )
;
ÌÌ) *
cmd
ÓÓ 
.
ÓÓ 
CommandText
ÓÓ #
=
ÓÓ$ %
$str
ÓÓ& B
;
ÓÓB C
cmd
ÔÔ 
.
ÔÔ 
CommandType
ÔÔ #
=
ÔÔ$ %
CommandType
ÔÔ& 1
.
ÔÔ1 2
Text
ÔÔ2 6
;
ÔÔ6 7
cmd
ÒÒ 
.
ÒÒ 
ExecuteNonQuery
ÒÒ '
(
ÒÒ' (
)
ÒÒ( )
;
ÒÒ) *
}
ÚÚ 
using
ÛÛ 
(
ÛÛ 
var
ÛÛ 
cmd
ÛÛ 
=
ÛÛ  
new
ÛÛ! $
MySqlCommand
ÛÛ% 1
(
ÛÛ1 2
)
ÛÛ2 3
)
ÛÛ3 4
{
ÙÙ 
cmd
ıı 
.
ıı 

Connection
ıı "
=
ıı# $
conn
ıı% )
;
ıı) *
cmd
ˆˆ 
.
ˆˆ 
CommandText
ˆˆ #
=
ˆˆ$ %
$str
ˆˆ& >
;
ˆˆ> ?
cmd
˜˜ 
.
˜˜ 
CommandType
˜˜ #
=
˜˜$ %
CommandType
˜˜& 1
.
˜˜1 2
Text
˜˜2 6
;
˜˜6 7
cmd
˘˘ 
.
˘˘ 
ExecuteNonQuery
˘˘ '
(
˘˘' (
)
˘˘( )
;
˘˘) *
}
˙˙ 
using
˚˚ 
(
˚˚ 
var
˚˚ 
cmd
˚˚ 
=
˚˚  
new
˚˚! $
MySqlCommand
˚˚% 1
(
˚˚1 2
)
˚˚2 3
)
˚˚3 4
{
¸¸ 
cmd
˝˝ 
.
˝˝ 

Connection
˝˝ "
=
˝˝# $
conn
˝˝% )
;
˝˝) *
cmd
˛˛ 
.
˛˛ 
CommandText
˛˛ #
=
˛˛$ %
$str
˛˛& <
;
˛˛< =
cmd
ˇˇ 
.
ˇˇ 
CommandType
ˇˇ #
=
ˇˇ$ %
CommandType
ˇˇ& 1
.
ˇˇ1 2
Text
ˇˇ2 6
;
ˇˇ6 7
cmd
ÅÅ 
.
ÅÅ 
ExecuteNonQuery
ÅÅ '
(
ÅÅ' (
)
ÅÅ( )
;
ÅÅ) *
}
ÇÇ 
}
ÉÉ 
catch
ÑÑ 
(
ÑÑ 
	Exception
ÑÑ 
ex
ÑÑ 
)
ÑÑ  
{
ÖÖ 
var
ÜÜ 
s
ÜÜ 
=
ÜÜ 
ex
ÜÜ 
.
ÜÜ 
Message
ÜÜ "
;
ÜÜ" #
}
áá 
}
àà 	
private
ää 
void
ää 
button3_Click
ää "
(
ää" #
object
ää# )
sender
ää* 0
,
ää0 1
	EventArgs
ää2 ;
e
ää< =
)
ää= >
{
ãã 	
Console
çç 
.
çç 
	WriteLine
çç 
(
çç 
$str
çç 8
)
çç8 9
;
çç9 :
var
éé 
nombre_arch
éé 
=
éé 
string
éé $
.
éé$ %
Format
éé% +
(
éé+ ,
$str
éé, ?
)
éé? @
;
éé@ A
arch
èè 
=
èè 
new
èè 
StreamWriter
èè #
(
èè# $"
ConfigurationManager
èè$ 8
.
èè8 9
AppSettings
èè9 D
[
èèD E
$str
èèE K
]
èèK L
+
èèM N
nombre_arch
èèO Z
,
èèZ [
false
èè\ a
)
èèa b
;
èèb c
using
ëë 
(
ëë 
var
ëë 
cmd
ëë 
=
ëë 
new
ëë  
MySqlCommand
ëë! -
(
ëë- .
$str
ëë. g
,
ëëg h
conn
ëëi m
)
ëëm n
)
ëën o
{
íí 
cmd
ìì 
.
ìì 
ExecuteNonQuery
ìì #
(
ìì# $
)
ìì$ %
;
ìì% &
}
îî 
using
óó 
(
óó 
var
óó 
cmd
óó 
=
óó 
new
óó  
MySqlCommand
óó! -
(
óó- .
)
óó. /
)
óó/ 0
{
òò 
cmd
ôô 
.
ôô 

Connection
ôô 
=
ôô  
conn
ôô! %
;
ôô% &
cmd
öö 
.
öö 
CommandText
öö 
=
öö  !
$str
öö" X
;
ööX Y
cmd
õõ 
.
õõ 
CommandType
õõ 
=
õõ  !
CommandType
õõ" -
.
õõ- .
Text
õõ. 2
;
õõ2 3
var
ùù 
reader
ùù 
=
ùù 
cmd
ùù  
.
ùù  !
ExecuteReader
ùù! .
(
ùù. /
)
ùù/ 0
;
ùù0 1
arch
üü 
.
üü 
	WriteLine
üü 
(
üü 
$str
üü T
)
üüT U
;
üüU V
while
†† 
(
†† 
reader
†† 
.
†† 
Read
†† "
(
††" #
)
††# $
)
††$ %
{
°° 
arch
¢¢ 
.
¢¢ 
	WriteLine
¢¢ "
(
¢¢" #
$str
¢¢# A
,
¢¢A B
reader
¢¢C I
[
¢¢I J
$str
¢¢J P
]
¢¢P Q
.
¢¢Q R
ToString
¢¢R Z
(
¢¢Z [
)
¢¢[ \
,
¢¢\ ]
reader
¢¢^ d
[
¢¢d e
$str
¢¢e s
]
¢¢s t
.
¢¢t u
ToString
¢¢u }
(
¢¢} ~
)
¢¢~ 
,¢¢ Ä
reader¢¢Å á
[¢¢á à
$str¢¢à é
]¢¢é è
.¢¢è ê
ToString¢¢ê ò
(¢¢ò ô
)¢¢ô ö
,¢¢ö õ
reader¢¢ú ¢
[¢¢¢ £
$str¢¢£ ∞
]¢¢∞ ±
.¢¢± ≤
ToString¢¢≤ ∫
(¢¢∫ ª
)¢¢ª º
,¢¢º Ω
reader¢¢æ ƒ
[¢¢ƒ ≈
$str¢¢≈ –
]¢¢– —
.¢¢— “
ToString¢¢“ ⁄
(¢¢⁄ €
)¢¢€ ‹
,¢¢‹ ›
reader¢¢ﬁ ‰
[¢¢‰ Â
$str¢¢Â 
]¢¢ Ò
.¢¢Ò Ú
ToString¢¢Ú ˙
(¢¢˙ ˚
)¢¢˚ ¸
)¢¢¸ ˝
;¢¢˝ ˛
}
££ 
reader
§§ 
.
§§ 
Close
§§ 
(
§§ 
)
§§ 
;
§§ 
reader
•• 
=
•• 
null
•• 
;
•• 
}
¶¶ 
arch
®® 
.
®® 
Close
®® 
(
®® 
)
®® 
;
®® 
Console
´´ 
.
´´ 
	WriteLine
´´ 
(
´´ 
$str
´´ E
)
´´E F
;
´´F G
nombre_arch
¨¨ 
=
¨¨ 
string
¨¨  
.
¨¨  !
Format
¨¨! '
(
¨¨' (
$str
¨¨( >
)
¨¨> ?
;
¨¨? @
arch
≠≠ 
=
≠≠ 
new
≠≠ 
StreamWriter
≠≠ #
(
≠≠# $"
ConfigurationManager
≠≠$ 8
.
≠≠8 9
AppSettings
≠≠9 D
[
≠≠D E
$str
≠≠E K
]
≠≠K L
+
≠≠M N
nombre_arch
≠≠O Z
,
≠≠Z [
false
≠≠\ a
)
≠≠a b
;
≠≠b c
using
∞∞ 
(
∞∞ 
var
∞∞ 
cmd
∞∞ 
=
∞∞ 
new
∞∞  
MySqlCommand
∞∞! -
(
∞∞- .
)
∞∞. /
)
∞∞/ 0
{
±± 
cmd
≤≤ 
.
≤≤ 

Connection
≤≤ 
=
≤≤  
conn
≤≤! %
;
≤≤% &
cmd
≥≥ 
.
≥≥ 
CommandText
≥≥ 
=
≥≥  !
$str≥≥" ä
+≥≥ã å
$str
¥¥ m
+
¥¥n o
$str
µµ ^
+
µµ_ `
$str
∂∂ A
+
∂∂B C
$str
∑∑ C
+
∑∑D E
$str
∏∏ D
+
∏∏E F
$strππ ò
+ππô ö
$str
∫∫ $
+
∫∫% &
$strªª •
;ªª• ¶
cmd
ºº 
.
ºº 
CommandType
ºº 
=
ºº  !
CommandType
ºº" -
.
ºº- .
Text
ºº. 2
;
ºº2 3
var
ææ 
reader
ææ 
=
ææ 
cmd
ææ  
.
ææ  !
ExecuteReader
ææ! .
(
ææ. /
)
ææ/ 0
;
ææ0 1
arch
¿¿ 
.
¿¿ 
	WriteLine
¿¿ 
(
¿¿ 
$str
¿¿ k
)
¿¿k l
;
¿¿l m
while
√√ 
(
√√ 
reader
√√ 
.
√√ 
Read
√√ "
(
√√" #
)
√√# $
)
√√$ %
{
ƒƒ 
arch
≈≈ 
.
≈≈ 
	WriteLine
≈≈ "
(
≈≈" #
$str
≈≈# P
,
≈≈P Q
reader
≈≈R X
[
≈≈X Y
$str
≈≈Y ]
]
≈≈] ^
.
≈≈^ _
ToString
≈≈_ g
(
≈≈g h
)
≈≈h i
,
≈≈i j
reader
≈≈k q
[
≈≈q r
$str
≈≈r x
]
≈≈x y
.
≈≈y z
ToString≈≈z Ç
(≈≈Ç É
)≈≈É Ñ
,≈≈Ñ Ö
reader
∆∆ 
[
∆∆ 
$str
∆∆ -
]
∆∆- .
.
∆∆. /
ToString
∆∆/ 7
(
∆∆7 8
)
∆∆8 9
,
∆∆9 :
reader
∆∆; A
[
∆∆A B
$str
∆∆B M
]
∆∆M N
.
∆∆N O
ToString
∆∆O W
(
∆∆W X
)
∆∆X Y
,
∆∆Y Z
reader
∆∆[ a
[
∆∆a b
$str
∆∆b g
]
∆∆g h
.
∆∆h i
ToString
∆∆i q
(
∆∆q r
)
∆∆r s
,
∆∆s t
reader
«« 
[
«« 
$str
«« &
]
««& '
.
««' (
ToString
««( 0
(
««0 1
)
««1 2
,
««2 3
reader
««4 :
[
««: ;
$str
««; G
]
««G H
.
««H I
ToString
««I Q
(
««Q R
)
««R S
,
««S T
reader
««U [
[
««[ \
$str
««\ g
]
««g h
.
««h i
ToString
««i q
(
««q r
)
««r s
,
««s t
reader
»» 
[
»» 
$str
»» +
]
»»+ ,
.
»», -
ToString
»»- 5
(
»»5 6
)
»»6 7
)
»»7 8
;
»»8 9
}
…… 
reader
   
.
   
Close
   
(
   
)
   
;
   
reader
ÀÀ 
=
ÀÀ 
null
ÀÀ 
;
ÀÀ 
}
ÃÃ 
arch
ŒŒ 
.
ŒŒ 
Close
ŒŒ 
(
ŒŒ 
)
ŒŒ 
;
ŒŒ 
Console
““ 
.
““ 
	WriteLine
““ 
(
““ 
$str
““ v
)
““v w
;
““w x
nombre_arch
”” 
=
”” 
string
””  
.
””  !
Format
””! '
(
””' (
$str
””( M
)
””M N
;
””N O
arch
‘‘ 
=
‘‘ 
new
‘‘ 
StreamWriter
‘‘ #
(
‘‘# $"
ConfigurationManager
‘‘$ 8
.
‘‘8 9
AppSettings
‘‘9 D
[
‘‘D E
$str
‘‘E K
]
‘‘K L
+
‘‘M N
nombre_arch
‘‘O Z
,
‘‘Z [
false
‘‘\ a
)
‘‘a b
;
‘‘b c
using
◊◊ 
(
◊◊ 
var
◊◊ 
cmd
◊◊ 
=
◊◊ 
new
◊◊  
MySqlCommand
◊◊! -
(
◊◊- .
)
◊◊. /
)
◊◊/ 0
{
ÿÿ 
cmd
ŸŸ 
.
ŸŸ 

Connection
ŸŸ 
=
ŸŸ  
conn
ŸŸ! %
;
ŸŸ% &
cmd
⁄⁄ 
.
⁄⁄ 
CommandText
⁄⁄ 
=
⁄⁄  !
$str⁄⁄" Ñ
+⁄⁄Ö Ü
$str
€€ #
+
€€$ %
$str
‹‹ I
+
‹‹J K
$str
›› I
+
››J K
$str
ﬁﬁ L
+
ﬁﬁM N
$str
ﬂﬂ L
+
ﬂﬂM N
$str
‡‡ 0
+
‡‡1 2
$str
·· K
+
··L M
$str
‚‚ W
+
‚‚X Y
$str
„„  
+
„„! "
$str
‰‰ .
+
‰‰/ 0
$str
ÂÂ W
+
ÂÂX Y
$str
ÊÊ I
+
ÊÊJ K
$str
ÁÁ !
;
ÁÁ! "
cmd
ËË 
.
ËË 
CommandType
ËË 
=
ËË  !
CommandType
ËË" -
.
ËË- .
Text
ËË. 2
;
ËË2 3
var
ÍÍ 
reader
ÍÍ 
=
ÍÍ 
cmd
ÍÍ  
.
ÍÍ  !
ExecuteReader
ÍÍ! .
(
ÍÍ. /
)
ÍÍ/ 0
;
ÍÍ0 1
arch
ÏÏ 
.
ÏÏ 
	WriteLine
ÏÏ 
(
ÏÏ 
$str
ÏÏ ]
)
ÏÏ] ^
;
ÏÏ^ _
while
ÌÌ 
(
ÌÌ 
reader
ÌÌ 
.
ÌÌ 
Read
ÌÌ "
(
ÌÌ" #
)
ÌÌ# $
)
ÌÌ$ %
{
ÓÓ 
arch
ÔÔ 
.
ÔÔ 
	WriteLine
ÔÔ "
(
ÔÔ" #
$str
ÔÔ# A
,
ÔÔA B
reader
ÔÔC I
[
ÔÔI J
$str
ÔÔJ N
]
ÔÔN O
.
ÔÔO P
ToString
ÔÔP X
(
ÔÔX Y
)
ÔÔY Z
,
ÔÔZ [
reader
ÔÔ\ b
[
ÔÔb c
$str
ÔÔc i
]
ÔÔi j
.
ÔÔj k
ToString
ÔÔk s
(
ÔÔs t
)
ÔÔt u
,
ÔÔu v
reader
 
[
 
$str
 (
]
( )
.
) *
ToString
* 2
(
2 3
)
3 4
,
4 5
reader
6 <
[
< =
$str
= H
]
H I
.
I J
ToString
J R
(
R S
)
S T
,
T U
reader
ÒÒ 
[
ÒÒ 
$str
ÒÒ +
]
ÒÒ+ ,
.
ÒÒ, -
ToString
ÒÒ- 5
(
ÒÒ5 6
)
ÒÒ6 7
,
ÒÒ7 8
reader
ÒÒ9 ?
[
ÒÒ? @
$str
ÒÒ@ N
]
ÒÒN O
.
ÒÒO P
ToString
ÒÒP X
(
ÒÒX Y
)
ÒÒY Z
)
ÒÒZ [
;
ÒÒ[ \
}
ÚÚ 
reader
ÛÛ 
.
ÛÛ 
Close
ÛÛ 
(
ÛÛ 
)
ÛÛ 
;
ÛÛ 
reader
ÙÙ 
=
ÙÙ 
null
ÙÙ 
;
ÙÙ 
}
ıı 
arch
˜˜ 
.
˜˜ 
Close
˜˜ 
(
˜˜ 
)
˜˜ 
;
˜˜ 
Console
˙˙ 
.
˙˙ 
	WriteLine
˙˙ 
(
˙˙ 
$str
˙˙ u
)
˙˙u v
;
˙˙v w
nombre_arch
˚˚ 
=
˚˚ 
string
˚˚  
.
˚˚  !
Format
˚˚! '
(
˚˚' (
$str
˚˚( K
)
˚˚K L
;
˚˚L M
arch
¸¸ 
=
¸¸ 
new
¸¸ 
StreamWriter
¸¸ #
(
¸¸# $"
ConfigurationManager
¸¸$ 8
.
¸¸8 9
AppSettings
¸¸9 D
[
¸¸D E
$str
¸¸E K
]
¸¸K L
+
¸¸M N
nombre_arch
¸¸O Z
,
¸¸Z [
false
¸¸\ a
)
¸¸a b
;
¸¸b c
using
ˇˇ 
(
ˇˇ 
var
ˇˇ 
cmd
ˇˇ 
=
ˇˇ 
new
ˇˇ  
MySqlCommand
ˇˇ! -
(
ˇˇ- .
)
ˇˇ. /
)
ˇˇ/ 0
{
Ä	Ä	 
cmd
Å	Å	 
.
Å	Å	 

Connection
Å	Å	 
=
Å	Å	  
conn
Å	Å	! %
;
Å	Å	% &
cmd
Ç	Ç	 
.
Ç	Ç	 
CommandText
Ç	Ç	 
=
Ç	Ç	  !
$str
Ç	Ç	" b
+
Ç	Ç	c d
$str
É	É	 #
+
É	É	$ %
$str
Ñ	Ñ	 K
+
Ñ	Ñ	L M
$str
Ö	Ö	 L
+
Ö	Ö	M N
$str
Ü	Ü	 b
+
Ü	Ü	c d
$str
á	á	 %
+
á	á	& '
$str
à	à	  
+
à	à	! "
$str
â	â	 -
+
â	â	. /
$str
ä	ä	 Z
+
ä	ä	[ \
$strã	ã	 û
+ã	ã	ü †
$str
å	å	 5
+
å	å	6 7
$str
ç	ç	 !
;
ç	ç	! "
cmd
é	é	 
.
é	é	 
CommandType
é	é	 
=
é	é	  !
CommandType
é	é	" -
.
é	é	- .
Text
é	é	. 2
;
é	é	2 3
var
ê	ê	 
reader
ê	ê	 
=
ê	ê	 
cmd
ê	ê	  
.
ê	ê	  !
ExecuteReader
ê	ê	! .
(
ê	ê	. /
)
ê	ê	/ 0
;
ê	ê	0 1
arch
í	í	 
.
í	í	 
	WriteLine
í	í	 
(
í	í	 
$str
í	í	 K
)
í	í	K L
;
í	í	L M
while
ì	ì	 
(
ì	ì	 
reader
ì	ì	 
.
ì	ì	 
Read
ì	ì	 "
(
ì	ì	" #
)
ì	ì	# $
)
ì	ì	$ %
{
î	î	 
arch
ï	ï	 
.
ï	ï	 
	WriteLine
ï	ï	 "
(
ï	ï	" #
$str
ï	ï	# 7
,
ï	ï	7 8
reader
ï	ï	9 ?
[
ï	ï	? @
$str
ï	ï	@ D
]
ï	ï	D E
.
ï	ï	E F
ToString
ï	ï	F N
(
ï	ï	N O
)
ï	ï	O P
,
ï	ï	P Q
reader
ï	ï	R X
[
ï	ï	X Y
$str
ï	ï	Y _
]
ï	ï	_ `
.
ï	ï	` a
ToString
ï	ï	a i
(
ï	ï	i j
)
ï	ï	j k
,
ï	ï	k l
reader
ñ	ñ	 
[
ñ	ñ	 
$str
ñ	ñ	 +
]
ñ	ñ	+ ,
.
ñ	ñ	, -
ToString
ñ	ñ	- 5
(
ñ	ñ	5 6
)
ñ	ñ	6 7
,
ñ	ñ	7 8
reader
ñ	ñ	9 ?
[
ñ	ñ	? @
$str
ñ	ñ	@ N
]
ñ	ñ	N O
.
ñ	ñ	O P
ToString
ñ	ñ	P X
(
ñ	ñ	X Y
)
ñ	ñ	Y Z
)
ñ	ñ	Z [
;
ñ	ñ	[ \
}
ó	ó	 
reader
ò	ò	 
.
ò	ò	 
Close
ò	ò	 
(
ò	ò	 
)
ò	ò	 
;
ò	ò	 
reader
ô	ô	 
=
ô	ô	 
null
ô	ô	 
;
ô	ô	 
}
ö	ö	 
arch
ú	ú	 
.
ú	ú	 
Close
ú	ú	 
(
ú	ú	 
)
ú	ú	 
;
ú	ú	 
Console
û	û	 
.
û	û	 
	WriteLine
û	û	 
(
û	û	 
$str
û	û	 E
)
û	û	E F
;
û	û	F G
nombre_arch
ü	ü	 
=
ü	ü	 
string
ü	ü	  
.
ü	ü	  !
Format
ü	ü	! '
(
ü	ü	' (
$str
ü	ü	( >
)
ü	ü	> ?
;
ü	ü	? @
arch
†	†	 
=
†	†	 
new
†	†	 
StreamWriter
†	†	 #
(
†	†	# $"
ConfigurationManager
†	†	$ 8
.
†	†	8 9
AppSettings
†	†	9 D
[
†	†	D E
$str
†	†	E K
]
†	†	K L
+
†	†	M N
nombre_arch
†	†	O Z
,
†	†	Z [
false
†	†	\ a
)
†	†	a b
;
†	†	b c
using
£	£	 
(
£	£	 
var
£	£	 
cmd
£	£	 
=
£	£	 
new
£	£	  
MySqlCommand
£	£	! -
(
£	£	- .
)
£	£	. /
)
£	£	/ 0
{
§	§	 
cmd
•	•	 
.
•	•	 

Connection
•	•	 
=
•	•	  
conn
•	•	! %
;
•	•	% &
cmd
¶	¶	 
.
¶	¶	 
CommandText
¶	¶	 
=
¶	¶	  !
$str
¶	¶	" K
+
¶	¶	L M
$str
ß	ß	 k
+
ß	ß	l m
$str
®	®	 :
+
®	®	; <
$str
©	©	 I
+
©	©	J K
$str
™	™	 a
+
™	™	b c
$str
´	´	 "
;
´	´	" #
cmd
¨	¨	 
.
¨	¨	 
CommandType
¨	¨	 
=
¨	¨	  !
CommandType
¨	¨	" -
.
¨	¨	- .
Text
¨	¨	. 2
;
¨	¨	2 3
var
Æ	Æ	 
reader
Æ	Æ	 
=
Æ	Æ	 
cmd
Æ	Æ	  
.
Æ	Æ	  !
ExecuteReader
Æ	Æ	! .
(
Æ	Æ	. /
)
Æ	Æ	/ 0
;
Æ	Æ	0 1
arch
∞	∞	 
.
∞	∞	 
	WriteLine
∞	∞	 
(
∞	∞	 
$str∞	∞	 ä
)∞	∞	ä ã
;∞	∞	ã å
while
±	±	 
(
±	±	 
reader
±	±	 
.
±	±	 
Read
±	±	 "
(
±	±	" #
)
±	±	# $
)
±	±	$ %
{
≤	≤	 
arch
≥	≥	 
.
≥	≥	 
	WriteLine
≥	≥	 "
(
≥	≥	" #
$str
≥	≥	# K
,
≥	≥	K L
reader
≥	≥	M S
[
≥	≥	S T
$str
≥	≥	T ^
]
≥	≥	^ _
.
≥	≥	_ `
ToString
≥	≥	` h
(
≥	≥	h i
)
≥	≥	i j
,
≥	≥	j k
reader
≥	≥	l r
[
≥	≥	r s
$str≥	≥	s É
]≥	≥	É Ñ
.≥	≥	Ñ Ö
ToString≥	≥	Ö ç
(≥	≥	ç é
)≥	≥	é è
,≥	≥	è ê
reader
¥	¥	 
[
¥	¥	 
$str
¥	¥	 -
]
¥	¥	- .
.
¥	¥	. /
ToString
¥	¥	/ 7
(
¥	¥	7 8
)
¥	¥	8 9
,
¥	¥	9 :
reader
¥	¥	; A
[
¥	¥	A B
$str
¥	¥	B M
]
¥	¥	M N
.
¥	¥	N O
ToString
¥	¥	O W
(
¥	¥	W X
)
¥	¥	X Y
,
¥	¥	Y Z
reader
µ	µ	 
[
µ	µ	 
$str
µ	µ	 2
]
µ	µ	2 3
.
µ	µ	3 4
ToString
µ	µ	4 <
(
µ	µ	< =
)
µ	µ	= >
,
µ	µ	> ?
reader
µ	µ	@ F
[
µ	µ	F G
$str
µ	µ	G X
]
µ	µ	X Y
.
µ	µ	Y Z
ToString
µ	µ	Z b
(
µ	µ	b c
)
µ	µ	c d
,
µ	µ	d e
reader
µ	µ	f l
[
µ	µ	l m
$str
µ	µ	m 
]µ	µ	 Ä
.µ	µ	Ä Å
ToStringµ	µ	Å â
(µ	µ	â ä
)µ	µ	ä ã
,µ	µ	ã å
reader
∂	∂	 
[
∂	∂	 
$str
∂	∂	 2
]
∂	∂	2 3
.
∂	∂	3 4
ToString
∂	∂	4 <
(
∂	∂	< =
)
∂	∂	= >
,
∂	∂	> ?
reader
∂	∂	@ F
[
∂	∂	F G
$str
∂	∂	G R
]
∂	∂	R S
.
∂	∂	S T
ToString
∂	∂	T \
(
∂	∂	\ ]
)
∂	∂	] ^
)
∂	∂	^ _
;
∂	∂	_ `
}
∑	∑	 
reader
∏	∏	 
.
∏	∏	 
Close
∏	∏	 
(
∏	∏	 
)
∏	∏	 
;
∏	∏	 
reader
π	π	 
=
π	π	 
null
π	π	 
;
π	π	 
}
∫	∫	 
arch
º	º	 
.
º	º	 
Close
º	º	 
(
º	º	 
)
º	º	 
;
º	º	 
Console
¡	¡	 
.
¡	¡	 
	WriteLine
¡	¡	 
(
¡	¡	 
$str
¡	¡	 N
)
¡	¡	N O
;
¡	¡	O P
nombre_arch
¬	¬	 
=
¬	¬	 
string
¬	¬	  
.
¬	¬	  !
Format
¬	¬	! '
(
¬	¬	' (
$str
¬	¬	( D
)
¬	¬	D E
;
¬	¬	E F
arch
√	√	 
=
√	√	 
new
√	√	 
StreamWriter
√	√	 #
(
√	√	# $"
ConfigurationManager
√	√	$ 8
.
√	√	8 9
AppSettings
√	√	9 D
[
√	√	D E
$str
√	√	E K
]
√	√	K L
+
√	√	M N
nombre_arch
√	√	O Z
,
√	√	Z [
false
√	√	\ a
)
√	√	a b
;
√	√	b c
using
∆	∆	 
(
∆	∆	 
var
∆	∆	 
cmd
∆	∆	 
=
∆	∆	 
new
∆	∆	  
MySqlCommand
∆	∆	! -
(
∆	∆	- .
)
∆	∆	. /
)
∆	∆	/ 0
{
«	«	 
cmd
»	»	 
.
»	»	 

Connection
»	»	 
=
»	»	  
conn
»	»	! %
;
»	»	% &
cmd
…	…	 
.
…	…	 
CommandText
…	…	 
=
…	…	  !
$str
…	…	" =
+
…	…	> ?
$str
 	 	 |
+
 	 	} ~
$str
À	À	 7
+
À	À	8 9
$str
Ã	Ã	 @
+
Ã	Ã	A B
$str
Õ	Õ	 i
+
Õ	Õ	j k
$str
Œ	Œ	 "
;
Œ	Œ	" #
cmd
œ	œ	 
.
œ	œ	 
CommandType
œ	œ	 
=
œ	œ	  !
CommandType
œ	œ	" -
.
œ	œ	- .
Text
œ	œ	. 2
;
œ	œ	2 3
var
—	—	 
reader
—	—	 
=
—	—	 
cmd
—	—	  
.
—	—	  !
ExecuteReader
—	—	! .
(
—	—	. /
)
—	—	/ 0
;
—	—	0 1
arch
”	”	 
.
”	”	 
	WriteLine
”	”	 
(
”	”	 
$str
”	”	 p
)
”	”	p q
;
”	”	q r
while
‘	‘	 
(
‘	‘	 
reader
‘	‘	 
.
‘	‘	 
Read
‘	‘	 "
(
‘	‘	" #
)
‘	‘	# $
)
‘	‘	$ %
{
’	’	 
arch
÷	÷	 
.
÷	÷	 
	WriteLine
÷	÷	 "
(
÷	÷	" #
$str
÷	÷	# F
,
÷	÷	F G
reader
÷	÷	H N
[
÷	÷	N O
$str
÷	÷	O Y
]
÷	÷	Y Z
.
÷	÷	Z [
ToString
÷	÷	[ c
(
÷	÷	c d
)
÷	÷	d e
,
÷	÷	e f
reader
÷	÷	g m
[
÷	÷	m n
$str
÷	÷	n ~
]
÷	÷	~ 
.÷	÷	 Ä
ToString÷	÷	Ä à
(÷	÷	à â
)÷	÷	â ä
,÷	÷	ä ã
reader
◊	◊	 
[
◊	◊	 
$str
◊	◊	 -
]
◊	◊	- .
.
◊	◊	. /
ToString
◊	◊	/ 7
(
◊	◊	7 8
)
◊	◊	8 9
,
◊	◊	9 :
reader
◊	◊	; A
[
◊	◊	A B
$str
◊	◊	B M
]
◊	◊	M N
.
◊	◊	N O
ToString
◊	◊	O W
(
◊	◊	W X
)
◊	◊	X Y
,
◊	◊	Y Z
reader
ÿ	ÿ	 
[
ÿ	ÿ	 
$str
ÿ	ÿ	 .
]
ÿ	ÿ	. /
.
ÿ	ÿ	/ 0
ToString
ÿ	ÿ	0 8
(
ÿ	ÿ	8 9
)
ÿ	ÿ	9 :
,
ÿ	ÿ	: ;
reader
ÿ	ÿ	< B
[
ÿ	ÿ	B C
$str
ÿ	ÿ	C O
]
ÿ	ÿ	O P
.
ÿ	ÿ	P Q
ToString
ÿ	ÿ	Q Y
(
ÿ	ÿ	Y Z
)
ÿ	ÿ	Z [
,
ÿ	ÿ	[ \
reader
ÿ	ÿ	] c
[
ÿ	ÿ	c d
$str
ÿ	ÿ	d v
]
ÿ	ÿ	v w
.
ÿ	ÿ	w x
ToStringÿ	ÿ	x Ä
(ÿ	ÿ	Ä Å
)ÿ	ÿ	Å Ç
)
Ÿ	Ÿ	 
;
Ÿ	Ÿ	 
}
⁄	⁄	 
reader
€	€	 
.
€	€	 
Close
€	€	 
(
€	€	 
)
€	€	 
;
€	€	 
reader
‹	‹	 
=
‹	‹	 
null
‹	‹	 
;
‹	‹	 
}
›	›	 
arch
ﬂ	ﬂ	 
.
ﬂ	ﬂ	 
Close
ﬂ	ﬂ	 
(
ﬂ	ﬂ	 
)
ﬂ	ﬂ	 
;
ﬂ	ﬂ	 
if
‚	‚	 
(
‚	‚	 
ejecutar
‚	‚	 
!=
‚	‚	 
enumEjecutar
‚	‚	 (
.
‚	‚	( )
No
‚	‚	) +
)
‚	‚	+ ,
{
„	„	 
this
‰	‰	 
.
‰	‰	 
Close
‰	‰	 
(
‰	‰	 
)
‰	‰	 
;
‰	‰	 
}
Â	Â	 
}
Ê	Ê	 	
private
Ë	Ë	 
void
Ë	Ë	 
bGeneraGV_Click
Ë	Ë	 $
(
Ë	Ë	$ %
object
Ë	Ë	% +
sender
Ë	Ë	, 2
,
Ë	Ë	2 3
	EventArgs
Ë	Ë	4 =
e
Ë	Ë	> ?
)
Ë	Ë	? @
{
È	È	 	
var
Î	Î	 
lApp
Î	Î	 
=
Î	Î	 
new
Î	Î	 
List
Î	Î	 
<
Î	Î	  

Aplicacion
Î	Î	  *
>
Î	Î	* +
(
Î	Î	+ ,
)
Î	Î	, -
;
Î	Î	- .
var
Ó	Ó	 
dotEXE
Ó	Ó	 
=
Ó	Ó	 "
ConfigurationManager
Ó	Ó	 -
.
Ó	Ó	- .
AppSettings
Ó	Ó	. 9
[
Ó	Ó	9 :
$str
Ó	Ó	: B
]
Ó	Ó	B C
;
Ó	Ó	C D
var
Ô	Ô	 
listaDeprecados
Ô	Ô	 
=
Ô	Ô	  !
new
Ô	Ô	" %
List
Ô	Ô	& *
<
Ô	Ô	* +
string
Ô	Ô	+ 1
>
Ô	Ô	1 2
(
Ô	Ô	2 3
)
Ô	Ô	3 4
{
Ô	Ô	5 6
$str
Ô	Ô	7 >
,
Ô	Ô	> ?
$str
Ô	Ô	@ G
,
Ô	Ô	G H
$str
Ô	Ô	I P
,
Ô	Ô	P Q
$str
Ô	Ô	R Y
,
Ô	Ô	Y Z
$str
Ô	Ô	[ b
,
Ô	Ô	b c
$str
Ô	Ô	d k
,
Ô	Ô	k l
$str
Ô	Ô	m t
,
Ô	Ô	t u
$str
Ô	Ô	v }
,
Ô	Ô	} ~
$strÔ	Ô	 Ü
,Ô	Ô	Ü á
$strÔ	Ô	à è
,Ô	Ô	è ê
$strÔ	Ô	ë ò
,Ô	Ô	ò ô
$strÔ	Ô	ö °
,Ô	Ô	° ¢
$strÔ	Ô	£ ™
,Ô	Ô	™ ´
$strÔ	Ô	¨ ≥
,Ô	Ô	≥ ¥
$strÔ	Ô	µ º
}Ô	Ô	Ω æ
;Ô	Ô	æ ø
var
Ò	Ò	 
sql
Ò	Ò	 
=
Ò	Ò	 
$str
Ò	Ò	 
;
Ò	Ò	 
sql
Ú	Ú	 
=
Ú	Ú	 
$str
Ú	Ú	 C
;
Ú	Ú	C D
using
â
â
 
(
â
â
 
var
â
â
 
cmd
â
â
 
=
â
â
 
new
â
â
  
MySqlCommand
â
â
! -
(
â
â
- .
sql
â
â
. 1
,
â
â
1 2
conn
â
â
3 7
)
â
â
7 8
)
â
â
8 9
{
ä
ä
 
cmd
ã
ã
 
.
ã
ã
 
CommandType
ã
ã
 
=
ã
ã
  !
CommandType
ã
ã
" -
.
ã
ã
- .
Text
ã
ã
. 2
;
ã
ã
2 3
using
ç
ç
 
(
ç
ç
 
var
ç
ç
 
reader
ç
ç
 !
=
ç
ç
" #
cmd
ç
ç
$ '
.
ç
ç
' (
ExecuteReader
ç
ç
( 5
(
ç
ç
5 6
)
ç
ç
6 7
)
ç
ç
7 8
{
é
é
 
while
è
è
 
(
è
è
 
reader
è
è
 !
.
è
è
! "
Read
è
è
" &
(
è
è
& '
)
è
è
' (
)
è
è
( )
{
ê
ê
 
lApp
ë
ë
 
.
ë
ë
 
Add
ë
ë
  
(
ë
ë
  !
new
ë
ë
! $

Aplicacion
ë
ë
% /
(
ë
ë
/ 0
)
ë
ë
0 1
{
ë
ë
2 3
Id
ë
ë
4 6
=
ë
ë
7 8
reader
ë
ë
9 ?
[
ë
ë
? @
$str
ë
ë
@ D
]
ë
ë
D E
.
ë
ë
E F
ToString
ë
ë
F N
(
ë
ë
N O
)
ë
ë
O P
,
ë
ë
P Q
Name
ë
ë
R V
=
ë
ë
W X
reader
ë
ë
Y _
[
ë
ë
_ `
$str
ë
ë
` f
]
ë
ë
f g
.
ë
ë
g h
ToString
ë
ë
h p
(
ë
ë
p q
)
ë
ë
q r
}
ë
ë
s t
)
ë
ë
t u
;
ë
ë
u v
}
í
í
 
}
ì
ì
 
}
î
î
 
var
ñ
ñ
 
nombre_arch_cmd
ñ
ñ
 
=
ñ
ñ
  !"
ConfigurationManager
ñ
ñ
" 6
.
ñ
ñ
6 7
AppSettings
ñ
ñ
7 B
[
ñ
ñ
B C
$str
ñ
ñ
C K
]
ñ
ñ
K L
+
ñ
ñ
M N
$str
ñ
ñ
O `
;
ñ
ñ
` a
var
ó
ó
 
arch_cmd
ó
ó
 
=
ó
ó
 
new
ó
ó
 
StreamWriter
ó
ó
 +
(
ó
ó
+ ,
nombre_arch_cmd
ó
ó
, ;
,
ó
ó
; <
false
ó
ó
= B
)
ó
ó
B C
;
ó
ó
C D
var
ô
ô
 
st_ServDeprecado
ô
ô
  
=
ô
ô
! ""
ConfigurationManager
ô
ô
# 7
.
ô
ô
7 8
AppSettings
ô
ô
8 C
[
ô
ô
C D
$str
ô
ô
D Z
]
ô
ô
Z [
;
ô
ô
[ \
var
ö
ö
 
st_ServActivo
ö
ö
 
=
ö
ö
 "
ConfigurationManager
ö
ö
  4
.
ö
ö
4 5
AppSettings
ö
ö
5 @
[
ö
ö
@ A
$str
ö
ö
A T
]
ö
ö
T U
;
ö
ö
U V
var
õ
õ
 
st_Operacion
õ
õ
 
=
õ
õ
 "
ConfigurationManager
õ
õ
 3
.
õ
õ
3 4
AppSettings
õ
õ
4 ?
[
õ
õ
? @
$str
õ
õ
@ N
]
õ
õ
N O
;
õ
õ
O P
var
ú
ú
 
st_Servicio
ú
ú
 
=
ú
ú
 "
ConfigurationManager
ú
ú
 2
.
ú
ú
2 3
AppSettings
ú
ú
3 >
[
ú
ú
> ?
$str
ú
ú
? L
]
ú
ú
L M
;
ú
ú
M N
foreach
û
û
 
(
û
û
 
var
û
û
 
app
û
û
 
in
û
û
 
lApp
û
û
  $
)
û
û
$ %
{
ü
ü
 
var
°
°
 
lInv
°
°
 
=
°
°
 
new
°
°
 
List
°
°
 #
<
°
°
# $
string
°
°
$ *
>
°
°
* +
(
°
°
+ ,
)
°
°
, -
;
°
°
- .
var
¢
¢
 
lServ
¢
¢
 
=
¢
¢
 
new
¢
¢
 
List
¢
¢
  $
<
¢
¢
$ %
Servicio
¢
¢
% -
>
¢
¢
- .
(
¢
¢
. /
)
¢
¢
/ 0
;
¢
¢
0 1
sql
•
•
 
=
•
•
 
$str•
•
 ï
+•
•
ñ ó
$str
¶
¶
 #
+
¶
¶
$ %
$str
ß
ß
 I
+
ß
ß
J K
$str
®
®
 I
+
®
®
J K
$str
©
©
 <
+
©
©
= >
$str
™
™
 L
+
™
™
M N
$str
´
´
 L
+
´
´
M N
$str
¨
¨
 #
+
¨
¨
$ %
app
¨
¨
& )
.
¨
¨
) *
Id
¨
¨
* ,
+
¨
¨
- .
$str
¨
¨
/ k
+
¨
¨
l m
$str
≠
≠
 H
+
≠
≠
I J
$str
Æ
Æ
 #
;
Æ
Æ
# $
using
∞
∞
 
(
∞
∞
 
var
∞
∞
 
cmd
∞
∞
 
=
∞
∞
  
new
∞
∞
! $
MySqlCommand
∞
∞
% 1
(
∞
∞
1 2
sql
∞
∞
2 5
,
∞
∞
5 6
conn
∞
∞
7 ;
)
∞
∞
; <
)
∞
∞
< =
{
±
±
 
cmd
≤
≤
 
.
≤
≤
 
CommandType
≤
≤
 #
=
≤
≤
$ %
CommandType
≤
≤
& 1
.
≤
≤
1 2
Text
≤
≤
2 6
;
≤
≤
6 7
using
¥
¥
 
(
¥
¥
 
var
¥
¥
 
reader
¥
¥
 %
=
¥
¥
& '
cmd
¥
¥
( +
.
¥
¥
+ ,
ExecuteReader
¥
¥
, 9
(
¥
¥
9 :
)
¥
¥
: ;
)
¥
¥
; <
{
µ
µ
 
while
∂
∂
 
(
∂
∂
 
reader
∂
∂
 %
.
∂
∂
% &
Read
∂
∂
& *
(
∂
∂
* +
)
∂
∂
+ ,
)
∂
∂
, -
{
∑
∑
 
var
∏
∏
 
serv
∏
∏
  $
=
∏
∏
% &
new
∏
∏
' *
Servicio
∏
∏
+ 3
(
∏
∏
3 4
)
∏
∏
4 5
{
∏
∏
6 7
Id
∏
∏
8 :
=
∏
∏
; <
reader
∏
∏
= C
[
∏
∏
C D
$str
∏
∏
D P
]
∏
∏
P Q
.
∏
∏
Q R
ToString
∏
∏
R Z
(
∏
∏
Z [
)
∏
∏
[ \
,
∏
∏
\ ]
Name
∏
∏
^ b
=
∏
∏
c d
reader
∏
∏
e k
[
∏
∏
k l
$str
∏
∏
l z
]
∏
∏
z {
.
∏
∏
{ |
ToString∏
∏
| Ñ
(∏
∏
Ñ Ö
)∏
∏
Ö Ü
,∏
∏
Ü á
Version∏
∏
à è
=∏
∏
ê ë
reader∏
∏
í ò
[∏
∏
ò ô
$str∏
∏
ô ™
]∏
∏
™ ´
.∏
∏
´ ¨
ToString∏
∏
¨ ¥
(∏
∏
¥ µ
)∏
∏
µ ∂
}∏
∏
∑ ∏
;∏
∏
∏ π
var
π
π
 
oper
π
π
  $
=
π
π
% &
new
π
π
' *
	Operacion
π
π
+ 4
(
π
π
4 5
)
π
π
5 6
{
π
π
7 8
Id
π
π
9 ;
=
π
π
< =
reader
π
π
> D
[
π
π
D E
$str
π
π
E I
]
π
π
I J
.
π
π
J K
ToString
π
π
K S
(
π
π
S T
)
π
π
T U
,
π
π
U V
Name
π
π
W [
=
π
π
\ ]
reader
π
π
^ d
[
π
π
d e
$str
π
π
e k
]
π
π
k l
.
π
π
l m
ToString
π
π
m u
(
π
π
u v
)
π
π
v w
,
π
π
w x
Versionπ
π
y Ä
=π
π
Å Ç
readerπ
π
É â
[π
π
â ä
$strπ
π
ä ò
]π
π
ò ô
.π
π
ô ö
ToStringπ
π
ö ¢
(π
π
¢ £
)π
π
£ §
}π
π
• ¶
;π
π
¶ ß

guardaOper
ª
ª
 &
(
ª
ª
& '
ref
ª
ª
' *
lServ
ª
ª
+ 0
,
ª
ª
0 1
serv
ª
ª
2 6
,
ª
ª
6 7
oper
ª
ª
8 <
)
ª
ª
< =
;
ª
ª
= >
lInv
Ω
Ω
  
.
Ω
Ω
  !
Add
Ω
Ω
! $
(
Ω
Ω
$ %
oper
Ω
Ω
% )
.
Ω
Ω
) *
Id
Ω
Ω
* ,
)
Ω
Ω
, -
;
Ω
Ω
- .
}
æ
æ
 
}
ø
ø
 
}
¿
¿
 
if
√
√
 
(
√
√
 
lInv
√
√
 
.
√
√
 
Count
√
√
 
>
√
√
  
$num
√
√
! "
)
√
√
" #
{
ƒ
ƒ
 
var
∆
∆
 
nombre_arch
∆
∆
 #
=
∆
∆
$ %"
ConfigurationManager
∆
∆
& :
.
∆
∆
: ;
AppSettings
∆
∆
; F
[
∆
∆
F G
$str
∆
∆
G O
]
∆
∆
O P
+
∆
∆
Q R
string
∆
∆
S Y
.
∆
∆
Y Z
Format
∆
∆
Z `
(
∆
∆
` a
$str
∆
∆
a m
,
∆
∆
m n
app
∆
∆
o r
.
∆
∆
r s
Id
∆
∆
s u
,
∆
∆
u v 
RemoveAcentuation∆
∆
w à
(∆
∆
à â
app∆
∆
â å
.∆
∆
å ç
Name∆
∆
ç ë
.∆
∆
ë í
Trim∆
∆
í ñ
(∆
∆
ñ ó
)∆
∆
ó ò
)∆
∆
ò ô
)∆
∆
ô ö
;∆
∆
ö õ
var
«
«
 
nombre_arch_corto
«
«
 )
=
«
«
* +"
ConfigurationManager
«
«
, @
.
«
«
@ A
AppSettings
«
«
A L
[
«
«
L M
$str
«
«
M U
]
«
«
U V
+
«
«
W X
string
«
«
Y _
.
«
«
_ `
Format
«
«
` f
(
«
«
f g
$str
«
«
g p
,
«
«
p q
app
«
«
r u
.
«
«
u v
Id
«
«
v x
)
«
«
x y
;
«
«
y z
var
»
»
 
arch
»
»
 
=
»
»
 
new
»
»
 "
StreamWriter
»
»
# /
(
»
»
/ 0
nombre_arch
»
»
0 ;
,
»
»
; <
false
»
»
= B
)
»
»
B C
;
»
»
C D
Console
…
…
 
.
…
…
 
	WriteLine
…
…
 %
(
…
…
% &
$str
…
…
& <
,
…
…
< =
nombre_arch
…
…
> I
)
…
…
I J
;
…
…
J K
arch
Ã
Ã
 
.
Ã
Ã
 
	WriteLine
Ã
Ã
 "
(
Ã
Ã
" #
$str
Ã
Ã
# .
)
Ã
Ã
. /
;
Ã
Ã
/ 0
arch
Õ
Õ
 
.
Õ
Õ
 
	WriteLine
Õ
Õ
 "
(
Õ
Õ
" #
$str
Õ
Õ
# 6
,
Õ
Õ
6 7
app
Õ
Õ
8 ;
.
Õ
Õ
; <
Id
Õ
Õ
< >
)
Õ
Õ
> ?
;
Õ
Õ
? @
arch
Œ
Œ
 
.
Œ
Œ
 
	WriteLine
Œ
Œ
 "
(
Œ
Œ
" #
$str
Œ
Œ
# &
)
Œ
Œ
& '
;
Œ
Œ
' (
arch
œ
œ
 
.
œ
œ
 
	WriteLine
œ
œ
 "
(
œ
œ
" #
$str
œ
œ
# J
)
œ
œ
J K
;
œ
œ
K L
arch
—
—
 
.
—
—
 
	WriteLine
—
—
 "
(
—
—
" #
$str
—
—
# 7
)
—
—
7 8
;
—
—
8 9
arch
“
“
 
.
“
“
 
	WriteLine
“
“
 "
(
“
“
" #
$str
“
“
# ?
,
“
“
? @
app
“
“
A D
.
“
“
D E
Id
“
“
E G
,
“
“
G H
app
“
“
I L
.
“
“
L M
Name
“
“
M Q
,
“
“
Q R
st_Servicio
“
“
S ^
)
“
“
^ _
;
“
“
_ `
arch
”
”
 
.
”
”
 
	WriteLine
”
”
 "
(
”
”
" #
$str
”
”
# '
)
”
”
' (
;
”
”
( )
arch
÷
÷
 
.
÷
÷
 
	WriteLine
÷
÷
 "
(
÷
÷
" #
$str
÷
÷
# 0
)
÷
÷
0 1
;
÷
÷
1 2
foreach
◊
◊
 
(
◊
◊
 
var
◊
◊
  
item
◊
◊
! %
in
◊
◊
& (
lServ
◊
◊
) .
)
◊
◊
. /
{
ÿ
ÿ
 
arch
Ÿ
Ÿ
 
.
Ÿ
Ÿ
 
	WriteLine
Ÿ
Ÿ
 &
(
Ÿ
Ÿ
& '
$str
Ÿ
Ÿ
' >
,
Ÿ
Ÿ
> ?
item
Ÿ
Ÿ
@ D
.
Ÿ
Ÿ
D E
Id
Ÿ
Ÿ
E G
)
Ÿ
Ÿ
G H
;
Ÿ
Ÿ
H I
arch
⁄
⁄
 
.
⁄
⁄
 
	WriteLine
⁄
⁄
 &
(
⁄
⁄
& '
$str
⁄
⁄
' +
)
⁄
⁄
+ ,
;
⁄
⁄
, -
if
€
€
 
(
€
€
 
listaDeprecados
€
€
 +
.
€
€
+ ,
Contains
€
€
, 4
(
€
€
4 5
item
€
€
5 9
.
€
€
9 :
Id
€
€
: <
)
€
€
< =
)
€
€
= >
{
‹
‹
 
arch
›
›
  
.
›
›
  !
	WriteLine
›
›
! *
(
›
›
* +
$str
›
›
+ O
,
›
›
O P
item
›
›
Q U
.
›
›
U V
Name
›
›
V Z
,
›
›
Z [
item
›
›
\ `
.
›
›
` a
Version
›
›
a h
)
›
›
h i
;
›
›
i j
arch
ﬁ
ﬁ
  
.
ﬁ
ﬁ
  !
	WriteLine
ﬁ
ﬁ
! *
(
ﬁ
ﬁ
* +
$str
ﬁ
ﬁ
+ 1
,
ﬁ
ﬁ
1 2
st_ServDeprecado
ﬁ
ﬁ
3 C
)
ﬁ
ﬁ
C D
;
ﬁ
ﬁ
D E
}
ﬂ
ﬂ
 
else
‡
‡
 
{
·
·
 
arch
‚
‚
  
.
‚
‚
  !
	WriteLine
‚
‚
! *
(
‚
‚
* +
$str
‚
‚
+ C
,
‚
‚
C D
item
‚
‚
E I
.
‚
‚
I J
Name
‚
‚
J N
,
‚
‚
N O
item
‚
‚
P T
.
‚
‚
T U
Version
‚
‚
U \
)
‚
‚
\ ]
;
‚
‚
] ^
arch
„
„
  
.
„
„
  !
	WriteLine
„
„
! *
(
„
„
* +
$str
„
„
+ 1
,
„
„
1 2
st_ServActivo
„
„
3 @
)
„
„
@ A
;
„
„
A B
}
‰
‰
 
foreach
Ê
Ê
 
(
Ê
Ê
  !
var
Ê
Ê
! $
item2
Ê
Ê
% *
in
Ê
Ê
+ -
item
Ê
Ê
. 2
.
Ê
Ê
2 3
Operaciones
Ê
Ê
3 >
)
Ê
Ê
> ?
{
Á
Á
 
arch
Ë
Ë
  
.
Ë
Ë
  !
	WriteLine
Ë
Ë
! *
(
Ë
Ë
* +
$str
Ë
Ë
+ M
,
Ë
Ë
M N
item2
Ë
Ë
O T
.
Ë
Ë
T U
Id
Ë
Ë
U W
,
Ë
Ë
W X
item2
Ë
Ë
Y ^
.
Ë
Ë
^ _
Name
Ë
Ë
_ c
,
Ë
Ë
c d
item2
Ë
Ë
e j
.
Ë
Ë
j k
Version
Ë
Ë
k r
,
Ë
Ë
r s
st_OperacionË
Ë
t Ä
)Ë
Ë
Ä Å
;Ë
Ë
Å Ç
}
È
È
 
arch
Î
Î
 
.
Î
Î
 
	WriteLine
Î
Î
 &
(
Î
Î
& '
$str
Î
Î
' +
)
Î
Î
+ ,
;
Î
Î
, -
}
Ï
Ï
 
arch
Ô
Ô
 
.
Ô
Ô
 
	WriteLine
Ô
Ô
 "
(
Ô
Ô
" #
$str
Ô
Ô
# 1
)
Ô
Ô
1 2
;
Ô
Ô
2 3
foreach


 
(


 
var


  
item


! %
in


& (
lInv


) -
)


- .
{
Ò
Ò
 
arch
Ú
Ú
 
.
Ú
Ú
 
	WriteLine
Ú
Ú
 &
(
Ú
Ú
& '
$str
Ú
Ú
' 2
,
Ú
Ú
2 3
app
Ú
Ú
4 7
.
Ú
Ú
7 8
Id
Ú
Ú
8 :
,
Ú
Ú
: ;
item
Ú
Ú
< @
)
Ú
Ú
@ A
;
Ú
Ú
A B
}
Û
Û
 
arch
ı
ı
 
.
ı
ı
 
	WriteLine
ı
ı
 "
(
ı
ı
" #
$str
ı
ı
# &
)
ı
ı
& '
;
ı
ı
' (
arch
˜
˜
 
.
˜
˜
 
Close
˜
˜
 
(
˜
˜
 
)
˜
˜
  
;
˜
˜
  !
arch_cmd
ˇ
ˇ
 
.
ˇ
ˇ
 
	WriteLine
ˇ
ˇ
 &
(
ˇ
ˇ
& '
$str
ˇ
ˇ
' F
,
ˇ
ˇ
F G
dotEXE
ˇ
ˇ
H N
,
ˇ
ˇ
N O
nombre_arch_corto
ˇ
ˇ
P a
,
ˇ
ˇ
a b
nombre_arch
ˇ
ˇ
c n
)
ˇ
ˇ
n o
;
ˇ
ˇ
o p
}
ÅÅ 
}
ÇÇ 
arch_cmd
ÉÉ 
.
ÉÉ 
Close
ÉÉ 
(
ÉÉ 
)
ÉÉ 
;
ÉÉ 
if
ÖÖ 
(
ÖÖ 
ejecutar
ÖÖ 
!=
ÖÖ 
enumEjecutar
ÖÖ (
.
ÖÖ( )
No
ÖÖ) +
)
ÖÖ+ ,
{
ÜÜ 
this
áá 
.
áá 
Close
áá 
(
áá 
)
áá 
;
áá 
}
àà 
}
ââ 	
private
ãã 
string
ãã 
RemoveAcentuation
ãã (
(
ãã( )
string
ãã) /
text
ãã0 4
)
ãã4 5
{
åå 	
return
çç 
System
éé 
.
éé 
Web
éé 
.
éé 
HttpUtility
éé &
.
éé& '
	UrlDecode
éé' 0
(
éé0 1
System
èè 
.
èè 
Web
èè 
.
èè 
HttpUtility
èè *
.
èè* +
	UrlEncode
èè+ 4
(
èè4 5
text
êê 
,
êê 
System
êê $
.
êê$ %
Text
êê% )
.
êê) *
Encoding
êê* 2
.
êê2 3
GetEncoding
êê3 >
(
êê> ?
$str
êê? K
)
êêK L
)
êêL M
)
êêM N
;
êêN O
}
ëë 	
private
ìì 
void
ìì 

guardaOper
ìì 
(
ìì  
ref
ìì  #
List
ìì$ (
<
ìì( )
Servicio
ìì) 1
>
ìì1 2
lServ
ìì3 8
,
ìì8 9
Servicio
ìì: B
servicio
ììC K
,
ììK L
	Operacion
ììM V
oper
ììW [
)
ìì[ \
{
îî 	
if
ññ 
(
ññ 
lServ
ññ 
.
ññ 
Exists
ññ 
(
ññ 
m
ññ 
=>
ññ !
m
ññ" #
.
ññ# $
Id
ññ$ &
==
ññ' )
servicio
ññ* 2
.
ññ2 3
Id
ññ3 5
)
ññ5 6
)
ññ6 7
{
óó 
var
òò 
x
òò 
=
òò 
lServ
òò 
.
òò 
Find
òò "
(
òò" #
m
òò# $
=>
òò% '
m
òò( )
.
òò) *
Id
òò* ,
==
òò- /
servicio
òò0 8
.
òò8 9
Id
òò9 ;
)
òò; <
;
òò< =
x
ôô 
.
ôô 
Operaciones
ôô 
.
ôô 
Add
ôô !
(
ôô! "
oper
ôô" &
)
ôô& '
;
ôô' (
}
öö 
else
õõ 
{
úú 
servicio
ûû 
.
ûû 
Operaciones
ûû $
=
ûû% &
new
ûû' *
List
ûû+ /
<
ûû/ 0
	Operacion
ûû0 9
>
ûû9 :
(
ûû: ;
)
ûû; <
;
ûû< =
servicio
üü 
.
üü 
Operaciones
üü $
.
üü$ %
Add
üü% (
(
üü( )
oper
üü) -
)
üü- .
;
üü. /
lServ
†† 
.
†† 
Add
†† 
(
†† 
servicio
†† "
)
††" #
;
††# $
}
°° 
}
££ 	
}
•• 
}¶¶ ¬
HC:\Rodrigo\source\repos\Proyectos DTV\revisaProyectosSCA\PairKeyValue.cs
	namespace 	
revisaProyectosSCA
 
{ 
class 	
PairKeyValue
 
{		 
public

 
long

 
Id

 
{

 
get

 
;

 
set

 !
;

! "
}

# $
public 
string 
Name 
{ 
get  
;  !
set" %
;% &
}' (
public 
string 
Key 
{ 
get 
;  
set! $
;$ %
}& '
public 
PairKeyValue 
( 
long  
id! #
,# $
string% +
name, 0
)0 1
{ 	
this 
. 
Id 
= 
id 
; 
this 
. 
Name 
= 
name 
; 
} 	
public 
PairKeyValue 
( 
long  
id! #
,# $
string% +
name, 0
,0 1
string2 8
key9 <
)< =
{ 	
this 
. 
Id 
= 
id 
; 
this 
. 
Name 
= 
name 
; 
this 
. 
Key 
= 
key 
; 
} 	
} 
} ∑

CC:\Rodrigo\source\repos\Proyectos DTV\revisaProyectosSCA\Program.cs
	namespace 	
revisaProyectosSCA
 
{ 
class 	
Program
 
{ 
[ 	
	STAThread	 
] 
static		 
void		 
Main		 
(		 
string		 
[		  
]		  !
args		" &
)		& '
{

 	
Application 
. 
EnableVisualStyles *
(* +
)+ ,
;, -
Application 
. -
!SetCompatibleTextRenderingDefault 9
(9 :
false: ?
)? @
;@ A
if 
( 
args 
. 
Length 
> 
$num 
)  
{ 
Application 
. 
Run 
(  
new  #
Form3$ )
() *
args* .
[. /
$num/ 0
]0 1
)1 2
)2 3
;3 4
} 
else 
{ 
Application 
. 
Run 
(  
new  #
Form3$ )
() *
)* +
)+ ,
;, -
} 
} 	
} 
} ˛
SC:\Rodrigo\source\repos\Proyectos DTV\revisaProyectosSCA\Properties\AssemblyInfo.cs
[ 
assembly 	
:	 

AssemblyTitle 
( 
$str ,
), -
]- .
[		 
assembly		 	
:			 

AssemblyDescription		 
(		 
$str		 !
)		! "
]		" #
[

 
assembly

 	
:

	 
!
AssemblyConfiguration

  
(

  !
$str

! #
)

# $
]

$ %
[ 
assembly 	
:	 

AssemblyCompany 
( 
$str &
)& '
]' (
[ 
assembly 	
:	 

AssemblyProduct 
( 
$str .
). /
]/ 0
[ 
assembly 	
:	 

AssemblyCopyright 
( 
$str 9
)9 :
]: ;
[ 
assembly 	
:	 

AssemblyTrademark 
( 
$str 
)  
]  !
[ 
assembly 	
:	 

AssemblyCulture 
( 
$str 
) 
] 
[ 
assembly 	
:	 


ComVisible 
( 
false 
) 
] 
[ 
assembly 	
:	 

Guid 
( 
$str 6
)6 7
]7 8
[## 
assembly## 	
:##	 

AssemblyVersion## 
(## 
$str## $
)##$ %
]##% &
[$$ 
assembly$$ 	
:$$	 

AssemblyFileVersion$$ 
($$ 
$str$$ (
)$$( )
]$$) *Ös
PC:\Rodrigo\source\repos\Proyectos DTV\revisaProyectosSCA\Clases\ScanDirectory.cs
	namespace 	
ScanDirectory
 
{ 
public		 
enum		 
ScanDirectoryAction		  
{

 
Enter 
, 
Leave 
} 
public 
class 
FileEventArgs 
: 
	EventArgs '
{ 
private"" 	
FileEventArgs""
 
("" 
)"" 
{"" 
}"" 
internal(( 

FileEventArgs(( 
((( 
FileInfo(( !
fileInfo((" *
)((* +
{)) 
if** 
(** 
fileInfo** 
==** 
null** 
)** 
throw** 
new** "!
ArgumentNullException**# 8
(**8 9
$str**9 C
)**C D
;**D E
	_fileInfo-- 
=-- 
fileInfo-- 
;-- 
}.. 
private44 	
bool44
 
_cancel44 
;44 
private55 	
FileInfo55
 
	_fileInfo55 
;55 
public;; 
FileInfo;;	 
Info;; 
{<< 
get== 
{== 
return==	 
	_fileInfo== 
;== 
}== 
}>> 
publicFF 
boolFF	 
CancelFF 
{GG 
getHH 
{HH 
returnHH	 
_cancelHH 
;HH 
}HH 
setII 
{II 
_cancelII	 
=II 
valueII 
;II 
}II 
}JJ 
}MM 
publicVV 
classVV 
DirectoryEventArgsVV  
:VV! "
	EventArgsVV# ,
{WW 
private]] 	
DirectoryEventArgs]]
 
(]] 
)]] 
{]]  
}]]! "
internaldd 

DirectoryEventArgsdd 
(dd 
DirectoryInfodd +
	directorydd, 5
,dd5 6
ScanDirectoryActiondd7 J
actionddK Q
)ddQ R
{ee 
ifff 
(ff 
	directoryff 
==ff 
nullff 
)ff 
throwff 
newff  #!
ArgumentNullExceptionff$ 9
(ff9 :
$strff: E
)ffE F
;ffF G
_directoryInfoii 
=ii 
	directoryii 
;ii 
_actionjj 

=jj 
actionjj 
;jj 
}kk 
privateqq 	
DirectoryInfoqq
 
_directoryInfoqq '
;qq' (
privaterr 	
ScanDirectoryActionrr
 
_actionrr %
;rr% &
privatess 	
boolss
 
_cancelss 
;ss 
publicyy 
DirectoryInfoyy	 
Infoyy 
{zz 
get{{ 
{{{ 
return{{	 
_directoryInfo{{ 
;{{ 
}{{  !
}|| 
public
ÇÇ !
ScanDirectoryAction
ÇÇ	 
Action
ÇÇ #
{
ÉÉ 
get
ÑÑ 
{
ÑÑ 
return
ÑÑ	 
_action
ÑÑ 
;
ÑÑ 
}
ÑÑ 
}
ÖÖ 
public
çç 
bool
çç	 
Cancel
çç 
{
éé 
get
èè 
{
èè 
return
èè	 
_cancel
èè 
;
èè 
}
èè 
set
êê 
{
êê 
_cancel
êê	 
=
êê 
value
êê 
;
êê 
}
êê 
}
ëë 
}
îî 
public
õõ 
class
õõ 
ScanDirectory
õõ 
{
úú 
private
ùù 	
const
ùù
 
string
ùù 
_patternAllFiles
ùù '
=
ùù( )
$str
ùù* /
;
ùù/ 0
public
§§ 
delegate
§§	 
void
§§ 
FileEventHandler
§§ '
(
§§' (
object
§§( .
sender
§§/ 5
,
§§5 6
FileEventArgs
§§7 D
e
§§E F
)
§§F G
;
§§G H
public
©© 
event
©©	 
FileEventHandler
©© 
	FileEvent
©©  )
;
©©) *
private
ØØ 	
bool
ØØ
 
RaiseFileEvent
ØØ 
(
ØØ 
FileInfo
ØØ &
fileInfo
ØØ' /
)
ØØ/ 0
{
∞∞ 
bool
±± 
continueScan
±± 
=
±± 
true
±± 
;
±± 
FileEventArgs
¥¥ 
args
¥¥ 
=
¥¥ 
new
¥¥ 
FileEventArgs
¥¥ )
(
¥¥) *
fileInfo
¥¥* 2
)
¥¥2 3
;
¥¥3 4
	FileEvent
∑∑ 
(
∑∑ 
this
∑∑ 
,
∑∑ 
args
∑∑ 
)
∑∑ 
;
∑∑ 
continueScan
ππ 
=
ππ 
!
ππ 
args
ππ 
.
ππ 
Cancel
ππ 
;
ππ 
return
ªª 	
continueScan
ªª
 
;
ªª 
}
ºº 
public
≈≈ 
delegate
≈≈	 
void
≈≈ #
DirectoryEventHandler
≈≈ ,
(
≈≈, -
object
≈≈- 3
sender
≈≈4 :
,
≈≈: ; 
DirectoryEventArgs
≈≈< N
e
≈≈O P
)
≈≈P Q
;
≈≈Q R
public
   
event
  	 #
DirectoryEventHandler
   $
DirectoryEvent
  % 3
;
  3 4
private
““ 	
bool
““
 !
RaiseDirectoryEvent
““ "
(
““" #
DirectoryInfo
““# 0
	directory
““1 :
,
““: ;!
ScanDirectoryAction
““< O
action
““P V
)
““V W
{
”” 
bool
‘‘ 
continueScan
‘‘ 
=
‘‘ 
true
‘‘ 
;
‘‘ 
if
◊◊ 
(
◊◊ 
	FileEvent
◊◊ 
!=
◊◊ 
null
◊◊ 
)
◊◊ 
{
ÿÿ  
DirectoryEventArgs
⁄⁄ 
args
⁄⁄ 
=
⁄⁄ 
new
⁄⁄ ! 
DirectoryEventArgs
⁄⁄" 4
(
⁄⁄4 5
	directory
⁄⁄5 >
,
⁄⁄> ?
action
⁄⁄@ F
)
⁄⁄F G
;
⁄⁄G H
DirectoryEvent
›› 
(
›› 
this
›› 
,
›› 
args
›› 
)
›› 
;
›› 
continueScan
ﬂﬂ 
=
ﬂﬂ 
!
ﬂﬂ 
args
ﬂﬂ 
.
ﬂﬂ 
Cancel
ﬂﬂ 
;
ﬂﬂ  
}
‡‡ 
return
·· 	
continueScan
··
 
;
·· 
}
‚‚ 
public
ÌÌ 
bool
ÌÌ	 
WalkDirectory
ÌÌ 
(
ÌÌ 
string
ÌÌ "
path
ÌÌ# '
)
ÌÌ' (
{
ÓÓ 
if
 
(
 
path
 
==
 
null
 
||
 
path
 
.
 
Length
 "
==
# %
$num
& '
)
' (
throw
) .
new
/ 2#
ArgumentNullException
3 H
(
H I
$str
I O
)
O P
;
P Q
return
ÚÚ 	
this
ÚÚ
 
.
ÚÚ 
WalkDirectory
ÚÚ 
(
ÚÚ 
new
ÚÚ  
DirectoryInfo
ÚÚ! .
(
ÚÚ. /
path
ÚÚ/ 3
)
ÚÚ3 4
)
ÚÚ4 5
;
ÚÚ5 6
}
ÛÛ 
public
˙˙ 
bool
˙˙	 
WalkDirectory
˙˙ 
(
˙˙ 
DirectoryInfo
˙˙ )
	directory
˙˙* 3
)
˙˙3 4
{
˚˚ 
if
¸¸ 
(
¸¸ 
	directory
¸¸ 
==
¸¸ 
null
¸¸ 
)
¸¸ 
{
˝˝ 
throw
˛˛ 	
new
˛˛
 #
ArgumentNullException
˛˛ #
(
˛˛# $
$str
˛˛$ /
)
˛˛/ 0
;
˛˛0 1
}
ˇˇ 
return
ÅÅ 	
this
ÅÅ
 
.
ÅÅ 
WalkDirectories
ÅÅ 
(
ÅÅ 
	directory
ÅÅ (
)
ÅÅ( )
;
ÅÅ) *
}
ÇÇ 
public
éé 
virtual
éé	 
bool
éé 
ProcessDirectory
éé &
(
éé& '
DirectoryInfo
éé' 4
directoryInfo
éé5 B
,
ééB C!
ScanDirectoryAction
ééD W
action
ééX ^
)
éé^ _
{
èè 
if
êê 
(
êê 
DirectoryEvent
êê 
!=
êê 
null
êê 
)
êê 
{
ëë 
return
íí 
!
RaiseDirectoryEvent
íí 
(
íí 
directoryInfo
íí ,
,
íí, -
action
íí. 4
)
íí4 5
;
íí5 6
}
ìì 
return
îî 	
true
îî
 
;
îî 
}
ïï 
public
úú 
virtual
úú	 
bool
úú 
ProcessFile
úú !
(
úú! "
FileInfo
úú" *
fileInfo
úú+ 3
)
úú3 4
{
ùù 
if
üü 
(
üü 
	FileEvent
üü 
!=
üü 
null
üü 
)
üü 
{
†† 
RaiseFileEvent
°° 
(
°° 
fileInfo
°° 
)
°° 
;
°° 
}
¢¢ 
return
££ 	
true
££
 
;
££ 
}
§§ 
private
ØØ 	
bool
ØØ
 
WalkDirectories
ØØ 
(
ØØ 
DirectoryInfo
ØØ ,
	directory
ØØ- 6
)
ØØ6 7
{
∞∞ 
bool
±± 
continueScan
±± 
=
±± 
true
±± 
;
±± 
if
≥≥ 
(
≥≥ 
continueScan
≥≥ 
=
≥≥ 
this
≥≥ 
.
≥≥ 
ProcessDirectory
≥≥ +
(
≥≥+ ,
	directory
≥≥, 5
,
≥≥5 6!
ScanDirectoryAction
≥≥7 J
.
≥≥J K
Enter
≥≥K P
)
≥≥P Q
)
≥≥Q R
{
¥¥ 
if
∂∂ 
(
∂∂ 
this
∂∂ 
.
∂∂ 
	FileEvent
∂∂ 
!=
∂∂ 
null
∂∂ 
)
∂∂ 
{
∑∑ 
continueScan
∏∏ 
=
∏∏ "
WalkFilesInDirectory
∏∏ (
(
∏∏( )
	directory
∏∏) 2
)
∏∏2 3
;
∏∏3 4
}
ππ 
if
ªª 
(
ªª 
continueScan
ªª 
)
ªª 
{
ºº 
DirectoryInfo
ΩΩ 
[
ΩΩ 
]
ΩΩ 
subDirectories
ΩΩ $
=
ΩΩ% &
	directory
ΩΩ' 0
.
ΩΩ0 1
GetDirectories
ΩΩ1 ?
(
ΩΩ? @
)
ΩΩ@ A
;
ΩΩA B
foreach
øø 
(
øø 
DirectoryInfo
øø 
subDirectory
øø (
in
øø) +
subDirectories
øø, :
)
øø: ;
{
¿¿ 
if
≈≈ 
(
≈≈	 

(
≈≈
 
subDirectory
≈≈ 
.
≈≈ 

Attributes
≈≈ "
&
≈≈# $
FileAttributes
≈≈% 3
.
≈≈3 4
ReparsePoint
≈≈4 @
)
≈≈@ A
!=
≈≈B D
$num
≈≈E F
)
≈≈F G
{
∆∆ 
continue
«« 
;
«« 
}
»» 
if
   
(
  	 

!
  
 
(
   
continueScan
   
=
   
this
   
.
    
WalkDirectory
    -
(
  - .
subDirectory
  . :
)
  : ;
)
  ; <
)
  < =
{
ÀÀ 
break
ÃÃ 
;
ÃÃ 
}
ÕÕ 
}
ŒŒ 
}
œœ 
if
—— 
(
—— 
continueScan
—— 
)
—— 
{
““ 
continueScan
”” 
=
”” 
this
”” 
.
”” 
ProcessDirectory
”” )
(
””) *
	directory
””* 3
,
””3 4!
ScanDirectoryAction
””5 H
.
””H I
Leave
””I N
)
””N O
;
””O P
}
‘‘ 
}
’’ 
return
÷÷ 	
continueScan
÷÷
 
;
÷÷ 
}
◊◊ 
private
ﬁﬁ 	
bool
ﬁﬁ
 "
WalkFilesInDirectory
ﬁﬁ #
(
ﬁﬁ# $
DirectoryInfo
ﬁﬁ$ 1
	directory
ﬁﬁ2 ;
)
ﬁﬁ; <
{
ﬂﬂ 
bool
‡‡ 
continueScan
‡‡ 
=
‡‡ 
true
‡‡ 
;
‡‡ 
string
„„ 	
[
„„
 
]
„„ 
searchPatterns
„„ 
=
„„ 
_searchPattern
„„ ,
.
„„, -
Split
„„- 2
(
„„2 3
$char
„„3 6
)
„„6 7
;
„„7 8
foreach
ÊÊ 

(
ÊÊ 
string
ÊÊ 
searchPattern
ÊÊ  
in
ÊÊ! #
searchPatterns
ÊÊ$ 2
)
ÊÊ2 3
{
ÁÁ 
if
ËË 
(
ËË 
!
ËË 	
continueScan
ËË	 
)
ËË 
{
ÈÈ 
break
ÍÍ 

;
ÍÍ
 
}
ÎÎ 
foreach
ÌÌ 
(
ÌÌ 
FileInfo
ÌÌ 
file
ÌÌ 
in
ÌÌ 
	directory
ÌÌ '
.
ÌÌ' (
GetFiles
ÌÌ( 0
(
ÌÌ0 1
searchPattern
ÌÌ1 >
)
ÌÌ> ?
)
ÌÌ? @
{
ÓÓ 
if
ÔÔ 
(
ÔÔ 	
!
ÔÔ	 

(
ÔÔ
 
continueScan
ÔÔ 
=
ÔÔ 
this
ÔÔ 
.
ÔÔ 
ProcessFile
ÔÔ *
(
ÔÔ* +
file
ÔÔ+ /
)
ÔÔ/ 0
)
ÔÔ0 1
)
ÔÔ1 2
{
 
break
ÒÒ 
;
ÒÒ 
}
ÚÚ 
}
ÛÛ 
}
ÙÙ 
return
ıı 	
continueScan
ıı
 
;
ıı 
}
ˆˆ 
private
¸¸ 	
string
¸¸
 
_searchPattern
¸¸ 
;
¸¸  
public
ÖÖ 
string
ÖÖ	 
SearchPattern
ÖÖ 
{
ÜÜ 
get
áá 
{
áá 
return
áá	 
_searchPattern
áá 
;
áá 
}
áá! "
set
àà 
{
ââ 
if
ãã 
(
ãã 
value
ãã 
==
ãã 
null
ãã 
||
ãã 
value
ãã 
.
ãã 
Trim
ãã #
(
ãã# $
)
ãã$ %
.
ãã% &
Length
ãã& ,
==
ãã- /
$num
ãã0 1
)
ãã1 2
{
åå 
_searchPattern
çç 
=
çç 
_patternAllFiles
çç &
;
çç& '
}
éé 
else
èè 
{
êê 
_searchPattern
ëë 
=
ëë 
value
ëë 
;
ëë 
_searchPattern
ìì 
=
ìì 
_searchPattern
ìì $
.
ìì$ %
TrimEnd
ìì% ,
(
ìì, -
new
ìì- 0
char
ìì1 5
[
ìì6 7
]
ìì7 8
{
ìì9 :
$char
ìì: =
}
ìì= >
)
ìì> ?
;
ìì? @
}
îî 
}
ïï 
}
ññ 
}
ôô 
}öö 