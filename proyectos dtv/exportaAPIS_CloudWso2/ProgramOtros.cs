
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;

namespace exportaAPIS_CloudWso2
{
    public static class ProgramOtros
    {
        public static void armaArrays(string[] args) //
        {
//AR.COMPARE.TECHNOLOGY.MINOR	4.1,4.201,4.202,4.242,4.283,4.305,4.200,4.227,4.228,4.5,4.243,4.245,4.246,283.202,283.242,283.305,283.243,283.245,283.246,1.201,1.202,1.242,1.283,1.305,1.227,1.228,1.243,1.245,1.246,200.201,200.202,200.242,200.283,200.305,200.227,200.228,200.243,200.245,200.246,201.202,201.242,201.283,201.305,201.243,201.245,201.246,227.202,227.242,227.283,227.305,227.243,227.245,227.246,228.202,228.242,228.283,228.305,228.243,228.245,228.246,202.305,243.305,245.305,246.305,242.202,242.305,242.243,242.245,242.246,283.381,1.381,4.381,242.381,202.381,200.381,5.381,246.381,306.381,201.381,245.381,244.381,243.381,227.381,228.381,381.305,381.173
//AR.COMPARE.TECHNOLOGY.EQUAL	4.4,283.283,1.1,1.200,200.1,200.200,201.201,201.227,201.228,227.201,227.227,227.228,228.201,228.227,228.228,202.202,202.243,202.245,202.246,243.202,243.243,243.245,243.246,245.202,245.243,245.245,245.246,246.202,246.243,246.245,246.246,242.242,305.305,380.202,380.242,380.305,380.244,380.228,380.243,380.245,380.246,380.380,381.381,380.381
//AR.COMPARE.TECHNOLOGY.MAJOR	283.1,283.201,283.200,283.227,283.228,283.5,283.4,1.4,200.4,201.1,201.200,201.4,227.1,227.200,227.4,228.1,228.200,228.4,202.1,202.201,202.242,202.283,202.200,202.227,202.228,202.4,243.1,243.201,243.242,243.283,243.200,243.227,243.228,243.4,245.1,245.201,245.242,245.283,245.200,245.227,245.228,245.4,246.1,246.201,246.242,246.283,246.200,246.227,246.228,246.4,242.1,242.201,242.283,242.200,242.227,242.228,242.4,305.1,305.201,305.202,305.242,305.283,305.200,305.227,305.228,305.243,305.245,305.246,305.4,381.283,381.1,381.4,381.242,381.202,381.200,381.5,381.246,381.201,381.245,381.244,381.243,381.227,381.228,173.381,305.381

//PE.COMPARE.TECHNOLOGY.MAJOR	88.1,101.1,101.88,101.191,191.1,191.88,244.1,244.88,244.101,244.191,231.102,244.287,287.231,287.102,287.101,287.191,287.88,287.1,191.102,191.231,101.102,101.231,244.102,244.231
//PE.COMPARE.TECHNOLOGY.EQUAL	1.1,88.88,101.101,191.191,244.244,102.102,231.231,287.287,286.286
//PE.COMPARE.TECHNOLOGY.MINOR	1.244,1.88,1.101,1.191,88.244,88.101,88.191,101.244,191.244,191.101,102.231,1.287,88.287,191.287,101.287,102.287,231.287,287.244

//CO.COMPARE.TECHNOLOGY.EQUAL	1.1,208.208,92.92,253.253,308.308,316.316,281.281,282.282,396.396,332.332
//CO.COMPARE.TECHNOLOGY.MINOR	1.208,1.92,1.253,1.308,1.316,208.92,208.253,208.316,92.1,92.208,92.316,253.92,253.316,1.396,208.396,253.396,92.396,308.396,396.316
//CO.COMPARE.TECHNOLOGY.MAJOR	208.1,253.1,253.208,308.1,316.1,316.208,316.92,316.253,253.308,316.308,396.308,316.396,396.308,396.92,396.253,396.208,396.1,92.253

//UY.COMPARE.TECHNOLOGY.EQUAL	4.4,1.1,201.201,202.202,242.242,242.173,191.191,173.242,173.173,139.139,138.138,212.212,248.248
//UY.COMPARE.TECHNOLOGY.MINOR	4.191,1.201,1.202,1.242,1.139,1.138,1.173,1.212,242.202,242.139,242.212,173.202,173.139,173.212,139.212,138.139,138.173,138.212,248.212,1.248,138.248,173.248,139.248
//UY.COMPARE.TECHNOLOGY.MAJOR	201.1,201.202,201.242,201.173,202.201,202.242,202.173,242.1,242.201,242.138,191.4,173.1,173.201,173.138,139.1,139.138,139.173,138.1,212.1,212.201,212.202,212.242,212.139,212.138,212.173,212.248,248.1,248.138,248.139,248.173

            var config = "4.191,1.201,1.202,1.242,1.139,1.138,1.173,1.212,242.202,242.139,242.212,173.202,173.139,173.212,139.212,138.139,138.173,138.212,248.212,1.248,138.248,173.248,139.248";

            var tech = new List<Tech>();
            var list = config.Split(",");
            foreach ( var item in list)
            {                
                var pair = item.Split(".");
                if (pair.Length == 2)
                {
                    int newT =Convert.ToInt32(pair[0]);
                    int oldT = Convert.ToInt32(pair[1]);

                    Tech o = tech.FirstOrDefault(m=>m.NewTechnology == newT);
                    if (o is null)
                    {
                        o = new Tech(){ NewTechnology = newT, _OldTechnology = new List<int>() };
                        tech.Add(o);
                    }
                    var ot = o._OldTechnology.FirstOrDefault(m=>m == oldT);
                    if (ot == 0)
                    {
                        o._OldTechnology.Add(oldT);
                    }
                }
                else{
                    throw new Exception(string.Format("par mal armado :{0}, {1}",  item, pair.Length ) );
                }
            }
            tech.ForEach(m=> m.OldTechnology = m._OldTechnology.ToArray());

            JsonSerializerOptions op = new JsonSerializerOptions() { WriteIndented = true };
            Console.WriteLine(JsonSerializer.Serialize(tech, options: op));

            Console.WriteLine("fin");
        }
    }

    internal class Tech
    {
        public int NewTechnology { get; set; }
        public int[] OldTechnology { get; set; }
        internal List<int> _OldTechnology { get; set; }
    }
}